module.exports = {

"[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
module.exports = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)").vendored["react-ssr"].ReactJsxDevRuntime; //# sourceMappingURL=react-jsx-dev-runtime.js.map

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayFeatureFlags = {
    ENABLE_CLIENT_EDGES: false,
    ENABLE_VARIABLE_CONNECTION_KEY: false,
    ENABLE_RELAY_RESOLVERS: false,
    ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION: false,
    ENABLE_FRIENDLY_QUERY_NAME_GQL_URL: false,
    ENABLE_LOAD_QUERY_REQUEST_DEDUPING: true,
    ENABLE_DO_NOT_WRAP_LIVE_QUERY: false,
    ENABLE_NOTIFY_SUBSCRIPTION: false,
    BATCH_ASYNC_MODULE_UPDATES_FN: null,
    ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT: false,
    MAX_DATA_ID_LENGTH: null,
    STRING_INTERN_LEVEL: 0,
    LOG_MISSING_RECORDS_IN_PROD: false,
    ENABLE_LOOSE_SUBSCRIPTION_ATTRIBUTION: false,
    ENABLE_OPERATION_TRACKER_OPTIMISTIC_UPDATES: false,
    ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE: false,
    ENABLE_FIELD_ERROR_HANDLING: false,
    ENABLE_FIELD_ERROR_HANDLING_THROW_BY_DEFAULT: false,
    ENABLE_FIELD_ERROR_HANDLING_CATCH_DIRECTIVE: false,
    ENABLE_SHALLOW_FREEZE_RESOLVER_VALUES: true,
    ENABLE_STRICT_EQUAL_SELECTORS: false
};
module.exports = RelayFeatureFlags;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/StringInterner.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var internTable = new Map();
var nextIndex = 1;
var digits = initDigitTable();
var INTERN_PREFIX = '\t';
var ESCAPE_PREFIX = '\v';
function initDigitTable() {
    var digits = new Set();
    for(var i = 0; i < 10; ++i){
        digits.add(i.toString());
    }
    return digits;
}
function escape(str) {
    if (str[0] === INTERN_PREFIX && digits.has(str[1]) || str[0] === ESCAPE_PREFIX) {
        return ESCAPE_PREFIX + str;
    }
    return str;
}
function intern(str, limit) {
    if (limit == null || str.length < limit) {
        return escape(str);
    }
    var internedString = internTable.get(str);
    if (internedString != null) {
        return internedString;
    }
    internedString = INTERN_PREFIX + nextIndex++;
    internTable.set(str, internedString);
    return internedString;
}
module.exports = {
    intern: intern
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/StringInterner.js [app-ssr] (ecmascript)"), intern = _require.intern;
var PREFIX = 'client:';
function generateClientID(id, storageKey, index) {
    var internedId = RelayFeatureFlags.STRING_INTERN_LEVEL <= 0 ? id : intern(id, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
    var key = internedId + ':' + storageKey;
    if (index != null) {
        key += ':' + index;
    }
    if (key.indexOf(PREFIX) !== 0) {
        key = PREFIX + key;
    }
    return key;
}
function isClientID(id) {
    return id.indexOf(PREFIX) === 0;
}
var localID = 0;
function generateUniqueClientID() {
    return "".concat(PREFIX, "local:").concat(localID++);
}
function generateClientObjectClientID(typename, localId, index) {
    var key = "".concat(PREFIX).concat(typename, ":").concat(localId);
    if (index != null) {
        key += ':' + index;
    }
    return key;
}
module.exports = {
    generateClientID: generateClientID,
    generateClientObjectClientID: generateClientObjectClientID,
    generateUniqueClientID: generateUniqueClientID,
    isClientID: isClientID
};

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/arrayLikeToArray.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var arrayLikeToArray = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/arrayLikeToArray.js [app-ssr] (ecmascript)");
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
}
module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/iterableToArray.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var arrayLikeToArray = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/arrayLikeToArray.js [app-ssr] (ecmascript)");
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/nonIterableSpread.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toConsumableArray.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var arrayWithoutHoles = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js [app-ssr] (ecmascript)");
var iterableToArray = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/iterableToArray.js [app-ssr] (ecmascript)");
var unsupportedIterableToArray = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js [app-ssr] (ecmascript)");
var nonIterableSpread = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/nonIterableSpread.js [app-ssr] (ecmascript)");
function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}
module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayDefaultHandleKey.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
module.exports = {
    DEFAULT_HANDLE_KEY: ''
};

}.call(this) }),
"[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */ var NODE_ENV = ("TURBOPACK compile-time value", "development");
var invariant = function(condition, format, a, b, c, d, e, f) {
    if ("TURBOPACK compile-time truthy", 1) {
        if (format === undefined) {
            throw new Error('invariant requires an error message argument');
        }
    }
    if (!condition) {
        var error;
        if (format === undefined) {
            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
            var args = [
                a,
                b,
                c,
                d,
                e,
                f
            ];
            var argIndex = 0;
            error = new Error(format.replace(/%s/g, function() {
                return args[argIndex++];
            }));
            error.name = 'Invariant Violation';
        }
        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
    }
};
module.exports = invariant;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getRelayHandleKey.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayDefaultHandleKey.js [app-ssr] (ecmascript)"), DEFAULT_HANDLE_KEY = _require.DEFAULT_HANDLE_KEY;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function getRelayHandleKey(handleName, key, fieldName) {
    if (key && key !== DEFAULT_HANDLE_KEY) {
        return "__".concat(key, "_").concat(handleName);
    }
    !(fieldName != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'getRelayHandleKey: Expected either `fieldName` or `key` in `handle` to be provided') : ("TURBOPACK unreachable", undefined) : void 0;
    return "__".concat(fieldName, "_").concat(handleName);
}
module.exports = getRelayHandleKey;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayConcreteNode = {
    ACTOR_CHANGE: 'ActorChange',
    CONDITION: 'Condition',
    CLIENT_COMPONENT: 'ClientComponent',
    CLIENT_EDGE_TO_SERVER_OBJECT: 'ClientEdgeToServerObject',
    CLIENT_EDGE_TO_CLIENT_OBJECT: 'ClientEdgeToClientObject',
    CLIENT_EXTENSION: 'ClientExtension',
    DEFER: 'Defer',
    CONNECTION: 'Connection',
    FRAGMENT: 'Fragment',
    FRAGMENT_SPREAD: 'FragmentSpread',
    INLINE_DATA_FRAGMENT_SPREAD: 'InlineDataFragmentSpread',
    INLINE_DATA_FRAGMENT: 'InlineDataFragment',
    INLINE_FRAGMENT: 'InlineFragment',
    LINKED_FIELD: 'LinkedField',
    LINKED_HANDLE: 'LinkedHandle',
    LITERAL: 'Literal',
    LIST_VALUE: 'ListValue',
    LOCAL_ARGUMENT: 'LocalArgument',
    MODULE_IMPORT: 'ModuleImport',
    ALIASED_FRAGMENT_SPREAD: 'AliasedFragmentSpread',
    ALIASED_INLINE_FRAGMENT_SPREAD: 'AliasedInlineFragmentSpread',
    RELAY_RESOLVER: 'RelayResolver',
    RELAY_LIVE_RESOLVER: 'RelayLiveResolver',
    REQUIRED_FIELD: 'RequiredField',
    OBJECT_VALUE: 'ObjectValue',
    OPERATION: 'Operation',
    REQUEST: 'Request',
    ROOT_ARGUMENT: 'RootArgument',
    SCALAR_FIELD: 'ScalarField',
    SCALAR_HANDLE: 'ScalarHandle',
    SPLIT_OPERATION: 'SplitOperation',
    STREAM: 'Stream',
    TYPE_DISCRIMINATOR: 'TypeDiscriminator',
    UPDATABLE_QUERY: 'UpdatableQuery',
    VARIABLE: 'Variable'
};
module.exports = RelayConcreteNode;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/stableCopy.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function stableCopy(value) {
    if (!value || typeof value !== 'object') {
        return value;
    }
    if (Array.isArray(value)) {
        return value.map(stableCopy);
    }
    var keys = Object.keys(value).sort();
    var stable = {};
    for(var i = 0; i < keys.length; i++){
        stable[keys[i]] = stableCopy(value[keys[i]]);
    }
    return stable;
}
module.exports = stableCopy;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _toConsumableArray2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toConsumableArray.js [app-ssr] (ecmascript)"));
var getRelayHandleKey = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getRelayHandleKey.js [app-ssr] (ecmascript)");
var RelayConcreteNode = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)");
var stableCopy = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/stableCopy.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var VARIABLE = RelayConcreteNode.VARIABLE, LITERAL = RelayConcreteNode.LITERAL, OBJECT_VALUE = RelayConcreteNode.OBJECT_VALUE, LIST_VALUE = RelayConcreteNode.LIST_VALUE;
var ERRORS_KEY = '__errors';
var MODULE_COMPONENT_KEY_PREFIX = '__module_component_';
var MODULE_OPERATION_KEY_PREFIX = '__module_operation_';
function getArgumentValue(arg, variables) {
    if (arg.kind === VARIABLE) {
        return getStableVariableValue(arg.variableName, variables);
    } else if (arg.kind === LITERAL) {
        return arg.value;
    } else if (arg.kind === OBJECT_VALUE) {
        var value = {};
        arg.fields.forEach(function(field) {
            value[field.name] = getArgumentValue(field, variables);
        });
        return value;
    } else if (arg.kind === LIST_VALUE) {
        var _value = [];
        arg.items.forEach(function(item) {
            item != null ? _value.push(getArgumentValue(item, variables)) : null;
        });
        return _value;
    }
}
function getArgumentValues(args, variables, isWithinUnmatchedTypeRefinement) {
    var values = {};
    if (isWithinUnmatchedTypeRefinement) {
        values[RelayStoreUtils.FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] = true;
    }
    if (args) {
        args.forEach(function(arg) {
            values[arg.name] = getArgumentValue(arg, variables);
        });
    }
    return values;
}
function getHandleStorageKey(handleField, variables) {
    var dynamicKey = handleField.dynamicKey, handle = handleField.handle, key = handleField.key, name = handleField.name, args = handleField.args, filters = handleField.filters;
    var handleName = getRelayHandleKey(handle, key, name);
    var filterArgs = null;
    if (args && filters && args.length !== 0 && filters.length !== 0) {
        filterArgs = args.filter(function(arg) {
            return filters.indexOf(arg.name) > -1;
        });
    }
    if (dynamicKey) {
        filterArgs = filterArgs != null ? [
            dynamicKey
        ].concat((0, _toConsumableArray2["default"])(filterArgs)) : [
            dynamicKey
        ];
    }
    if (filterArgs === null) {
        return handleName;
    } else {
        return formatStorageKey(handleName, getArgumentValues(filterArgs, variables));
    }
}
function getStorageKey(field, variables) {
    if (field.storageKey) {
        return field.storageKey;
    }
    var args = getArguments(field);
    var name = field.name;
    return args && args.length !== 0 ? formatStorageKey(name, getArgumentValues(args, variables)) : name;
}
function getArguments(field) {
    if (field.kind === 'RelayResolver' || field.kind === 'RelayLiveResolver') {
        var _field$fragment2;
        if (field.args == null) {
            var _field$fragment;
            return (_field$fragment = field.fragment) === null || _field$fragment === void 0 ? void 0 : _field$fragment.args;
        }
        if (((_field$fragment2 = field.fragment) === null || _field$fragment2 === void 0 ? void 0 : _field$fragment2.args) == null) {
            return field.args;
        }
        return field.args.concat(field.fragment.args);
    }
    var args = typeof field.args === 'undefined' ? undefined : field.args;
    return args;
}
function getStableStorageKey(name, args) {
    return formatStorageKey(name, stableCopy(args));
}
function formatStorageKey(name, argValues) {
    if (!argValues) {
        return name;
    }
    var values = [];
    for(var argName in argValues){
        if (argValues.hasOwnProperty(argName)) {
            var value = argValues[argName];
            if (value != null) {
                var _JSON$stringify;
                values.push(argName + ':' + ((_JSON$stringify = JSON.stringify(value)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : 'undefined'));
            }
        }
    }
    return values.length === 0 ? name : name + "(".concat(values.join(','), ")");
}
function getStableVariableValue(name, variables) {
    !variables.hasOwnProperty(name) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'getVariableValue(): Undefined variable `%s`.', name) : ("TURBOPACK unreachable", undefined) : void 0;
    return stableCopy(variables[name]);
}
function getModuleComponentKey(documentName) {
    return "".concat(MODULE_COMPONENT_KEY_PREFIX).concat(documentName);
}
function getModuleOperationKey(documentName) {
    return "".concat(MODULE_OPERATION_KEY_PREFIX).concat(documentName);
}
var RelayStoreUtils = {
    ACTOR_IDENTIFIER_KEY: '__actorIdentifier',
    CLIENT_EDGE_TRAVERSAL_PATH: '__clientEdgeTraversalPath',
    FRAGMENTS_KEY: '__fragments',
    FRAGMENT_OWNER_KEY: '__fragmentOwner',
    FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT: '$isWithinUnmatchedTypeRefinement',
    FRAGMENT_PROP_NAME_KEY: '__fragmentPropName',
    MODULE_COMPONENT_KEY: '__module_component',
    ERRORS_KEY: ERRORS_KEY,
    ID_KEY: '__id',
    REF_KEY: '__ref',
    REFS_KEY: '__refs',
    ROOT_ID: 'client:root',
    ROOT_TYPE: '__Root',
    TYPENAME_KEY: '__typename',
    INVALIDATED_AT_KEY: '__invalidated_at',
    RELAY_RESOLVER_VALUE_KEY: '__resolverValue',
    RELAY_RESOLVER_INVALIDATION_KEY: '__resolverValueMayBeInvalid',
    RELAY_RESOLVER_SNAPSHOT_KEY: '__resolverSnapshot',
    RELAY_RESOLVER_ERROR_KEY: '__resolverError',
    RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS: '__resolverOutputTypeRecordIDs',
    formatStorageKey: formatStorageKey,
    getArgumentValue: getArgumentValue,
    getArgumentValues: getArgumentValues,
    getHandleStorageKey: getHandleStorageKey,
    getStorageKey: getStorageKey,
    getStableStorageKey: getStableStorageKey,
    getModuleComponentKey: getModuleComponentKey,
    getModuleOperationKey: getModuleOperationKey
};
module.exports = RelayStoreUtils;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var CONNECTION_CALLS = {
    after: true,
    before: true,
    find: true,
    first: true,
    last: true,
    surrounds: true
};
var config = {
    CURSOR: 'cursor',
    EDGES: 'edges',
    END_CURSOR: 'endCursor',
    HAS_NEXT_PAGE: 'hasNextPage',
    HAS_PREV_PAGE: 'hasPreviousPage',
    NODE: 'node',
    PAGE_INFO_TYPE: 'PageInfo',
    PAGE_INFO: 'pageInfo',
    START_CURSOR: 'startCursor'
};
var ConnectionInterface = {
    inject: function inject(newConfig) {
        config = newConfig;
    },
    get: function get() {
        return config;
    },
    isConnectionCall: function isConnectionCall(call) {
        return CONNECTION_CALLS.hasOwnProperty(call.name);
    }
};
module.exports = ConnectionInterface;

}.call(this) }),
"[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/emptyFunction.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */ function makeEmptyFunction(arg) {
    return function() {
        return arg;
    };
}
/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */ var emptyFunction = function emptyFunction() {};
emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() {
    return this;
};
emptyFunction.thatReturnsArgument = function(arg) {
    return arg;
};
module.exports = emptyFunction;

}.call(this) }),
"[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */ 'use strict';
var emptyFunction = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/emptyFunction.js [app-ssr] (ecmascript)");
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ function printWarning(format) {
    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        args[_key - 1] = arguments[_key];
    }
    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function() {
        return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
        console.error(message);
    }
    try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
    } catch (x) {}
}
var warning = ("TURBOPACK compile-time truthy", 1) ? function(condition, format) {
    if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++){
            args[_key2 - 2] = arguments[_key2];
        }
        printWarning.apply(void 0, [
            format
        ].concat(args));
    }
} : ("TURBOPACK unreachable", undefined);
module.exports = warning;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)"), generateClientID = _require.generateClientID;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), getStableStorageKey = _require2.getStableStorageKey;
var getRelayHandleKey = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getRelayHandleKey.js [app-ssr] (ecmascript)");
var ConnectionInterface = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var CONNECTION = 'connection';
var NEXT_EDGE_INDEX = '__connection_next_edge_index';
function update(store, payload) {
    var record = store.get(payload.dataID);
    if (!record) {
        return;
    }
    var _ConnectionInterface$ = ConnectionInterface.get(), EDGES = _ConnectionInterface$.EDGES, END_CURSOR = _ConnectionInterface$.END_CURSOR, HAS_NEXT_PAGE = _ConnectionInterface$.HAS_NEXT_PAGE, HAS_PREV_PAGE = _ConnectionInterface$.HAS_PREV_PAGE, PAGE_INFO = _ConnectionInterface$.PAGE_INFO, PAGE_INFO_TYPE = _ConnectionInterface$.PAGE_INFO_TYPE, START_CURSOR = _ConnectionInterface$.START_CURSOR;
    var serverConnection = record.getLinkedRecord(payload.fieldKey);
    var serverPageInfo = serverConnection && serverConnection.getLinkedRecord(PAGE_INFO);
    if (!serverConnection) {
        record.setValue(null, payload.handleKey);
        return;
    }
    var clientConnectionID = generateClientID(record.getDataID(), payload.handleKey);
    var clientConnectionField = record.getLinkedRecord(payload.handleKey);
    var clientConnection = clientConnectionField !== null && clientConnectionField !== void 0 ? clientConnectionField : store.get(clientConnectionID);
    var clientPageInfo = clientConnection && clientConnection.getLinkedRecord(PAGE_INFO);
    if (!clientConnection) {
        var connection = store.create(clientConnectionID, serverConnection.getType());
        connection.setValue(0, NEXT_EDGE_INDEX);
        connection.copyFieldsFrom(serverConnection);
        var serverEdges = serverConnection.getLinkedRecords(EDGES);
        if (serverEdges) {
            serverEdges = serverEdges.map(function(edge) {
                return buildConnectionEdge(store, connection, edge);
            });
            connection.setLinkedRecords(serverEdges, EDGES);
        }
        record.setLinkedRecord(connection, payload.handleKey);
        clientPageInfo = store.create(generateClientID(connection.getDataID(), PAGE_INFO), PAGE_INFO_TYPE);
        clientPageInfo.setValue(false, HAS_NEXT_PAGE);
        clientPageInfo.setValue(false, HAS_PREV_PAGE);
        clientPageInfo.setValue(null, END_CURSOR);
        clientPageInfo.setValue(null, START_CURSOR);
        if (serverPageInfo) {
            clientPageInfo.copyFieldsFrom(serverPageInfo);
        }
        connection.setLinkedRecord(clientPageInfo, PAGE_INFO);
    } else {
        if (clientConnectionField == null) {
            record.setLinkedRecord(clientConnection, payload.handleKey);
        }
        var _connection = clientConnection;
        var _serverEdges = serverConnection.getLinkedRecords(EDGES);
        if (_serverEdges) {
            _serverEdges = _serverEdges.map(function(edge) {
                return buildConnectionEdge(store, _connection, edge);
            });
        }
        var prevEdges = _connection.getLinkedRecords(EDGES);
        var prevPageInfo = _connection.getLinkedRecord(PAGE_INFO);
        _connection.copyFieldsFrom(serverConnection);
        if (prevEdges) {
            _connection.setLinkedRecords(prevEdges, EDGES);
        }
        if (prevPageInfo) {
            _connection.setLinkedRecord(prevPageInfo, PAGE_INFO);
        }
        var nextEdges = [];
        var args = payload.args;
        if (prevEdges && _serverEdges) {
            if (args.after != null) {
                var _clientPageInfo;
                var clientEndCursor = (_clientPageInfo = clientPageInfo) === null || _clientPageInfo === void 0 ? void 0 : _clientPageInfo.getValue(END_CURSOR);
                var serverEndCursor = serverPageInfo === null || serverPageInfo === void 0 ? void 0 : serverPageInfo.getValue(END_CURSOR);
                var isAddingEdgesAfterCurrentPage = clientPageInfo && args.after === clientEndCursor;
                var isFillingOutCurrentPage = clientPageInfo && clientEndCursor === serverEndCursor;
                if (isAddingEdgesAfterCurrentPage || isFillingOutCurrentPage) {
                    var nodeIDs = new Set();
                    mergeEdges(prevEdges, nextEdges, nodeIDs);
                    mergeEdges(_serverEdges, nextEdges, nodeIDs);
                } else {
                    ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Unexpected after cursor `%s`, edges must ' + 'be fetched from the end of the list (`%s`).', args.after, clientPageInfo && clientPageInfo.getValue(END_CURSOR)) : ("TURBOPACK unreachable", undefined);
                    return;
                }
            } else if (args.before != null) {
                if (clientPageInfo && args.before === clientPageInfo.getValue(START_CURSOR)) {
                    var _nodeIDs = new Set();
                    mergeEdges(_serverEdges, nextEdges, _nodeIDs);
                    mergeEdges(prevEdges, nextEdges, _nodeIDs);
                } else {
                    ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Unexpected before cursor `%s`, edges must ' + 'be fetched from the beginning of the list (`%s`).', args.before, clientPageInfo && clientPageInfo.getValue(START_CURSOR)) : ("TURBOPACK unreachable", undefined);
                    return;
                }
            } else {
                nextEdges = _serverEdges;
            }
        } else if (_serverEdges) {
            nextEdges = _serverEdges;
        } else {
            nextEdges = prevEdges;
        }
        if (nextEdges != null && nextEdges !== prevEdges) {
            _connection.setLinkedRecords(nextEdges, EDGES);
        }
        if (clientPageInfo && serverPageInfo) {
            if (args.after == null && args.before == null) {
                clientPageInfo.copyFieldsFrom(serverPageInfo);
            } else if (args.before != null || args.after == null && args.last) {
                clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_PREV_PAGE), HAS_PREV_PAGE);
                var startCursor = serverPageInfo.getValue(START_CURSOR);
                if (typeof startCursor === 'string') {
                    clientPageInfo.setValue(startCursor, START_CURSOR);
                }
            } else if (args.after != null || args.before == null && args.first) {
                clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_NEXT_PAGE), HAS_NEXT_PAGE);
                var endCursor = serverPageInfo.getValue(END_CURSOR);
                if (typeof endCursor === 'string') {
                    clientPageInfo.setValue(endCursor, END_CURSOR);
                }
            }
        }
    }
}
function getConnection(record, key, filters) {
    var handleKey = getRelayHandleKey(CONNECTION, key, null);
    return record.getLinkedRecord(handleKey, filters);
}
function getConnectionID(recordID, key, filters) {
    var handleKey = getRelayHandleKey(CONNECTION, key, null);
    var storageKey = getStableStorageKey(handleKey, filters);
    return generateClientID(recordID, storageKey);
}
function insertEdgeAfter(record, newEdge, cursor) {
    var _ConnectionInterface$2 = ConnectionInterface.get(), CURSOR = _ConnectionInterface$2.CURSOR, EDGES = _ConnectionInterface$2.EDGES;
    var edges = record.getLinkedRecords(EDGES);
    if (!edges) {
        record.setLinkedRecords([
            newEdge
        ], EDGES);
        return;
    }
    var nextEdges;
    if (cursor == null) {
        nextEdges = edges.concat(newEdge);
    } else {
        nextEdges = [];
        var foundCursor = false;
        for(var ii = 0; ii < edges.length; ii++){
            var edge = edges[ii];
            nextEdges.push(edge);
            if (edge == null) {
                continue;
            }
            var edgeCursor = edge.getValue(CURSOR);
            if (cursor === edgeCursor) {
                nextEdges.push(newEdge);
                foundCursor = true;
            }
        }
        if (!foundCursor) {
            nextEdges.push(newEdge);
        }
    }
    record.setLinkedRecords(nextEdges, EDGES);
}
function createEdge(store, record, node, edgeType) {
    var _ConnectionInterface$3 = ConnectionInterface.get(), NODE = _ConnectionInterface$3.NODE;
    var edgeID = generateClientID(record.getDataID(), node.getDataID());
    var edge = store.get(edgeID);
    if (!edge) {
        edge = store.create(edgeID, edgeType);
    }
    edge.setLinkedRecord(node, NODE);
    if (edge.getValue('cursor') == null) {
        edge.setValue(null, 'cursor');
    }
    return edge;
}
function insertEdgeBefore(record, newEdge, cursor) {
    var _ConnectionInterface$4 = ConnectionInterface.get(), CURSOR = _ConnectionInterface$4.CURSOR, EDGES = _ConnectionInterface$4.EDGES;
    var edges = record.getLinkedRecords(EDGES);
    if (!edges) {
        record.setLinkedRecords([
            newEdge
        ], EDGES);
        return;
    }
    var nextEdges;
    if (cursor == null) {
        nextEdges = [
            newEdge
        ].concat(edges);
    } else {
        nextEdges = [];
        var foundCursor = false;
        for(var ii = 0; ii < edges.length; ii++){
            var edge = edges[ii];
            if (edge != null) {
                var edgeCursor = edge.getValue(CURSOR);
                if (cursor === edgeCursor) {
                    nextEdges.push(newEdge);
                    foundCursor = true;
                }
            }
            nextEdges.push(edge);
        }
        if (!foundCursor) {
            nextEdges.unshift(newEdge);
        }
    }
    record.setLinkedRecords(nextEdges, EDGES);
}
function deleteNode(record, nodeID) {
    var _ConnectionInterface$5 = ConnectionInterface.get(), EDGES = _ConnectionInterface$5.EDGES, NODE = _ConnectionInterface$5.NODE;
    var edges = record.getLinkedRecords(EDGES);
    if (!edges) {
        return;
    }
    var nextEdges;
    for(var ii = 0; ii < edges.length; ii++){
        var edge = edges[ii];
        var node = edge && edge.getLinkedRecord(NODE);
        if (node != null && node.getDataID() === nodeID) {
            if (nextEdges === undefined) {
                nextEdges = edges.slice(0, ii);
            }
        } else if (nextEdges !== undefined) {
            nextEdges.push(edge);
        }
    }
    if (nextEdges !== undefined) {
        record.setLinkedRecords(nextEdges, EDGES);
    }
}
function buildConnectionEdge(store, connection, edge) {
    if (edge == null) {
        return edge;
    }
    var _ConnectionInterface$6 = ConnectionInterface.get(), EDGES = _ConnectionInterface$6.EDGES;
    var edgeIndex = connection.getValue(NEXT_EDGE_INDEX);
    !(typeof edgeIndex === 'number') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ConnectionHandler: Expected %s to be a number, got `%s`.', NEXT_EDGE_INDEX, edgeIndex) : ("TURBOPACK unreachable", undefined) : void 0;
    var edgeID = generateClientID(connection.getDataID(), EDGES, edgeIndex);
    var connectionEdge = store.create(edgeID, edge.getType());
    connectionEdge.copyFieldsFrom(edge);
    if (connectionEdge.getValue('cursor') == null) {
        connectionEdge.setValue(null, 'cursor');
    }
    connection.setValue(edgeIndex + 1, NEXT_EDGE_INDEX);
    return connectionEdge;
}
function mergeEdges(sourceEdges, targetEdges, nodeIDs) {
    var _ConnectionInterface$7 = ConnectionInterface.get(), NODE = _ConnectionInterface$7.NODE;
    for(var ii = 0; ii < sourceEdges.length; ii++){
        var edge = sourceEdges[ii];
        if (!edge) {
            continue;
        }
        var node = edge.getLinkedRecord(NODE);
        var nodeID = node && node.getDataID();
        if (nodeID) {
            if (nodeIDs.has(nodeID)) {
                continue;
            }
            nodeIDs.add(nodeID);
        }
        targetEdges.push(edge);
    }
}
module.exports = {
    buildConnectionEdge: buildConnectionEdge,
    createEdge: createEdge,
    deleteNode: deleteNode,
    getConnection: getConnection,
    getConnectionID: getConnectionID,
    insertEdgeAfter: insertEdgeAfter,
    insertEdgeBefore: insertEdgeBefore,
    update: update
};

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var unsupportedIterableToArray = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js [app-ssr] (ecmascript)");
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it["return"] != null) it["return"]();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
module.exports = _createForOfIteratorHelper, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var ConnectionHandler = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js [app-ssr] (ecmascript)");
var ConnectionInterface = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var DeleteRecordHandler = {
    update: function update(store, payload) {
        var record = store.get(payload.dataID);
        if (record != null) {
            var idOrIds = record.getValue(payload.fieldKey);
            if (typeof idOrIds === 'string') {
                store["delete"](idOrIds);
            } else if (Array.isArray(idOrIds)) {
                idOrIds.forEach(function(id) {
                    if (typeof id === 'string') {
                        store["delete"](id);
                    }
                });
            }
        }
    }
};
var DeleteEdgeHandler = {
    update: function update(store, payload) {
        var record = store.get(payload.dataID);
        if (record == null) {
            return;
        }
        var connections = payload.handleArgs.connections;
        !(connections != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : ("TURBOPACK unreachable", undefined) : void 0;
        var idOrIds = record.getValue(payload.fieldKey);
        var idList = Array.isArray(idOrIds) ? idOrIds : [
            idOrIds
        ];
        idList.forEach(function(id) {
            if (typeof id === 'string') {
                var _iterator = (0, _createForOfIteratorHelper2["default"])(connections), _step;
                try {
                    for(_iterator.s(); !(_step = _iterator.n()).done;){
                        var connectionID = _step.value;
                        var connection = store.get(connectionID);
                        if (connection == null) {
                            ("TURBOPACK compile-time truthy", 1) ? warning(false, "[Relay] The connection with id `%s` doesn't exist.", connectionID) : ("TURBOPACK unreachable", undefined);
                            continue;
                        }
                        ConnectionHandler.deleteNode(connection, id);
                    }
                } catch (err) {
                    _iterator.e(err);
                } finally{
                    _iterator.f();
                }
            }
        });
    }
};
var AppendEdgeHandler = {
    update: edgeUpdater(ConnectionHandler.insertEdgeAfter)
};
var PrependEdgeHandler = {
    update: edgeUpdater(ConnectionHandler.insertEdgeBefore)
};
var AppendNodeHandler = {
    update: nodeUpdater(ConnectionHandler.insertEdgeAfter)
};
var PrependNodeHandler = {
    update: nodeUpdater(ConnectionHandler.insertEdgeBefore)
};
function edgeUpdater(insertFn) {
    return function(store, payload) {
        var _serverEdges;
        var record = store.get(payload.dataID);
        if (record == null) {
            return;
        }
        var connections = payload.handleArgs.connections;
        !(connections != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : ("TURBOPACK unreachable", undefined) : void 0;
        var singleServerEdge, serverEdges;
        try {
            singleServerEdge = record.getLinkedRecord(payload.fieldKey);
        } catch (_unused) {}
        if (!singleServerEdge) {
            try {
                serverEdges = record.getLinkedRecords(payload.fieldKey);
            } catch (_unused2) {}
        }
        if (singleServerEdge == null && serverEdges == null) {
            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'MutationHandlers: Expected the server edge to be non-null.') : ("TURBOPACK unreachable", undefined);
            return;
        }
        var _ConnectionInterface$ = ConnectionInterface.get(), NODE = _ConnectionInterface$.NODE, EDGES = _ConnectionInterface$.EDGES;
        var serverEdgeList = (_serverEdges = serverEdges) !== null && _serverEdges !== void 0 ? _serverEdges : [
            singleServerEdge
        ];
        var _iterator2 = (0, _createForOfIteratorHelper2["default"])(serverEdgeList), _step2;
        try {
            var _loop = function _loop() {
                var serverEdge = _step2.value;
                if (serverEdge == null) {
                    return "continue";
                }
                var serverNode = serverEdge.getLinkedRecord('node');
                if (!serverNode) {
                    return "continue";
                }
                var serverNodeId = serverNode.getDataID();
                var _iterator3 = (0, _createForOfIteratorHelper2["default"])(connections), _step3;
                try {
                    for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
                        var connectionID = _step3.value;
                        var connection = store.get(connectionID);
                        if (connection == null) {
                            ("TURBOPACK compile-time truthy", 1) ? warning(false, "[Relay] The connection with id `%s` doesn't exist.", connectionID) : ("TURBOPACK unreachable", undefined);
                            continue;
                        }
                        var nodeAlreadyExistsInConnection = (_connection$getLinked = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked === void 0 ? void 0 : _connection$getLinked.some(function(edge) {
                            var _edge$getLinkedRecord;
                            return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord === void 0 ? void 0 : _edge$getLinkedRecord.getDataID()) === serverNodeId;
                        });
                        if (nodeAlreadyExistsInConnection) {
                            continue;
                        }
                        var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);
                        !(clientEdge != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'MutationHandlers: Failed to build the edge.') : ("TURBOPACK unreachable", undefined) : void 0;
                        insertFn(connection, clientEdge);
                    }
                } catch (err) {
                    _iterator3.e(err);
                } finally{
                    _iterator3.f();
                }
            };
            for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                var _connection$getLinked;
                var _ret = _loop();
                if (_ret === "continue") continue;
            }
        } catch (err) {
            _iterator2.e(err);
        } finally{
            _iterator2.f();
        }
    };
}
function nodeUpdater(insertFn) {
    return function(store, payload) {
        var _serverNodes;
        var record = store.get(payload.dataID);
        if (record == null) {
            return;
        }
        var _payload$handleArgs = payload.handleArgs, connections = _payload$handleArgs.connections, edgeTypeName = _payload$handleArgs.edgeTypeName;
        !(connections != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : ("TURBOPACK unreachable", undefined) : void 0;
        !(edgeTypeName != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'MutationHandlers: Expected edge typename to be specified.') : ("TURBOPACK unreachable", undefined) : void 0;
        var singleServerNode;
        var serverNodes;
        try {
            singleServerNode = record.getLinkedRecord(payload.fieldKey);
        } catch (_unused3) {}
        if (!singleServerNode) {
            try {
                serverNodes = record.getLinkedRecords(payload.fieldKey);
            } catch (_unused4) {}
        }
        if (singleServerNode == null && serverNodes == null) {
            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'MutationHandlers: Expected target node to exist.') : ("TURBOPACK unreachable", undefined);
            return;
        }
        var _ConnectionInterface$2 = ConnectionInterface.get(), NODE = _ConnectionInterface$2.NODE, EDGES = _ConnectionInterface$2.EDGES;
        var serverNodeList = (_serverNodes = serverNodes) !== null && _serverNodes !== void 0 ? _serverNodes : [
            singleServerNode
        ];
        var _iterator4 = (0, _createForOfIteratorHelper2["default"])(serverNodeList), _step4;
        try {
            var _loop2 = function _loop2() {
                var serverNode = _step4.value;
                if (serverNode == null) {
                    return "continue";
                }
                var serverNodeId = serverNode.getDataID();
                var _iterator5 = (0, _createForOfIteratorHelper2["default"])(connections), _step5;
                try {
                    for(_iterator5.s(); !(_step5 = _iterator5.n()).done;){
                        var connectionID = _step5.value;
                        var connection = store.get(connectionID);
                        if (connection == null) {
                            ("TURBOPACK compile-time truthy", 1) ? warning(false, "[Relay] The connection with id `%s` doesn't exist.", connectionID) : ("TURBOPACK unreachable", undefined);
                            continue;
                        }
                        var nodeAlreadyExistsInConnection = (_connection$getLinked2 = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked2 === void 0 ? void 0 : _connection$getLinked2.some(function(edge) {
                            var _edge$getLinkedRecord2;
                            return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord2 = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord2 === void 0 ? void 0 : _edge$getLinkedRecord2.getDataID()) === serverNodeId;
                        });
                        if (nodeAlreadyExistsInConnection) {
                            continue;
                        }
                        var clientEdge = ConnectionHandler.createEdge(store, connection, serverNode, edgeTypeName);
                        !(clientEdge != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'MutationHandlers: Failed to build the edge.') : ("TURBOPACK unreachable", undefined) : void 0;
                        insertFn(connection, clientEdge);
                    }
                } catch (err) {
                    _iterator5.e(err);
                } finally{
                    _iterator5.f();
                }
            };
            for(_iterator4.s(); !(_step4 = _iterator4.n()).done;){
                var _connection$getLinked2;
                var _ret2 = _loop2();
                if (_ret2 === "continue") continue;
            }
        } catch (err) {
            _iterator4.e(err);
        } finally{
            _iterator4.f();
        }
    };
}
module.exports = {
    AppendEdgeHandler: AppendEdgeHandler,
    DeleteRecordHandler: DeleteRecordHandler,
    PrependEdgeHandler: PrependEdgeHandler,
    AppendNodeHandler: AppendNodeHandler,
    PrependNodeHandler: PrependNodeHandler,
    DeleteEdgeHandler: DeleteEdgeHandler
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/RelayDefaultHandlerProvider.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var ConnectionHandler = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js [app-ssr] (ecmascript)");
var MutationHandlers = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function RelayDefaultHandlerProvider(handle) {
    switch(handle){
        case 'connection':
            return ConnectionHandler;
        case 'deleteRecord':
            return MutationHandlers.DeleteRecordHandler;
        case 'deleteEdge':
            return MutationHandlers.DeleteEdgeHandler;
        case 'appendEdge':
            return MutationHandlers.AppendEdgeHandler;
        case 'prependEdge':
            return MutationHandlers.PrependEdgeHandler;
        case 'appendNode':
            return MutationHandlers.AppendNodeHandler;
        case 'prependNode':
            return MutationHandlers.PrependNodeHandler;
    }
    ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayDefaultHandlerProvider: No handler provided for `%s`.', handle) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
}
module.exports = RelayDefaultHandlerProvider;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayConcreteNode = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function graphql(strings) {
    ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'graphql: Unexpected invocation at runtime. Either the Babel transform ' + 'was not set up, or it failed to identify this call site. Make sure it ' + 'is being used verbatim as `graphql`. Note also that there cannot be ' + 'a space between graphql and the backtick that follows.') : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
}
function getNode(taggedNode) {
    var node = taggedNode;
    if (typeof node === 'function') {
        node = node();
        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayGraphQLTag: node `%s` unexpectedly wrapped in a function.', node.kind === 'Fragment' ? node.name : node.operation.name) : ("TURBOPACK unreachable", undefined);
    } else if (node["default"]) {
        node = node["default"];
    }
    return node;
}
function isFragment(node) {
    var fragment = getNode(node);
    return typeof fragment === 'object' && fragment !== null && fragment.kind === RelayConcreteNode.FRAGMENT;
}
function isRequest(node) {
    var request = getNode(node);
    return typeof request === 'object' && request !== null && request.kind === RelayConcreteNode.REQUEST;
}
function isUpdatableQuery(node) {
    var updatableQuery = getNode(node);
    return typeof updatableQuery === 'object' && updatableQuery !== null && updatableQuery.kind === RelayConcreteNode.UPDATABLE_QUERY;
}
function isInlineDataFragment(node) {
    var fragment = getNode(node);
    return typeof fragment === 'object' && fragment !== null && fragment.kind === RelayConcreteNode.INLINE_DATA_FRAGMENT;
}
function getFragment(taggedNode) {
    var fragment = getNode(taggedNode);
    !isFragment(fragment) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'GraphQLTag: Expected a fragment, got `%s`.', JSON.stringify(fragment)) : ("TURBOPACK unreachable", undefined) : void 0;
    return fragment;
}
function getPaginationFragment(taggedNode) {
    var _fragment$metadata;
    var fragment = getFragment(taggedNode);
    var refetch = (_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.refetch;
    var connection = refetch === null || refetch === void 0 ? void 0 : refetch.connection;
    if (refetch === null || typeof refetch !== 'object' || connection === null || typeof connection !== 'object') {
        return null;
    }
    return fragment;
}
function getRefetchableFragment(taggedNode) {
    var _fragment$metadata2;
    var fragment = getFragment(taggedNode);
    var refetch = (_fragment$metadata2 = fragment.metadata) === null || _fragment$metadata2 === void 0 ? void 0 : _fragment$metadata2.refetch;
    if (refetch === null || typeof refetch !== 'object') {
        return null;
    }
    return fragment;
}
function getRequest(taggedNode) {
    var request = getNode(taggedNode);
    !isRequest(request) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'GraphQLTag: Expected a request, got `%s`.', JSON.stringify(request)) : ("TURBOPACK unreachable", undefined) : void 0;
    return request;
}
function getUpdatableQuery(taggedNode) {
    var updatableQuery = getNode(taggedNode);
    !isUpdatableQuery(updatableQuery) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'GraphQLTag: Expected a request, got `%s`.', JSON.stringify(updatableQuery)) : ("TURBOPACK unreachable", undefined) : void 0;
    return updatableQuery;
}
function getInlineDataFragment(taggedNode) {
    var fragment = getNode(taggedNode);
    !isInlineDataFragment(fragment) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'GraphQLTag: Expected an inline data fragment, got `%s`.', JSON.stringify(fragment)) : ("TURBOPACK unreachable", undefined) : void 0;
    return fragment;
}
module.exports = {
    getFragment: getFragment,
    getNode: getNode,
    getPaginationFragment: getPaginationFragment,
    getRefetchableFragment: getRefetchableFragment,
    getRequest: getRequest,
    getUpdatableQuery: getUpdatableQuery,
    getInlineDataFragment: getInlineDataFragment,
    graphql: graphql,
    isFragment: isFragment,
    isRequest: isRequest,
    isUpdatableQuery: isUpdatableQuery,
    isInlineDataFragment: isInlineDataFragment
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function isRelayModernEnvironment(environment) {
    return Boolean(environment && environment['@@RelayModernEnvironment']);
}
module.exports = isRelayModernEnvironment;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/deepFreeze.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function deepFreeze(object) {
    if (!shouldBeFrozen(object)) {
        return object;
    }
    Object.freeze(object);
    Object.getOwnPropertyNames(object).forEach(function(name) {
        var property = object[name];
        if (property && typeof property === 'object' && !Object.isFrozen(property)) {
            deepFreeze(property);
        }
    });
    return object;
}
function shouldBeFrozen(value) {
    return value != null && (Array.isArray(value) || typeof value === 'object' && value.constructor === Object);
}
module.exports = deepFreeze;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getRequestIdentifier.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var stableCopy = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/stableCopy.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function getRequestIdentifier(parameters, variables) {
    var requestID = parameters.cacheID != null ? parameters.cacheID : parameters.id;
    !(requestID != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'getRequestIdentifier: Expected request `%s` to have either a ' + 'valid `id` or `cacheID` property', parameters.name) : ("TURBOPACK unreachable", undefined) : void 0;
    return requestID + JSON.stringify(stableCopy(variables));
}
module.exports = getRequestIdentifier;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/typeof.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _typeof(o) {
    "@babel/helpers - typeof";
    return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toPrimitive.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var _typeof = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/typeof.js [app-ssr] (ecmascript)")["default"];
function toPrimitive(t, r) {
    if ("object" != _typeof(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
}
module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toPropertyKey.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var _typeof = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/typeof.js [app-ssr] (ecmascript)")["default"];
var toPrimitive = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toPrimitive.js [app-ssr] (ecmascript)");
function toPropertyKey(t) {
    var i = toPrimitive(t, "string");
    return "symbol" == _typeof(i) ? i : String(i);
}
module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var toPropertyKey = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toPropertyKey.js [app-ssr] (ecmascript)");
function _defineProperty(obj, key, value) {
    key = toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var defineProperty = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)");
function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r) {
            return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}
function _objectSpread2(e) {
    for(var r = 1; r < arguments.length; r++){
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {
            defineProperty(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
    }
    return e;
}
module.exports = _objectSpread2, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), getArgumentValues = _require.getArgumentValues;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function getFragmentVariables(fragment, rootVariables, argumentVariables) {
    if (fragment.argumentDefinitions == null) {
        return argumentVariables;
    }
    var variables;
    fragment.argumentDefinitions.forEach(function(definition) {
        if (argumentVariables.hasOwnProperty(definition.name)) {
            return;
        }
        variables = variables || (0, _objectSpread2["default"])({}, argumentVariables);
        switch(definition.kind){
            case 'LocalArgument':
                variables[definition.name] = definition.defaultValue;
                break;
            case 'RootArgument':
                if (!rootVariables.hasOwnProperty(definition.name)) {
                    variables[definition.name] = undefined;
                    break;
                }
                variables[definition.name] = rootVariables[definition.name];
                break;
            default:
                definition;
                ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayConcreteVariables: Unexpected node kind `%s` in fragment `%s`.', definition.kind, fragment.name) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
        }
    });
    return variables || argumentVariables;
}
function getOperationVariables(operation, providedVariables, variables) {
    var operationVariables = {};
    operation.argumentDefinitions.forEach(function(def) {
        var value = def.defaultValue;
        if (variables[def.name] != null) {
            value = variables[def.name];
        }
        operationVariables[def.name] = value;
    });
    if (providedVariables != null) {
        Object.keys(providedVariables).forEach(function(varName) {
            operationVariables[varName] = providedVariables[varName].get();
        });
    }
    return operationVariables;
}
function getLocalVariables(currentVariables, argumentDefinitions, args) {
    if (argumentDefinitions == null) {
        return currentVariables;
    }
    var nextVariables = (0, _objectSpread2["default"])({}, currentVariables);
    var nextArgs = args ? getArgumentValues(args, currentVariables) : {};
    argumentDefinitions.forEach(function(def) {
        var _nextArgs$def$name;
        var value = (_nextArgs$def$name = nextArgs[def.name]) !== null && _nextArgs$def$name !== void 0 ? _nextArgs$def$name : def.defaultValue;
        nextVariables[def.name] = value;
    });
    return nextVariables;
}
module.exports = {
    getLocalVariables: getLocalVariables,
    getFragmentVariables: getFragmentVariables,
    getOperationVariables: getOperationVariables
};

}.call(this) }),
"[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */ var aStackPool = [];
var bStackPool = [];
/**
 * Checks if two values are equal. Values may be primitives, arrays, or objects.
 * Returns true if both arguments have the same keys and values.
 *
 * @see http://underscorejs.org
 * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
 * @license MIT
 */ function areEqual(a, b) {
    var aStack = aStackPool.length ? aStackPool.pop() : [];
    var bStack = bStackPool.length ? bStackPool.pop() : [];
    var result = eq(a, b, aStack, bStack);
    aStack.length = 0;
    bStack.length = 0;
    aStackPool.push(aStack);
    bStackPool.push(bStack);
    return result;
}
function eq(a, b, aStack, bStack) {
    if (a === b) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        return a !== 0 || 1 / a == 1 / b;
    }
    if (a == null || b == null) {
        // a or b can be `null` or `undefined`
        return false;
    }
    if (typeof a != 'object' || typeof b != 'object') {
        return false;
    }
    var objToStr = Object.prototype.toString;
    var className = objToStr.call(a);
    if (className != objToStr.call(b)) {
        return false;
    }
    switch(className){
        case '[object String]':
            return a == String(b);
        case '[object Number]':
            return isNaN(a) || isNaN(b) ? false : a == Number(b);
        case '[object Date]':
        case '[object Boolean]':
            return +a == +b;
        case '[object RegExp]':
            return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
    } // Assume equality for cyclic structures.
    var length = aStack.length;
    while(length--){
        if (aStack[length] == a) {
            return bStack[length] == b;
        }
    }
    aStack.push(a);
    bStack.push(b);
    var size = 0; // Recursively compare objects and arrays.
    if (className === '[object Array]') {
        size = a.length;
        if (size !== b.length) {
            return false;
        } // Deep compare the contents, ignoring non-numeric properties.
        while(size--){
            if (!eq(a[size], b[size], aStack, bStack)) {
                return false;
            }
        }
    } else {
        if (a.constructor !== b.constructor) {
            return false;
        }
        if (a.hasOwnProperty('valueOf') && b.hasOwnProperty('valueOf')) {
            return a.valueOf() == b.valueOf();
        }
        var keys = Object.keys(a);
        if (keys.length != Object.keys(b).length) {
            return false;
        }
        for(var i = 0; i < keys.length; i++){
            if (!eq(a[keys[i]], b[keys[i]], aStack, bStack)) {
                return false;
            }
        }
    }
    aStack.pop();
    bStack.pop();
    return true;
}
module.exports = areEqual;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernSelector.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js [app-ssr] (ecmascript)"), getFragmentVariables = _require.getFragmentVariables;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), CLIENT_EDGE_TRAVERSAL_PATH = _require2.CLIENT_EDGE_TRAVERSAL_PATH, FRAGMENT_OWNER_KEY = _require2.FRAGMENT_OWNER_KEY, FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT = _require2.FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT, FRAGMENTS_KEY = _require2.FRAGMENTS_KEY, ID_KEY = _require2.ID_KEY;
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function getSingularSelector(fragment, item) {
    !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : ("TURBOPACK unreachable", undefined) : void 0;
    var dataID = item[ID_KEY];
    var fragments = item[FRAGMENTS_KEY];
    var mixedOwner = item[FRAGMENT_OWNER_KEY];
    var mixedClientEdgeTraversalPath = item[CLIENT_EDGE_TRAVERSAL_PATH];
    if (typeof dataID === 'string' && typeof fragments === 'object' && fragments !== null && typeof fragments[fragment.name] === 'object' && fragments[fragment.name] !== null && typeof mixedOwner === 'object' && mixedOwner !== null && (mixedClientEdgeTraversalPath == null || Array.isArray(mixedClientEdgeTraversalPath))) {
        var owner = mixedOwner;
        var clientEdgeTraversalPath = mixedClientEdgeTraversalPath;
        var argumentVariables = fragments[fragment.name];
        var fragmentVariables = getFragmentVariables(fragment, owner.variables, argumentVariables);
        var isWithinUnmatchedTypeRefinement = argumentVariables[FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] === true;
        return createReaderSelector(fragment, dataID, fragmentVariables, owner, isWithinUnmatchedTypeRefinement, clientEdgeTraversalPath);
    }
    if ("TURBOPACK compile-time truthy", 1) {
        var stringifiedItem = JSON.stringify(item);
        if (stringifiedItem.length > 499) {
            stringifiedItem = stringifiedItem.substr(0, 498) + "\u2026";
        }
        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`.', fragment.name, stringifiedItem, fragment.name) : ("TURBOPACK unreachable", undefined);
    }
    return null;
}
function getPluralSelector(fragment, items) {
    var selectors = null;
    items.forEach(function(item, ii) {
        var selector = item != null ? getSingularSelector(fragment, item) : null;
        if (selector != null) {
            selectors = selectors || [];
            selectors.push(selector);
        }
    });
    if (selectors == null) {
        return null;
    } else {
        return {
            kind: 'PluralReaderSelector',
            selectors: selectors
        };
    }
}
function getSelector(fragment, item) {
    if (item == null) {
        return item;
    } else if (fragment.metadata && fragment.metadata.plural === true) {
        !Array.isArray(item) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : ("TURBOPACK unreachable", undefined) : void 0;
        return getPluralSelector(fragment, item);
    } else {
        !!Array.isArray(item) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : ("TURBOPACK unreachable", undefined) : void 0;
        return getSingularSelector(fragment, item);
    }
}
function getSelectorsFromObject(fragments, object) {
    var selectors = {};
    for(var key in fragments){
        if (fragments.hasOwnProperty(key)) {
            var fragment = fragments[key];
            var item = object[key];
            selectors[key] = getSelector(fragment, item);
        }
    }
    return selectors;
}
function getDataIDsFromObject(fragments, object) {
    var ids = {};
    for(var key in fragments){
        if (fragments.hasOwnProperty(key)) {
            var fragment = fragments[key];
            var item = object[key];
            ids[key] = getDataIDsFromFragment(fragment, item);
        }
    }
    return ids;
}
function getDataIDsFromFragment(fragment, item) {
    if (item == null) {
        return item;
    } else if (fragment.metadata && fragment.metadata.plural === true) {
        !Array.isArray(item) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : ("TURBOPACK unreachable", undefined) : void 0;
        return getDataIDs(fragment, item);
    } else {
        !!Array.isArray(item) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : ("TURBOPACK unreachable", undefined) : void 0;
        return getDataID(fragment, item);
    }
}
function getDataIDs(fragment, items) {
    var ids = null;
    items.forEach(function(item) {
        var id = item != null ? getDataID(fragment, item) : null;
        if (id != null) {
            ids = ids || [];
            ids.push(id);
        }
    });
    return ids;
}
function getDataID(fragment, item) {
    !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : ("TURBOPACK unreachable", undefined) : void 0;
    var dataID = item[ID_KEY];
    if (typeof dataID === 'string') {
        return dataID;
    }
    ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`, or `null` is passed as the fragment ' + "reference for `%s` if it's conditonally included and the condition isn't met.", fragment.name, JSON.stringify(item), fragment.name, fragment.name) : ("TURBOPACK unreachable", undefined);
    return null;
}
function getVariablesFromObject(fragments, object) {
    var variables = {};
    for(var key in fragments){
        if (fragments.hasOwnProperty(key)) {
            var fragment = fragments[key];
            var item = object[key];
            var itemVariables = getVariablesFromFragment(fragment, item);
            Object.assign(variables, itemVariables);
        }
    }
    return variables;
}
function getVariablesFromFragment(fragment, item) {
    var _fragment$metadata;
    if (item == null) {
        return {};
    } else if (((_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.plural) === true) {
        !Array.isArray(item) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : ("TURBOPACK unreachable", undefined) : void 0;
        return getVariablesFromPluralFragment(fragment, item);
    } else {
        !!Array.isArray(item) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : ("TURBOPACK unreachable", undefined) : void 0;
        return getVariablesFromSingularFragment(fragment, item) || {};
    }
}
function getVariablesFromSingularFragment(fragment, item) {
    var selector = getSingularSelector(fragment, item);
    if (!selector) {
        return null;
    }
    return selector.variables;
}
function getVariablesFromPluralFragment(fragment, items) {
    var variables = {};
    items.forEach(function(value, ii) {
        if (value != null) {
            var itemVariables = getVariablesFromSingularFragment(fragment, value);
            if (itemVariables != null) {
                Object.assign(variables, itemVariables);
            }
        }
    });
    return variables;
}
function areEqualSingularSelectors(thisSelector, thatSelector) {
    return thisSelector.dataID === thatSelector.dataID && thisSelector.node === thatSelector.node && areEqual(thisSelector.variables, thatSelector.variables) && areEqualOwners(thisSelector.owner, thatSelector.owner) && (!RelayFeatureFlags.ENABLE_STRICT_EQUAL_SELECTORS || thisSelector.isWithinUnmatchedTypeRefinement === thatSelector.isWithinUnmatchedTypeRefinement && areEqualClientEdgeTraversalPaths(thisSelector.clientEdgeTraversalPath, thatSelector.clientEdgeTraversalPath));
}
function areEqualOwners(thisOwner, thatOwner) {
    if (thisOwner === thatOwner) {
        return true;
    } else {
        return thisOwner.identifier === thatOwner.identifier && areEqual(thisOwner.cacheConfig, thatOwner.cacheConfig);
    }
}
function areEqualClientEdgeTraversalPaths(thisPath, thatPath) {
    if (thisPath === thatPath) {
        return true;
    }
    if (thisPath == null || thatPath == null || thisPath.length !== thatPath.length) {
        return false;
    }
    var idx = thisPath.length;
    while(idx--){
        var a = thisPath[idx];
        var b = thatPath[idx];
        if (a === b) {
            continue;
        }
        if (a == null || b == null || a.clientEdgeDestinationID !== b.clientEdgeDestinationID || a.readerClientEdge !== b.readerClientEdge) {
            return false;
        }
    }
    return true;
}
function areEqualSelectors(a, b) {
    if (a === b) {
        return true;
    } else if (a == null) {
        return b == null;
    } else if (b == null) {
        return a == null;
    } else if (a.kind === 'SingularReaderSelector' && b.kind === 'SingularReaderSelector') {
        return areEqualSingularSelectors(a, b);
    } else if (a.kind === 'PluralReaderSelector' && b.kind === 'PluralReaderSelector') {
        return a.selectors.length === b.selectors.length && a.selectors.every(function(s, i) {
            return areEqualSingularSelectors(s, b.selectors[i]);
        });
    } else {
        return false;
    }
}
function createReaderSelector(fragment, dataID, variables, request) {
    var isWithinUnmatchedTypeRefinement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var clientEdgeTraversalPath = arguments.length > 5 ? arguments[5] : undefined;
    return {
        kind: 'SingularReaderSelector',
        dataID: dataID,
        isWithinUnmatchedTypeRefinement: isWithinUnmatchedTypeRefinement,
        clientEdgeTraversalPath: clientEdgeTraversalPath !== null && clientEdgeTraversalPath !== void 0 ? clientEdgeTraversalPath : null,
        node: fragment,
        variables: variables,
        owner: request
    };
}
function createNormalizationSelector(node, dataID, variables) {
    return {
        dataID: dataID,
        node: node,
        variables: variables
    };
}
module.exports = {
    areEqualSelectors: areEqualSelectors,
    createReaderSelector: createReaderSelector,
    createNormalizationSelector: createNormalizationSelector,
    getDataIDsFromFragment: getDataIDsFromFragment,
    getDataIDsFromObject: getDataIDsFromObject,
    getSingularSelector: getSingularSelector,
    getPluralSelector: getPluralSelector,
    getSelector: getSelector,
    getSelectorsFromObject: getSelectorsFromObject,
    getVariablesFromSingularFragment: getVariablesFromSingularFragment,
    getVariablesFromPluralFragment: getVariablesFromPluralFragment,
    getVariablesFromFragment: getVariablesFromFragment,
    getVariablesFromObject: getVariablesFromObject
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var deepFreeze = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/deepFreeze.js [app-ssr] (ecmascript)");
var getRequestIdentifier = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getRequestIdentifier.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js [app-ssr] (ecmascript)"), getOperationVariables = _require.getOperationVariables;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernSelector.js [app-ssr] (ecmascript)"), createNormalizationSelector = _require2.createNormalizationSelector, createReaderSelector = _require2.createReaderSelector;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), ROOT_ID = _require3.ROOT_ID;
function createOperationDescriptor(request, variables, cacheConfig) {
    var dataID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ROOT_ID;
    var operation = request.operation;
    var operationVariables = getOperationVariables(operation, request.params.providedVariables, variables);
    var requestDescriptor = createRequestDescriptor(request, operationVariables, cacheConfig);
    var operationDescriptor = {
        fragment: createReaderSelector(request.fragment, dataID, operationVariables, requestDescriptor),
        request: requestDescriptor,
        root: createNormalizationSelector(operation, dataID, operationVariables)
    };
    if ("TURBOPACK compile-time truthy", 1) {
        Object.freeze(operationDescriptor.fragment);
        Object.freeze(operationDescriptor.root);
        Object.freeze(operationDescriptor);
    }
    return operationDescriptor;
}
function createRequestDescriptor(request, variables, cacheConfig) {
    var requestDescriptor = {
        identifier: getRequestIdentifier(request.params, variables),
        node: request,
        variables: variables,
        cacheConfig: cacheConfig
    };
    if ("TURBOPACK compile-time truthy", 1) {
        deepFreeze(variables);
        Object.freeze(request);
        Object.freeze(requestDescriptor);
    }
    return requestDescriptor;
}
module.exports = {
    createOperationDescriptor: createOperationDescriptor,
    createRequestDescriptor: createRequestDescriptor
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var ConnectionHandler = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var MutationTypes = Object.freeze({
    RANGE_ADD: 'RANGE_ADD',
    RANGE_DELETE: 'RANGE_DELETE',
    NODE_DELETE: 'NODE_DELETE'
});
var RangeOperations = Object.freeze({
    APPEND: 'append',
    PREPEND: 'prepend'
});
function convert(configs, request, optimisticUpdater, updater) {
    var configOptimisticUpdates = optimisticUpdater ? [
        optimisticUpdater
    ] : [];
    var configUpdates = updater ? [
        updater
    ] : [];
    configs.forEach(function(config) {
        switch(config.type){
            case 'NODE_DELETE':
                var nodeDeleteResult = nodeDelete(config, request);
                if (nodeDeleteResult) {
                    configOptimisticUpdates.push(nodeDeleteResult);
                    configUpdates.push(nodeDeleteResult);
                }
                break;
            case 'RANGE_ADD':
                var rangeAddResult = rangeAdd(config, request);
                if (rangeAddResult) {
                    configOptimisticUpdates.push(rangeAddResult);
                    configUpdates.push(rangeAddResult);
                }
                break;
            case 'RANGE_DELETE':
                var rangeDeleteResult = rangeDelete(config, request);
                if (rangeDeleteResult) {
                    configOptimisticUpdates.push(rangeDeleteResult);
                    configUpdates.push(rangeDeleteResult);
                }
                break;
        }
    });
    return {
        optimisticUpdater: function optimisticUpdater(store, data) {
            configOptimisticUpdates.forEach(function(eachOptimisticUpdater) {
                eachOptimisticUpdater(store, data);
            });
        },
        updater: function updater(store, data) {
            configUpdates.forEach(function(eachUpdater) {
                eachUpdater(store, data);
            });
        }
    };
}
function nodeDelete(config, request) {
    var deletedIDFieldName = config.deletedIDFieldName;
    var rootField = getRootField(request);
    if (!rootField) {
        return null;
    }
    return function(store, data) {
        var payload = store.getRootField(rootField);
        if (!payload) {
            return;
        }
        var deleteID = payload.getValue(deletedIDFieldName);
        var deleteIDs = Array.isArray(deleteID) ? deleteID : [
            deleteID
        ];
        deleteIDs.forEach(function(id) {
            if (id && typeof id === 'string') {
                store["delete"](id);
            }
        });
    };
}
function rangeAdd(config, request) {
    var parentID = config.parentID, connectionInfo = config.connectionInfo, edgeName = config.edgeName;
    if (!parentID) {
        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayDeclarativeMutationConfig: For mutation config RANGE_ADD ' + 'to work you must include a parentID') : ("TURBOPACK unreachable", undefined);
        return null;
    }
    var rootField = getRootField(request);
    if (!connectionInfo || !rootField) {
        return null;
    }
    return function(store, data) {
        var parent = store.get(parentID);
        if (!parent) {
            return;
        }
        var payload = store.getRootField(rootField);
        if (!payload) {
            return;
        }
        var serverEdge = payload.getLinkedRecord(edgeName);
        var _iterator = (0, _createForOfIteratorHelper2["default"])(connectionInfo), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var info = _step.value;
                if (!serverEdge) {
                    continue;
                }
                var connection = ConnectionHandler.getConnection(parent, info.key, info.filters);
                if (!connection) {
                    continue;
                }
                var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);
                if (!clientEdge) {
                    continue;
                }
                switch(info.rangeBehavior){
                    case 'append':
                        ConnectionHandler.insertEdgeAfter(connection, clientEdge);
                        break;
                    case 'prepend':
                        ConnectionHandler.insertEdgeBefore(connection, clientEdge);
                        break;
                    default:
                        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayDeclarativeMutationConfig: RANGE_ADD range behavior `%s` ' + 'will not work as expected in RelayModern, supported range ' + "behaviors are 'append', 'prepend'.", info.rangeBehavior) : ("TURBOPACK unreachable", undefined);
                        break;
                }
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
    };
}
function rangeDelete(config, request) {
    var parentID = config.parentID, connectionKeys = config.connectionKeys, pathToConnection = config.pathToConnection, deletedIDFieldName = config.deletedIDFieldName;
    if (!parentID) {
        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayDeclarativeMutationConfig: For mutation config RANGE_DELETE ' + 'to work you must include a parentID') : ("TURBOPACK unreachable", undefined);
        return null;
    }
    var rootField = getRootField(request);
    if (!rootField) {
        return null;
    }
    return function(store, data) {
        if (!data) {
            return;
        }
        var deleteIDs = [];
        var deletedIDField = data[rootField];
        if (deletedIDField && Array.isArray(deletedIDFieldName)) {
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(deletedIDFieldName), _step2;
            try {
                for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                    var eachField = _step2.value;
                    if (deletedIDField && typeof deletedIDField === 'object') {
                        deletedIDField = deletedIDField[eachField];
                    }
                }
            } catch (err) {
                _iterator2.e(err);
            } finally{
                _iterator2.f();
            }
            if (Array.isArray(deletedIDField)) {
                deletedIDField.forEach(function(idObject) {
                    if (idObject && idObject.id && typeof idObject === 'object' && typeof idObject.id === 'string') {
                        deleteIDs.push(idObject.id);
                    }
                });
            } else if (deletedIDField && deletedIDField.id && typeof deletedIDField.id === 'string') {
                deleteIDs.push(deletedIDField.id);
            }
        } else if (deletedIDField && typeof deletedIDFieldName === 'string' && typeof deletedIDField === 'object') {
            deletedIDField = deletedIDField[deletedIDFieldName];
            if (typeof deletedIDField === 'string') {
                deleteIDs.push(deletedIDField);
            } else if (Array.isArray(deletedIDField)) {
                deletedIDField.forEach(function(id) {
                    if (typeof id === 'string') {
                        deleteIDs.push(id);
                    }
                });
            }
        }
        deleteNode(parentID, connectionKeys, pathToConnection, store, deleteIDs);
    };
}
function deleteNode(parentID, connectionKeys, pathToConnection, store, deleteIDs) {
    ("TURBOPACK compile-time truthy", 1) ? warning(connectionKeys != null, 'RelayDeclarativeMutationConfig: RANGE_DELETE must provide a ' + 'connectionKeys') : ("TURBOPACK unreachable", undefined);
    var parent = store.get(parentID);
    if (!parent) {
        return;
    }
    if (pathToConnection.length < 2) {
        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayDeclarativeMutationConfig: RANGE_DELETE ' + 'pathToConnection must include at least parent and connection') : ("TURBOPACK unreachable", undefined);
        return;
    }
    var recordProxy = parent;
    for(var i = 1; i < pathToConnection.length - 1; i++){
        if (recordProxy) {
            recordProxy = recordProxy.getLinkedRecord(pathToConnection[i]);
        }
    }
    if (!connectionKeys || !recordProxy) {
        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayDeclarativeMutationConfig: RANGE_DELETE ' + 'pathToConnection is incorrect. Unable to find connection with ' + 'parentID: %s and path: %s', parentID, pathToConnection.toString()) : ("TURBOPACK unreachable", undefined);
        return;
    }
    var _iterator3 = (0, _createForOfIteratorHelper2["default"])(connectionKeys), _step3;
    try {
        var _loop = function _loop() {
            var key = _step3.value;
            var connection = ConnectionHandler.getConnection(recordProxy, key.key, key.filters);
            if (connection) {
                deleteIDs.forEach(function(deleteID) {
                    ConnectionHandler.deleteNode(connection, deleteID);
                });
            }
        };
        for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
            _loop();
        }
    } catch (err) {
        _iterator3.e(err);
    } finally{
        _iterator3.f();
    }
}
function getRootField(request) {
    if (request.fragment.selections && request.fragment.selections.length > 0 && request.fragment.selections[0].kind === 'LinkedField') {
        return request.fragment.selections[0].name;
    }
    return null;
}
module.exports = {
    MutationTypes: MutationTypes,
    RangeOperations: RangeOperations,
    convert: convert
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/applyOptimisticMutation.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)"), getRequest = _require.getRequest;
var isRelayModernEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js [app-ssr] (ecmascript)"), createOperationDescriptor = _require2.createOperationDescriptor;
var RelayDeclarativeMutationConfig = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function applyOptimisticMutation(environment, config) {
    !isRelayModernEnvironment(environment) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'commitMutation: expected `environment` to be an instance of ' + '`RelayModernEnvironment`.') : ("TURBOPACK unreachable", undefined) : void 0;
    var mutation = getRequest(config.mutation);
    if (mutation.params.operationKind !== 'mutation') {
        throw new Error('commitMutation: Expected mutation operation');
    }
    var optimisticUpdater = config.optimisticUpdater;
    var configs = config.configs, optimisticResponse = config.optimisticResponse, variables = config.variables;
    var operation = createOperationDescriptor(mutation, variables);
    if (configs) {
        var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater);
        optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;
    }
    return environment.applyMutation({
        operation: operation,
        response: optimisticResponse,
        updater: optimisticUpdater
    });
}
module.exports = applyOptimisticMutation;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/commitLocalUpdate.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function commitLocalUpdate(environment, updater) {
    environment.commitUpdate(updater);
}
module.exports = commitLocalUpdate;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/validateMutation.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)"), ACTOR_CHANGE = _require.ACTOR_CHANGE, CLIENT_COMPONENT = _require.CLIENT_COMPONENT, CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT, CLIENT_EXTENSION = _require.CLIENT_EXTENSION, CONDITION = _require.CONDITION, DEFER = _require.DEFER, FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD, INLINE_FRAGMENT = _require.INLINE_FRAGMENT, LINKED_FIELD = _require.LINKED_FIELD, LINKED_HANDLE = _require.LINKED_HANDLE, MODULE_IMPORT = _require.MODULE_IMPORT, RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER, RELAY_RESOLVER = _require.RELAY_RESOLVER, SCALAR_FIELD = _require.SCALAR_FIELD, SCALAR_HANDLE = _require.SCALAR_HANDLE, STREAM = _require.STREAM, TYPE_DISCRIMINATOR = _require.TYPE_DISCRIMINATOR;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var hasOwnProperty = Object.prototype.hasOwnProperty;
var validateMutation = function validateMutation() {};
if ("TURBOPACK compile-time truthy", 1) {
    var addFieldToDiff = function addFieldToDiff(path, diff, isScalar) {
        var deepLoc = diff;
        path.split('.').forEach(function(key, index, arr) {
            if (deepLoc[key] == null) {
                deepLoc[key] = {};
            }
            if (isScalar && index === arr.length - 1) {
                deepLoc[key] = '<scalar>';
            }
            deepLoc = deepLoc[key];
        });
    };
    validateMutation = function validateMutation(optimisticResponse, mutation, variables) {
        var operationName = mutation.operation.name;
        var context = {
            path: 'ROOT',
            visitedPaths: new Set(),
            variables: variables || {},
            missingDiff: {},
            extraDiff: {},
            moduleImportPaths: new Set()
        };
        validateSelections(optimisticResponse, mutation.operation.selections, context);
        validateOptimisticResponse(optimisticResponse, context);
        ("TURBOPACK compile-time truthy", 1) ? warning(context.missingDiff.ROOT == null, 'Expected `optimisticResponse` to match structure of server response for mutation `%s`, please define fields for all of\n%s', operationName, JSON.stringify(context.missingDiff.ROOT, null, 2)) : ("TURBOPACK unreachable", undefined);
        ("TURBOPACK compile-time truthy", 1) ? warning(context.extraDiff.ROOT == null, 'Expected `optimisticResponse` to match structure of server response for mutation `%s`, please remove all fields of\n%s', operationName, JSON.stringify(context.extraDiff.ROOT, null, 2)) : ("TURBOPACK unreachable", undefined);
    };
    var validateSelections = function validateSelections(optimisticResponse, selections, context) {
        selections.forEach(function(selection) {
            return validateSelection(optimisticResponse, selection, context);
        });
    };
    var validateSelection = function validateSelection(optimisticResponse, selection, context) {
        switch(selection.kind){
            case CONDITION:
                validateSelections(optimisticResponse, selection.selections, context);
                return;
            case CLIENT_COMPONENT:
            case FRAGMENT_SPREAD:
                validateSelections(optimisticResponse, selection.fragment.selections, context);
                return;
            case SCALAR_FIELD:
            case LINKED_FIELD:
                return validateField(optimisticResponse, selection, context);
            case ACTOR_CHANGE:
                return validateField(optimisticResponse, selection.linkedField, context);
            case INLINE_FRAGMENT:
                var type = selection.type;
                var isConcreteType = selection.abstractKey == null;
                validateAbstractKey(context, selection.abstractKey);
                selection.selections.forEach(function(subselection) {
                    if (isConcreteType && optimisticResponse.__typename !== type) {
                        return;
                    }
                    validateSelection(optimisticResponse, subselection, context);
                });
                return;
            case CLIENT_EXTENSION:
                selection.selections.forEach(function(subselection) {
                    validateSelection(optimisticResponse, subselection, context);
                });
                return;
            case MODULE_IMPORT:
                return validateModuleImport(context);
            case TYPE_DISCRIMINATOR:
                return validateAbstractKey(context, selection.abstractKey);
            case RELAY_RESOLVER:
            case RELAY_LIVE_RESOLVER:
            case CLIENT_EDGE_TO_CLIENT_OBJECT:
            case LINKED_HANDLE:
            case SCALAR_HANDLE:
            case DEFER:
            case STREAM:
                {
                    return;
                }
            default:
                selection;
                return;
        }
    };
    var validateModuleImport = function validateModuleImport(context) {
        context.moduleImportPaths.add(context.path);
    };
    var validateAbstractKey = function validateAbstractKey(context, abstractKey) {
        if (abstractKey != null) {
            var path = "".concat(context.path, ".").concat(abstractKey);
            context.visitedPaths.add(path);
        }
    };
    var validateField = function validateField(optimisticResponse, field, context) {
        var fieldName = field.alias || field.name;
        var path = "".concat(context.path, ".").concat(fieldName);
        context.visitedPaths.add(path);
        switch(field.kind){
            case SCALAR_FIELD:
                if (hasOwnProperty.call(optimisticResponse, fieldName) === false) {
                    addFieldToDiff(path, context.missingDiff, true);
                }
                return;
            case LINKED_FIELD:
                var selections = field.selections;
                if (optimisticResponse[fieldName] === null || hasOwnProperty.call(optimisticResponse, fieldName) && optimisticResponse[fieldName] === undefined) {
                    return;
                }
                if (field.plural) {
                    if (Array.isArray(optimisticResponse[fieldName])) {
                        optimisticResponse[fieldName].forEach(function(r) {
                            if (r !== null) {
                                validateSelections(r, selections, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, context), {}, {
                                    path: path
                                }));
                            }
                        });
                        return;
                    } else {
                        addFieldToDiff(path, context.missingDiff);
                        return;
                    }
                } else {
                    if (optimisticResponse[fieldName] instanceof Object) {
                        validateSelections(optimisticResponse[fieldName], selections, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, context), {}, {
                            path: path
                        }));
                        return;
                    } else {
                        addFieldToDiff(path, context.missingDiff);
                        return;
                    }
                }
        }
    };
    var validateOptimisticResponse = function validateOptimisticResponse(optimisticResponse, context) {
        if (Array.isArray(optimisticResponse)) {
            optimisticResponse.forEach(function(r) {
                if (r instanceof Object) {
                    validateOptimisticResponse(r, context);
                }
            });
            return;
        }
        Object.keys(optimisticResponse).forEach(function(key) {
            var value = optimisticResponse[key];
            var path = "".concat(context.path, ".").concat(key);
            if (context.moduleImportPaths.has(path)) {
                return;
            }
            if (!context.visitedPaths.has(path)) {
                addFieldToDiff(path, context.extraDiff);
                return;
            }
            if (value instanceof Object) {
                validateOptimisticResponse(value, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, context), {}, {
                    path: path
                }));
            }
        });
    };
}
module.exports = validateMutation;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/commitMutation.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _toConsumableArray2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toConsumableArray.js [app-ssr] (ecmascript)"));
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)"), getRequest = _require.getRequest;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)"), generateUniqueClientID = _require2.generateUniqueClientID;
var isRelayModernEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js [app-ssr] (ecmascript)");
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js [app-ssr] (ecmascript)"), createOperationDescriptor = _require3.createOperationDescriptor;
var RelayDeclarativeMutationConfig = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js [app-ssr] (ecmascript)");
var validateMutation = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/validateMutation.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function commitMutation(environment, config) {
    !isRelayModernEnvironment(environment) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'commitMutation: expected `environment` to be an instance of ' + '`RelayModernEnvironment`.') : ("TURBOPACK unreachable", undefined) : void 0;
    var mutation = getRequest(config.mutation);
    if (mutation.params.operationKind !== 'mutation') {
        throw new Error('commitMutation: Expected mutation operation');
    }
    if (mutation.kind !== 'Request') {
        throw new Error('commitMutation: Expected mutation to be of type request');
    }
    var optimisticResponse = config.optimisticResponse, optimisticUpdater = config.optimisticUpdater, updater = config.updater;
    var configs = config.configs, cacheConfig = config.cacheConfig, onError = config.onError, onUnsubscribe = config.onUnsubscribe, variables = config.variables, uploadables = config.uploadables;
    var operation = createOperationDescriptor(mutation, variables, cacheConfig, generateUniqueClientID());
    if (typeof optimisticResponse === 'function') {
        optimisticResponse = optimisticResponse();
        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'commitMutation: Expected `optimisticResponse` to be an object, ' + 'received a function.') : ("TURBOPACK unreachable", undefined);
    }
    if ("TURBOPACK compile-time truthy", 1) {
        if (optimisticResponse instanceof Object) {
            validateMutation(optimisticResponse, mutation, variables);
        }
    }
    if (configs) {
        var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater, updater);
        optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;
        updater = _RelayDeclarativeMuta.updater;
    }
    var errors = [];
    var subscription = environment.executeMutation({
        operation: operation,
        optimisticResponse: optimisticResponse,
        optimisticUpdater: optimisticUpdater,
        updater: updater,
        uploadables: uploadables
    }).subscribe({
        next: function next(payload) {
            var _config$onNext;
            if (Array.isArray(payload)) {
                payload.forEach(function(item) {
                    if (item.errors) {
                        errors.push.apply(errors, (0, _toConsumableArray2["default"])(item.errors));
                    }
                });
            } else {
                if (payload.errors) {
                    errors.push.apply(errors, (0, _toConsumableArray2["default"])(payload.errors));
                }
            }
            (_config$onNext = config.onNext) === null || _config$onNext === void 0 ? void 0 : _config$onNext.call(config);
        },
        complete: function complete() {
            var onCompleted = config.onCompleted;
            if (onCompleted) {
                var snapshot = environment.lookup(operation.fragment);
                onCompleted(snapshot.data, errors.length !== 0 ? errors : null);
            }
        },
        error: onError,
        unsubscribe: onUnsubscribe
    });
    return {
        dispose: subscription.unsubscribe
    };
}
module.exports = commitMutation;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/withProvidedVariables.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var WEAKMAP_SUPPORTED = typeof WeakMap === 'function';
var debugCache = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();
function withProvidedVariables(userSuppliedVariables, providedVariables) {
    if (providedVariables != null) {
        var operationVariables = {};
        Object.assign(operationVariables, userSuppliedVariables);
        Object.keys(providedVariables).forEach(function(varName) {
            var providerFunction = providedVariables[varName].get;
            var providerResult = providerFunction();
            if (!debugCache.has(providerFunction)) {
                debugCache.set(providerFunction, providerResult);
                operationVariables[varName] = providerResult;
            } else {
                var cachedResult = debugCache.get(providerFunction);
                if ("TURBOPACK compile-time truthy", 1) {
                    ("TURBOPACK compile-time truthy", 1) ? warning(areEqual(providerResult, cachedResult), 'Relay: Expected function `%s` for provider `%s` to be a pure function, ' + 'but got conflicting return values `%s` and `%s`', providerFunction.name, varName, providerResult, cachedResult) : ("TURBOPACK unreachable", undefined);
                }
                operationVariables[varName] = cachedResult;
            }
        });
        return operationVariables;
    } else {
        return userSuppliedVariables;
    }
}
withProvidedVariables.tests_only_resetDebugCache = ("TURBOPACK compile-time truthy", 1) ? function() {
    debugCache = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();
} : ("TURBOPACK unreachable", undefined);
module.exports = withProvidedVariables;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/isPromise.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function isPromise(p) {
    return !!p && typeof p.then === 'function';
}
module.exports = isPromise;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayObservable.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var isPromise = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/isPromise.js [app-ssr] (ecmascript)");
var hostReportError = swallowError;
var RelayObservable = /*#__PURE__*/ function() {
    RelayObservable.create = function create(source) {
        return new RelayObservable(source);
    };
    function RelayObservable(source) {
        if ("TURBOPACK compile-time truthy", 1) {
            if (!source || typeof source !== 'function') {
                throw new Error('Source must be a Function: ' + String(source));
            }
        }
        this._source = source;
    }
    RelayObservable.onUnhandledError = function onUnhandledError(callback) {
        hostReportError = callback;
    };
    RelayObservable.from = function from(obj) {
        return isObservable(obj) ? fromObservable(obj) : isPromise(obj) ? fromPromise(obj) : fromValue(obj);
    };
    var _proto = RelayObservable.prototype;
    _proto["catch"] = function _catch(fn) {
        var _this = this;
        return RelayObservable.create(function(sink) {
            var subscription;
            _this.subscribe({
                start: function start(sub) {
                    subscription = sub;
                },
                next: sink.next,
                complete: sink.complete,
                error: function error(_error2) {
                    try {
                        fn(_error2).subscribe({
                            start: function start(sub) {
                                subscription = sub;
                            },
                            next: sink.next,
                            complete: sink.complete,
                            error: sink.error
                        });
                    } catch (error2) {
                        sink.error(error2, true);
                    }
                }
            });
            return function() {
                return subscription.unsubscribe();
            };
        });
    };
    _proto.concat = function concat(next) {
        var _this2 = this;
        return RelayObservable.create(function(sink) {
            var current;
            _this2.subscribe({
                start: function start(subscription) {
                    current = subscription;
                },
                next: sink.next,
                error: sink.error,
                complete: function complete() {
                    current = next.subscribe(sink);
                }
            });
            return function() {
                current && current.unsubscribe();
            };
        });
    };
    _proto["do"] = function _do(observer) {
        var _this3 = this;
        return RelayObservable.create(function(sink) {
            var both = function both(action) {
                return function() {
                    try {
                        observer[action] && observer[action].apply(observer, arguments);
                    } catch (error) {
                        hostReportError(error, true);
                    }
                    sink[action] && sink[action].apply(sink, arguments);
                };
            };
            return _this3.subscribe({
                start: both('start'),
                next: both('next'),
                error: both('error'),
                complete: both('complete'),
                unsubscribe: both('unsubscribe')
            });
        });
    };
    _proto["finally"] = function _finally(fn) {
        var _this4 = this;
        return RelayObservable.create(function(sink) {
            var subscription = _this4.subscribe(sink);
            return function() {
                subscription.unsubscribe();
                fn();
            };
        });
    };
    _proto.ifEmpty = function ifEmpty(alternate) {
        var _this5 = this;
        return RelayObservable.create(function(sink) {
            var hasValue = false;
            var current;
            current = _this5.subscribe({
                next: function next(value) {
                    hasValue = true;
                    sink.next(value);
                },
                error: sink.error,
                complete: function complete() {
                    if (hasValue) {
                        sink.complete();
                    } else {
                        current = alternate.subscribe(sink);
                    }
                }
            });
            return function() {
                current && current.unsubscribe();
            };
        });
    };
    _proto.subscribe = function subscribe(observer) {
        if ("TURBOPACK compile-time truthy", 1) {
            if (!observer || typeof observer !== 'object') {
                throw new Error('Observer must be an Object with callbacks: ' + String(observer));
            }
        }
        return _subscribe(this._source, observer);
    };
    _proto.map = function map(fn) {
        var _this6 = this;
        return RelayObservable.create(function(sink) {
            var subscription = _this6.subscribe({
                complete: sink.complete,
                error: sink.error,
                next: function next(value) {
                    try {
                        var mapValue = fn(value);
                        sink.next(mapValue);
                    } catch (error) {
                        sink.error(error, true);
                    }
                }
            });
            return function() {
                subscription.unsubscribe();
            };
        });
    };
    _proto.mergeMap = function mergeMap(fn) {
        var _this7 = this;
        return RelayObservable.create(function(sink) {
            var subscriptions = [];
            function start(subscription) {
                this._sub = subscription;
                subscriptions.push(subscription);
            }
            function complete() {
                subscriptions.splice(subscriptions.indexOf(this._sub), 1);
                if (subscriptions.length === 0) {
                    sink.complete();
                }
            }
            _this7.subscribe({
                start: start,
                next: function next(value) {
                    try {
                        if (!sink.closed) {
                            RelayObservable.from(fn(value)).subscribe({
                                start: start,
                                next: sink.next,
                                error: sink.error,
                                complete: complete
                            });
                        }
                    } catch (error) {
                        sink.error(error, true);
                    }
                },
                error: sink.error,
                complete: complete
            });
            return function() {
                subscriptions.forEach(function(sub) {
                    return sub.unsubscribe();
                });
                subscriptions.length = 0;
            };
        });
    };
    _proto.poll = function poll(pollInterval) {
        var _this8 = this;
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof pollInterval !== 'number' || pollInterval <= 0) {
                throw new Error('RelayObservable: Expected pollInterval to be positive, got: ' + pollInterval);
            }
        }
        return RelayObservable.create(function(sink) {
            var subscription;
            var timeout;
            var poll = function poll() {
                subscription = _this8.subscribe({
                    next: sink.next,
                    error: sink.error,
                    complete: function complete() {
                        timeout = setTimeout(poll, pollInterval);
                    }
                });
            };
            poll();
            return function() {
                clearTimeout(timeout);
                subscription.unsubscribe();
            };
        });
    };
    _proto.toPromise = function toPromise() {
        var _this9 = this;
        return new Promise(function(resolve, reject) {
            var resolved = false;
            _this9.subscribe({
                next: function next(val) {
                    if (!resolved) {
                        resolved = true;
                        resolve(val);
                    }
                },
                error: reject,
                complete: resolve
            });
        });
    };
    return RelayObservable;
}();
function isObservable(obj) {
    return typeof obj === 'object' && obj !== null && typeof obj.subscribe === 'function';
}
function fromObservable(obj) {
    return obj instanceof RelayObservable ? obj : RelayObservable.create(function(sink) {
        return obj.subscribe(sink);
    });
}
function fromPromise(promise) {
    return RelayObservable.create(function(sink) {
        promise.then(function(value) {
            sink.next(value);
            sink.complete();
        }, sink.error);
    });
}
function fromValue(value) {
    return RelayObservable.create(function(sink) {
        sink.next(value);
        sink.complete();
    });
}
function _subscribe(source, observer) {
    var closed = false;
    var cleanup;
    var withClosed = function withClosed(obj) {
        return Object.defineProperty(obj, 'closed', {
            get: function get() {
                return closed;
            }
        });
    };
    function doCleanup() {
        if (cleanup) {
            if (cleanup.unsubscribe) {
                cleanup.unsubscribe();
            } else {
                try {
                    cleanup();
                } catch (error) {
                    hostReportError(error, true);
                }
            }
            cleanup = undefined;
        }
    }
    var subscription = withClosed({
        unsubscribe: function unsubscribe() {
            if (!closed) {
                closed = true;
                try {
                    observer.unsubscribe && observer.unsubscribe(subscription);
                } catch (error) {
                    hostReportError(error, true);
                } finally{
                    doCleanup();
                }
            }
        }
    });
    try {
        observer.start && observer.start(subscription);
    } catch (error) {
        hostReportError(error, true);
    }
    if (closed) {
        return subscription;
    }
    var sink = withClosed({
        next: function next(value) {
            if (!closed && observer.next) {
                try {
                    observer.next(value);
                } catch (error) {
                    hostReportError(error, true);
                }
            }
        },
        error: function error(_error3, isUncaughtThrownError) {
            if (closed || !observer.error) {
                closed = true;
                hostReportError(_error3, isUncaughtThrownError || false);
                doCleanup();
            } else {
                closed = true;
                try {
                    observer.error(_error3);
                } catch (error2) {
                    hostReportError(error2, true);
                } finally{
                    doCleanup();
                }
            }
        },
        complete: function complete() {
            if (!closed) {
                closed = true;
                try {
                    observer.complete && observer.complete();
                } catch (error) {
                    hostReportError(error, true);
                } finally{
                    doCleanup();
                }
            }
        }
    });
    try {
        cleanup = source(sink);
    } catch (error) {
        sink.error(error, true);
    }
    if ("TURBOPACK compile-time truthy", 1) {
        if (cleanup !== undefined && typeof cleanup !== 'function' && (!cleanup || typeof cleanup.unsubscribe !== 'function')) {
            throw new Error('Returned cleanup function which cannot be called: ' + String(cleanup));
        }
    }
    if (closed) {
        doCleanup();
    }
    return subscription;
}
function swallowError(_error, _isUncaughtThrownError) {}
if ("TURBOPACK compile-time truthy", 1) {
    RelayObservable.onUnhandledError(function(error, isUncaughtThrownError) {
        if (typeof fail === 'function') {
            fail(String(error));
        } else if (isUncaughtThrownError) {
            setTimeout(function() {
                throw error;
            });
        } else if (typeof console !== 'undefined') {
            console.error('RelayObservable: Unhandled Error', error);
        }
    });
}
module.exports = RelayObservable;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/ConvertToExecuteFunction.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayObservable = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayObservable.js [app-ssr] (ecmascript)");
function convertFetch(fn) {
    return function fetch(request, variables, cacheConfig, uploadables, logRequestInfo) {
        var result = fn(request, variables, cacheConfig, uploadables, logRequestInfo);
        if (result instanceof Error) {
            return RelayObservable.create(function(sink) {
                return sink.error(result);
            });
        }
        return RelayObservable.from(result);
    };
}
module.exports = {
    convertFetch: convertFetch
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayNetwork.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var withProvidedVariables = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/withProvidedVariables.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/ConvertToExecuteFunction.js [app-ssr] (ecmascript)"), convertFetch = _require.convertFetch;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function create(fetchFn, subscribe) {
    var observeFetch = convertFetch(fetchFn);
    function execute(request, variables, cacheConfig, uploadables, logRequestInfo) {
        var operationVariables = withProvidedVariables(variables, request.providedVariables);
        if (request.operationKind === 'subscription') {
            !subscribe ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayNetwork: This network layer does not support Subscriptions. ' + 'To use Subscriptions, provide a custom network layer.') : ("TURBOPACK unreachable", undefined) : void 0;
            !!uploadables ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayNetwork: Cannot provide uploadables while subscribing.') : ("TURBOPACK unreachable", undefined) : void 0;
            return subscribe(request, operationVariables, cacheConfig);
        }
        var pollInterval = cacheConfig.poll;
        if (pollInterval != null) {
            !!uploadables ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayNetwork: Cannot provide uploadables while polling.') : ("TURBOPACK unreachable", undefined) : void 0;
            return observeFetch(request, operationVariables, {
                force: true
            }).poll(pollInterval);
        }
        return observeFetch(request, operationVariables, cacheConfig, uploadables, logRequestInfo);
    }
    return {
        execute: execute
    };
}
module.exports = {
    create: create
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayQueryResponseCache.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var stableCopy = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/stableCopy.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var RelayQueryResponseCache = /*#__PURE__*/ function() {
    function RelayQueryResponseCache(_ref) {
        var size = _ref.size, ttl = _ref.ttl;
        !(size > 0) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayQueryResponseCache: Expected the max cache size to be > 0, got ' + '`%s`.', size) : ("TURBOPACK unreachable", undefined) : void 0;
        !(ttl > 0) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayQueryResponseCache: Expected the max ttl to be > 0, got `%s`.', ttl) : ("TURBOPACK unreachable", undefined) : void 0;
        this._responses = new Map();
        this._size = size;
        this._ttl = ttl;
    }
    var _proto = RelayQueryResponseCache.prototype;
    _proto.clear = function clear() {
        this._responses.clear();
    };
    _proto.get = function get(queryID, variables) {
        var _this = this;
        var cacheKey = getCacheKey(queryID, variables);
        this._responses.forEach(function(response, key) {
            if (!isCurrent(response.fetchTime, _this._ttl)) {
                _this._responses["delete"](key);
            }
        });
        var response = this._responses.get(cacheKey);
        if (response == null) {
            return null;
        }
        if (Array.isArray(response.payload)) {
            return response.payload.map(function(payload) {
                return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, payload), {}, {
                    extensions: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, payload.extensions), {}, {
                        cacheTimestamp: response.fetchTime
                    })
                });
            });
        }
        return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, response.payload), {}, {
            extensions: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, response.payload.extensions), {}, {
                cacheTimestamp: response.fetchTime
            })
        });
    };
    _proto.set = function set(queryID, variables, payload) {
        var fetchTime = Date.now();
        var cacheKey = getCacheKey(queryID, variables);
        this._responses["delete"](cacheKey);
        this._responses.set(cacheKey, {
            fetchTime: fetchTime,
            payload: payload
        });
        if (this._responses.size > this._size) {
            var firstKey = this._responses.keys().next();
            if (!firstKey.done) {
                this._responses["delete"](firstKey.value);
            }
        }
    };
    return RelayQueryResponseCache;
}();
function getCacheKey(queryID, variables) {
    return JSON.stringify(stableCopy({
        queryID: queryID,
        variables: variables
    }));
}
function isCurrent(fetchTime, ttl) {
    return fetchTime + ttl >= Date.now();
}
module.exports = RelayQueryResponseCache;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/setPrototypeOf.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _setPrototypeOf(o, p);
}
module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/inheritsLoose.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var setPrototypeOf = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/setPrototypeOf.js [app-ssr] (ecmascript)");
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
}
module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/getPrototypeOf.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _getPrototypeOf(o) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _getPrototypeOf(o);
}
module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/isNativeFunction.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _isNativeFunction(fn) {
    try {
        return Function.toString.call(fn).indexOf("[native code]") !== -1;
    } catch (e) {
        return typeof fn === "function";
    }
}
module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _isNativeReflectConstruct() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (t) {}
    return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {
        return !!t;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
}
module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/construct.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var setPrototypeOf = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/setPrototypeOf.js [app-ssr] (ecmascript)");
var isNativeReflectConstruct = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js [app-ssr] (ecmascript)");
function _construct(t, e, r) {
    if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
    var o = [
        null
    ];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return r && setPrototypeOf(p, r.prototype), p;
}
module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/wrapNativeSuper.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

var getPrototypeOf = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/getPrototypeOf.js [app-ssr] (ecmascript)");
var setPrototypeOf = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/setPrototypeOf.js [app-ssr] (ecmascript)");
var isNativeFunction = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/isNativeFunction.js [app-ssr] (ecmascript)");
var construct = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/construct.js [app-ssr] (ecmascript)");
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return construct(Class, arguments, getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return setPrototypeOf(Wrapper, Class);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _wrapNativeSuper(Class);
}
module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayErrorTrie.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js [app-ssr] (ecmascript)"));
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var _inheritsLoose2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/inheritsLoose.js [app-ssr] (ecmascript)"));
var _wrapNativeSuper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/wrapNativeSuper.js [app-ssr] (ecmascript)"));
var _toConsumableArray2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toConsumableArray.js [app-ssr] (ecmascript)"));
var _excluded = [
    "path",
    "locations"
];
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var SELF = Symbol('$SELF');
var RelayFieldError = /*#__PURE__*/ function(_Error) {
    (0, _inheritsLoose2["default"])(RelayFieldError, _Error);
    function RelayFieldError(message) {
        var _this;
        var errors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        _this = _Error.call(this, message) || this;
        _this.name = 'RelayFieldError';
        _this.message = message;
        _this.errors = errors;
        return _this;
    }
    return RelayFieldError;
}(/*#__PURE__*/ (0, _wrapNativeSuper2["default"])(Error));
function buildErrorTrie(errors) {
    if (errors == null) {
        return null;
    }
    if (!RelayFeatureFlags.ENABLE_FIELD_ERROR_HANDLING) {
        return null;
    }
    var trie = new Map();
    var _iterator = (0, _createForOfIteratorHelper2["default"])(errors), _step;
    try {
        ERRORS: for(_iterator.s(); !(_step = _iterator.n()).done;){
            var _step$value = _step.value, path = _step$value.path, _ = _step$value.locations, error = (0, _objectWithoutPropertiesLoose2["default"])(_step$value, _excluded);
            if (path == null) {
                continue;
            }
            var length = path.length;
            if (length === 0) {
                continue;
            }
            var lastIndex = length - 1;
            var currentTrie = trie;
            for(var index = 0; index < lastIndex; index++){
                var key = path[index];
                var existingValue = currentTrie.get(key);
                if (existingValue instanceof Map) {
                    currentTrie = existingValue;
                    continue;
                }
                var newValue = new Map();
                if (Array.isArray(existingValue)) {
                    newValue.set(SELF, existingValue);
                }
                currentTrie.set(key, newValue);
                currentTrie = newValue;
            }
            var lastKey = path[lastIndex];
            var container = currentTrie.get(lastKey);
            if (container instanceof Map) {
                currentTrie = container;
                container = currentTrie.get(lastKey);
                lastKey = SELF;
            }
            if (Array.isArray(container)) {
                container.push(error);
            } else {
                currentTrie.set(lastKey, [
                    error
                ]);
            }
        }
    } catch (err) {
        _iterator.e(err);
    } finally{
        _iterator.f();
    }
    return trie;
}
function getErrorsByKey(trie, key) {
    var value = trie.get(key);
    if (value == null) {
        return null;
    }
    if (Array.isArray(value)) {
        return value;
    }
    var errors = [];
    recursivelyCopyErrorsIntoArray(value, errors);
    return errors;
}
function recursivelyCopyErrorsIntoArray(trieOrSet, errors) {
    var _iterator2 = (0, _createForOfIteratorHelper2["default"])(trieOrSet), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var _step2$value = _step2.value, childKey = _step2$value[0], value = _step2$value[1];
            var oldLength = errors.length;
            if (Array.isArray(value)) {
                errors.push.apply(errors, (0, _toConsumableArray2["default"])(value));
            } else {
                recursivelyCopyErrorsIntoArray(value, errors);
            }
            if (childKey === SELF) {
                continue;
            }
            var newLength = errors.length;
            for(var index = oldLength; index < newLength; index++){
                var error = errors[index];
                if (error.path == null) {
                    errors[index] = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, error), {}, {
                        path: [
                            childKey
                        ]
                    });
                } else {
                    error.path.unshift(childKey);
                }
            }
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
}
function getNestedErrorTrieByKey(trie, key) {
    var value = trie.get(key);
    if (value instanceof Map) {
        return value;
    }
    return null;
}
module.exports = {
    SELF: SELF,
    buildErrorTrie: buildErrorTrie,
    getNestedErrorTrieByKey: getNestedErrorTrieByKey,
    getErrorsByKey: getErrorsByKey,
    RelayFieldError: RelayFieldError
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var _RelayErrorTrie = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayErrorTrie.js [app-ssr] (ecmascript)");
var _RelayFeatureFlags = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)"));
function handlePotentialSnapshotErrors(environment, missingRequiredFields, relayResolverErrors, errorResponseFields) {
    var _iterator = (0, _createForOfIteratorHelper2["default"])(relayResolverErrors), _step;
    try {
        for(_iterator.s(); !(_step = _iterator.n()).done;){
            var resolverError = _step.value;
            environment.relayFieldLogger({
                kind: 'relay_resolver.error',
                owner: resolverError.field.owner,
                fieldPath: resolverError.field.path,
                error: resolverError.error
            });
        }
    } catch (err) {
        _iterator.e(err);
    } finally{
        _iterator.f();
    }
    if (_RelayFeatureFlags["default"].ENABLE_FIELD_ERROR_HANDLING && errorResponseFields != null) {
        if (errorResponseFields != null) {
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(errorResponseFields), _step2;
            try {
                for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                    var fieldError = _step2.value;
                    var path = fieldError.path, owner = fieldError.owner, error = fieldError.error;
                    environment.relayFieldLogger({
                        kind: 'relay_field_payload.error',
                        owner: owner,
                        fieldPath: path,
                        error: error
                    });
                }
            } catch (err) {
                _iterator2.e(err);
            } finally{
                _iterator2.f();
            }
        }
        if (_RelayFeatureFlags["default"].ENABLE_FIELD_ERROR_HANDLING_THROW_BY_DEFAULT) {
            throw new _RelayErrorTrie.RelayFieldError("Relay: Unexpected response payload - this object includes an errors property in which you can access the underlying errors", errorResponseFields.map(function(_ref) {
                var path = _ref.path, owner = _ref.owner, error = _ref.error;
                return error;
            }));
        }
    }
    if (missingRequiredFields != null) {
        switch(missingRequiredFields.action){
            case 'THROW':
                {
                    var _missingRequiredField = missingRequiredFields.field, _path = _missingRequiredField.path, _owner = _missingRequiredField.owner;
                    environment.relayFieldLogger({
                        kind: 'missing_field.throw',
                        owner: _owner,
                        fieldPath: _path
                    });
                    throw new Error("Relay: Missing @required value at path '".concat(_path, "' in '").concat(_owner, "'."));
                }
            case 'LOG':
                missingRequiredFields.fields.forEach(function(_ref2) {
                    var path = _ref2.path, owner = _ref2.owner;
                    environment.relayFieldLogger({
                        kind: 'missing_field.log',
                        owner: owner,
                        fieldPath: path
                    });
                });
                break;
            default:
                {
                    missingRequiredFields.action;
                }
        }
    }
}
module.exports = handlePotentialSnapshotErrors;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayReplaySubject.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var RelayObservable = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayObservable.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var RelayReplaySubject = /*#__PURE__*/ function() {
    function RelayReplaySubject() {
        var _this = this;
        (0, _defineProperty2["default"])(this, "_complete", false);
        (0, _defineProperty2["default"])(this, "_events", []);
        (0, _defineProperty2["default"])(this, "_sinks", new Set());
        (0, _defineProperty2["default"])(this, "_subscription", []);
        this._observable = RelayObservable.create(function(sink) {
            _this._sinks.add(sink);
            var events = _this._events;
            for(var i = 0; i < events.length; i++){
                if (sink.closed) {
                    break;
                }
                var event = events[i];
                switch(event.kind){
                    case 'complete':
                        sink.complete();
                        break;
                    case 'error':
                        sink.error(event.error);
                        break;
                    case 'next':
                        sink.next(event.data);
                        break;
                    default:
                        event.kind;
                        ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReplaySubject: Unknown event kind `%s`.', event.kind) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
                }
            }
            return function() {
                _this._sinks["delete"](sink);
            };
        });
    }
    var _proto = RelayReplaySubject.prototype;
    _proto.complete = function complete() {
        if (this._complete === true) {
            return;
        }
        this._complete = true;
        this._events.push({
            kind: 'complete'
        });
        this._sinks.forEach(function(sink) {
            return sink.complete();
        });
    };
    _proto.error = function error(_error) {
        if (this._complete === true) {
            return;
        }
        this._complete = true;
        this._events.push({
            kind: 'error',
            error: _error
        });
        this._sinks.forEach(function(sink) {
            return sink.error(_error);
        });
    };
    _proto.next = function next(data) {
        if (this._complete === true) {
            return;
        }
        this._events.push({
            kind: 'next',
            data: data
        });
        this._sinks.forEach(function(sink) {
            return sink.next(data);
        });
    };
    _proto.subscribe = function subscribe(observer) {
        var subscription = this._observable.subscribe(observer);
        this._subscription.push(subscription);
        return subscription;
    };
    _proto.unsubscribe = function unsubscribe() {
        var _iterator = (0, _createForOfIteratorHelper2["default"])(this._subscription), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var subscription = _step.value;
                subscription.unsubscribe();
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        this._subscription = [];
    };
    _proto.getObserverCount = function getObserverCount() {
        return this._sinks.size;
    };
    return RelayReplaySubject;
}();
module.exports = RelayReplaySubject;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/fetchQueryInternal.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var Observable = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayObservable.js [app-ssr] (ecmascript)");
var RelayReplaySubject = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayReplaySubject.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var WEAKMAP_SUPPORTED = typeof WeakMap === 'function';
var requestCachesByEnvironment = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();
function fetchQuery(environment, operation) {
    return fetchQueryDeduped(environment, operation.request.identifier, function() {
        return environment.execute({
            operation: operation
        });
    });
}
function fetchQueryDeduped(environment, identifier, fetchFn) {
    return Observable.create(function(sink) {
        var requestCache = getRequestCache(environment);
        var cachedRequest = requestCache.get(identifier);
        if (!cachedRequest) {
            fetchFn()["finally"](function() {
                return requestCache["delete"](identifier);
            }).subscribe({
                start: function start(subscription) {
                    cachedRequest = {
                        identifier: identifier,
                        subject: new RelayReplaySubject(),
                        subjectForInFlightStatus: new RelayReplaySubject(),
                        subscription: subscription,
                        promise: null
                    };
                    requestCache.set(identifier, cachedRequest);
                },
                next: function next(response) {
                    var cachedReq = getCachedRequest(requestCache, identifier);
                    cachedReq.subject.next(response);
                    cachedReq.subjectForInFlightStatus.next(response);
                },
                error: function error(_error) {
                    var cachedReq = getCachedRequest(requestCache, identifier);
                    cachedReq.subject.error(_error);
                    cachedReq.subjectForInFlightStatus.error(_error);
                },
                complete: function complete() {
                    var cachedReq = getCachedRequest(requestCache, identifier);
                    cachedReq.subject.complete();
                    cachedReq.subjectForInFlightStatus.complete();
                },
                unsubscribe: function unsubscribe(subscription) {
                    var cachedReq = getCachedRequest(requestCache, identifier);
                    cachedReq.subject.unsubscribe();
                    cachedReq.subjectForInFlightStatus.unsubscribe();
                }
            });
        }
        !(cachedRequest != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, '[fetchQueryInternal] fetchQueryDeduped: Expected `start` to be ' + 'called synchronously') : ("TURBOPACK unreachable", undefined) : void 0;
        return getObservableForCachedRequest(requestCache, cachedRequest).subscribe(sink);
    });
}
function getObservableForCachedRequest(requestCache, cachedRequest) {
    return Observable.create(function(sink) {
        var subscription = cachedRequest.subject.subscribe(sink);
        return function() {
            subscription.unsubscribe();
            var cachedRequestInstance = requestCache.get(cachedRequest.identifier);
            if (cachedRequestInstance) {
                var requestSubscription = cachedRequestInstance.subscription;
                if (requestSubscription != null && cachedRequestInstance.subject.getObserverCount() === 0) {
                    requestSubscription.unsubscribe();
                    requestCache["delete"](cachedRequest.identifier);
                }
            }
        };
    });
}
function getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest) {
    return Observable.create(function(sink) {
        var subscription = cachedRequest.subjectForInFlightStatus.subscribe({
            error: sink.error,
            next: function next(response) {
                if (!environment.isRequestActive(cachedRequest.identifier)) {
                    sink.complete();
                    return;
                }
                sink.next();
            },
            complete: sink.complete,
            unsubscribe: sink.complete
        });
        return function() {
            subscription.unsubscribe();
        };
    });
}
function getPromiseForActiveRequest(environment, request) {
    var requestCache = getRequestCache(environment);
    var cachedRequest = requestCache.get(request.identifier);
    if (!cachedRequest) {
        return null;
    }
    if (!environment.isRequestActive(cachedRequest.identifier)) {
        return null;
    }
    var promise = new Promise(function(resolve, reject) {
        var resolveOnNext = false;
        getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest).subscribe({
            complete: resolve,
            error: reject,
            next: function next(response) {
                if (resolveOnNext) {
                    resolve(response);
                }
            }
        });
        resolveOnNext = true;
    });
    return promise;
}
function getObservableForActiveRequest(environment, request) {
    var requestCache = getRequestCache(environment);
    var cachedRequest = requestCache.get(request.identifier);
    if (!cachedRequest) {
        return null;
    }
    if (!environment.isRequestActive(cachedRequest.identifier)) {
        return null;
    }
    return getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest);
}
function getRequestCache(environment) {
    var cached = requestCachesByEnvironment.get(environment);
    if (cached != null) {
        return cached;
    }
    var requestCache = new Map();
    requestCachesByEnvironment.set(environment, requestCache);
    return requestCache;
}
function getCachedRequest(requestCache, identifier) {
    var cached = requestCache.get(identifier);
    !(cached != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, '[fetchQueryInternal] getCachedRequest: Expected request to be cached') : ("TURBOPACK unreachable", undefined) : void 0;
    return cached;
}
module.exports = {
    fetchQuery: fetchQuery,
    fetchQueryDeduped: fetchQueryDeduped,
    getPromiseForActiveRequest: getPromiseForActiveRequest,
    getObservableForActiveRequest: getObservableForActiveRequest
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/fetchQuery.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var RelayObservable = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayObservable.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js [app-ssr] (ecmascript)"), createOperationDescriptor = _require.createOperationDescriptor;
var handlePotentialSnapshotErrors = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js [app-ssr] (ecmascript)");
var fetchQueryInternal = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/fetchQueryInternal.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)"), getRequest = _require2.getRequest;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function fetchQuery(environment, query, variables, options) {
    var _options$fetchPolicy;
    var queryNode = getRequest(query);
    !(queryNode.params.operationKind === 'query') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'fetchQuery: Expected query operation') : ("TURBOPACK unreachable", undefined) : void 0;
    var networkCacheConfig = (0, _objectSpread2["default"])({
        force: true
    }, options === null || options === void 0 ? void 0 : options.networkCacheConfig);
    var operation = createOperationDescriptor(queryNode, variables, networkCacheConfig);
    var fetchPolicy = (_options$fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy) !== null && _options$fetchPolicy !== void 0 ? _options$fetchPolicy : 'network-only';
    function readData(snapshot) {
        handlePotentialSnapshotErrors(environment, snapshot.missingRequiredFields, snapshot.relayResolverErrors, snapshot.errorResponseFields);
        return snapshot.data;
    }
    switch(fetchPolicy){
        case 'network-only':
            {
                return getNetworkObservable(environment, operation).map(readData);
            }
        case 'store-or-network':
            {
                if (environment.check(operation).status === 'available') {
                    return RelayObservable.from(environment.lookup(operation.fragment)).map(readData);
                }
                return getNetworkObservable(environment, operation).map(readData);
            }
        default:
            fetchPolicy;
            throw new Error('fetchQuery: Invalid fetchPolicy ' + fetchPolicy);
    }
}
function getNetworkObservable(environment, operation) {
    return fetchQueryInternal.fetchQuery(environment, operation).map(function() {
        return environment.lookup(operation.fragment);
    });
}
module.exports = fetchQuery;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/fetchQuery_DEPRECATED.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js [app-ssr] (ecmascript)"), createOperationDescriptor = _require.createOperationDescriptor;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)"), getRequest = _require2.getRequest;
function fetchQuery_DEPRECATED(environment, taggedNode, variables, cacheConfig) {
    var query = getRequest(taggedNode);
    if (query.params.operationKind !== 'query') {
        throw new Error('fetchQuery: Expected query operation');
    }
    var operation = createOperationDescriptor(query, variables, cacheConfig);
    return environment.execute({
        operation: operation
    }).map(function() {
        return environment.lookup(operation.fragment).data;
    }).toPromise();
}
module.exports = fetchQuery_DEPRECATED;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/PreloadableQueryRegistry.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var PreloadableQueryRegistry = /*#__PURE__*/ function() {
    function PreloadableQueryRegistry() {
        this._preloadableQueries = new Map();
        this._callbacks = new Map();
    }
    var _proto = PreloadableQueryRegistry.prototype;
    _proto.set = function set(key, value) {
        this._preloadableQueries.set(key, value);
        var callbacks = this._callbacks.get(key);
        if (callbacks != null) {
            callbacks.forEach(function(cb) {
                try {
                    cb(value);
                } catch (e) {
                    setTimeout(function() {
                        throw e;
                    }, 0);
                }
            });
        }
    };
    _proto.get = function get(key) {
        return this._preloadableQueries.get(key);
    };
    _proto.onLoad = function onLoad(key, callback) {
        var _this$_callbacks$get;
        var callbacks = (_this$_callbacks$get = this._callbacks.get(key)) !== null && _this$_callbacks$get !== void 0 ? _this$_callbacks$get : new Set();
        callbacks.add(callback);
        var dispose = function dispose() {
            callbacks["delete"](callback);
        };
        this._callbacks.set(key, callbacks);
        return {
            dispose: dispose
        };
    };
    _proto.clear = function clear() {
        this._preloadableQueries.clear();
    };
    return PreloadableQueryRegistry;
}();
var preloadableQueryRegistry = new PreloadableQueryRegistry();
module.exports = preloadableQueryRegistry;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getPendingOperationsForFragment.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/fetchQueryInternal.js [app-ssr] (ecmascript)"), getPromiseForActiveRequest = _require.getPromiseForActiveRequest;
function getPendingOperationsForFragment(environment, fragmentNode, fragmentOwner) {
    var _pendingOperations$ma, _pendingOperations;
    var pendingOperations = [];
    var promise = getPromiseForActiveRequest(environment, fragmentOwner);
    if (promise != null) {
        pendingOperations = [
            fragmentOwner
        ];
    } else {
        var _result$pendingOperat, _result$promise;
        var result = environment.getOperationTracker().getPendingOperationsAffectingOwner(fragmentOwner);
        pendingOperations = (_result$pendingOperat = result === null || result === void 0 ? void 0 : result.pendingOperations) !== null && _result$pendingOperat !== void 0 ? _result$pendingOperat : [];
        promise = (_result$promise = result === null || result === void 0 ? void 0 : result.promise) !== null && _result$promise !== void 0 ? _result$promise : null;
    }
    if (!promise) {
        return null;
    }
    var pendingOperationName = (_pendingOperations$ma = (_pendingOperations = pendingOperations) === null || _pendingOperations === void 0 ? void 0 : _pendingOperations.map(function(op) {
        return op.node.params.name;
    }).join(',')) !== null && _pendingOperations$ma !== void 0 ? _pendingOperations$ma : null;
    if (pendingOperationName == null || pendingOperationName.length === 0) {
        pendingOperationName = 'Unknown pending operation';
    }
    var fragmentName = fragmentNode.name;
    var promiseDisplayName = pendingOperationName === fragmentName ? "Relay(".concat(pendingOperationName, ")") : "Relay(".concat(pendingOperationName, ":").concat(fragmentName, ")");
    promise.displayName = promiseDisplayName;
    environment.__log({
        name: 'pendingoperation.found',
        fragment: fragmentNode,
        fragmentOwner: fragmentOwner,
        pendingOperations: pendingOperations
    });
    return {
        promise: promise,
        pendingOperations: pendingOperations
    };
}
module.exports = getPendingOperationsForFragment;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/isScalarAndEqual.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function isScalarAndEqual(valueA, valueB) {
    return valueA === valueB && (valueA === null || typeof valueA !== 'object');
}
module.exports = isScalarAndEqual;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/recycleNodesInto.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function recycleNodesInto(prevData, nextData) {
    return recycleNodesIntoImpl(prevData, nextData, true);
}
function recycleNodesIntoImpl(prevData, nextData, canMutate) {
    if (prevData === nextData || typeof prevData !== 'object' || !prevData || prevData.constructor !== Object && !Array.isArray(prevData) || typeof nextData !== 'object' || !nextData || nextData.constructor !== Object && !Array.isArray(nextData)) {
        return nextData;
    }
    var canRecycle = false;
    var prevArray = Array.isArray(prevData) ? prevData : null;
    var nextArray = Array.isArray(nextData) ? nextData : null;
    if (prevArray && nextArray) {
        var canMutateNext = canMutate && !Object.isFrozen(nextArray);
        canRecycle = nextArray.reduce(function(wasEqual, nextItem, ii) {
            var prevValue = prevArray[ii];
            var nextValue = recycleNodesIntoImpl(prevValue, nextItem, canMutateNext);
            if (nextValue !== nextArray[ii] && canMutateNext) {
                nextArray[ii] = nextValue;
            }
            return wasEqual && nextValue === prevArray[ii];
        }, true) && prevArray.length === nextArray.length;
    } else if (!prevArray && !nextArray) {
        var prevObject = prevData;
        var nextObject = nextData;
        var prevKeys = Object.keys(prevObject);
        var nextKeys = Object.keys(nextObject);
        var _canMutateNext = canMutate && !Object.isFrozen(nextObject);
        canRecycle = nextKeys.reduce(function(wasEqual, key) {
            var prevValue = prevObject[key];
            var nextValue = recycleNodesIntoImpl(prevValue, nextObject[key], _canMutateNext);
            if (nextValue !== nextObject[key] && _canMutateNext) {
                nextObject[key] = nextValue;
            }
            return wasEqual && nextValue === prevObject[key];
        }, true) && prevKeys.length === nextKeys.length;
    }
    return canRecycle ? prevData : nextData;
}
module.exports = recycleNodesInto;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernFragmentSpecResolver.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var getPendingOperationsForFragment = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getPendingOperationsForFragment.js [app-ssr] (ecmascript)");
var handlePotentialSnapshotErrors = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js [app-ssr] (ecmascript)");
var isScalarAndEqual = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/isScalarAndEqual.js [app-ssr] (ecmascript)");
var recycleNodesInto = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/recycleNodesInto.js [app-ssr] (ecmascript)");
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js [app-ssr] (ecmascript)"), createRequestDescriptor = _require.createRequestDescriptor;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernSelector.js [app-ssr] (ecmascript)"), areEqualSelectors = _require2.areEqualSelectors, createReaderSelector = _require2.createReaderSelector, getSelectorsFromObject = _require2.getSelectorsFromObject;
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var RelayModernFragmentSpecResolver = /*#__PURE__*/ function() {
    function RelayModernFragmentSpecResolver(context, fragments, props, callback, rootIsQueryRenderer) {
        var _this = this;
        (0, _defineProperty2["default"])(this, "_onChange", function() {
            _this._stale = true;
            if (typeof _this._callback === 'function') {
                _this._callback();
            }
        });
        this._callback = callback;
        this._context = context;
        this._data = {};
        this._fragments = fragments;
        this._props = {};
        this._resolvers = {};
        this._stale = false;
        this._rootIsQueryRenderer = rootIsQueryRenderer;
        this.setProps(props);
    }
    var _proto = RelayModernFragmentSpecResolver.prototype;
    _proto.dispose = function dispose() {
        for(var key in this._resolvers){
            if (this._resolvers.hasOwnProperty(key)) {
                disposeCallback(this._resolvers[key]);
            }
        }
    };
    _proto.resolve = function resolve() {
        if (this._stale) {
            var prevData = this._data;
            var nextData;
            for(var key in this._resolvers){
                if (this._resolvers.hasOwnProperty(key)) {
                    var resolver = this._resolvers[key];
                    var prevItem = prevData[key];
                    if (resolver) {
                        var nextItem = resolver.resolve();
                        if (nextData || nextItem !== prevItem) {
                            nextData = nextData || (0, _objectSpread2["default"])({}, prevData);
                            nextData[key] = nextItem;
                        }
                    } else {
                        var prop = this._props[key];
                        var _nextItem = prop !== undefined ? prop : null;
                        if (nextData || !isScalarAndEqual(_nextItem, prevItem)) {
                            nextData = nextData || (0, _objectSpread2["default"])({}, prevData);
                            nextData[key] = _nextItem;
                        }
                    }
                }
            }
            this._data = nextData || prevData;
            this._stale = false;
        }
        return this._data;
    };
    _proto.setCallback = function setCallback(props, callback) {
        this._callback = callback;
        if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
            this.setProps(props);
        }
    };
    _proto.setProps = function setProps(props) {
        this._props = {};
        var ownedSelectors = getSelectorsFromObject(this._fragments, props);
        for(var key in ownedSelectors){
            if (ownedSelectors.hasOwnProperty(key)) {
                var ownedSelector = ownedSelectors[key];
                var resolver = this._resolvers[key];
                if (ownedSelector == null) {
                    if (resolver != null) {
                        resolver.dispose();
                    }
                    resolver = null;
                } else if (ownedSelector.kind === 'PluralReaderSelector') {
                    if (resolver == null) {
                        resolver = new SelectorListResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);
                    } else {
                        !(resolver instanceof SelectorListResolver) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernFragmentSpecResolver: Expected prop `%s` to always be an array.', key) : ("TURBOPACK unreachable", undefined) : void 0;
                        resolver.setSelector(ownedSelector);
                    }
                } else {
                    if (resolver == null) {
                        resolver = new SelectorResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);
                    } else {
                        !(resolver instanceof SelectorResolver) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernFragmentSpecResolver: Expected prop `%s` to always be an object.', key) : ("TURBOPACK unreachable", undefined) : void 0;
                        resolver.setSelector(ownedSelector);
                    }
                }
                this._props[key] = props[key];
                this._resolvers[key] = resolver;
            }
        }
        this._stale = true;
    };
    _proto.setVariables = function setVariables(variables, request) {
        for(var key in this._resolvers){
            if (this._resolvers.hasOwnProperty(key)) {
                var resolver = this._resolvers[key];
                if (resolver) {
                    resolver.setVariables(variables, request);
                }
            }
        }
        this._stale = true;
    };
    return RelayModernFragmentSpecResolver;
}();
var SelectorResolver = /*#__PURE__*/ function() {
    function SelectorResolver(environment, rootIsQueryRenderer, selector, subscribeOnConstruction, callback) {
        var _this2 = this;
        (0, _defineProperty2["default"])(this, "_onChange", function(snapshot) {
            _this2._data = snapshot.data;
            _this2._isMissingData = snapshot.isMissingData;
            _this2._missingRequiredFields = snapshot.missingRequiredFields;
            _this2._errorResponseFields = snapshot.errorResponseFields;
            _this2._relayResolverErrors = snapshot.relayResolverErrors;
            _this2._callback();
        });
        var _snapshot = environment.lookup(selector);
        this._callback = callback;
        this._data = _snapshot.data;
        this._isMissingData = _snapshot.isMissingData;
        this._missingRequiredFields = _snapshot.missingRequiredFields;
        this._errorResponseFields = _snapshot.errorResponseFields;
        this._relayResolverErrors = _snapshot.relayResolverErrors;
        this._environment = environment;
        this._rootIsQueryRenderer = rootIsQueryRenderer;
        this._selector = selector;
        if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
            if (subscribeOnConstruction) {
                this._subscription = environment.subscribe(_snapshot, this._onChange);
            }
        } else {
            this._subscription = environment.subscribe(_snapshot, this._onChange);
        }
    }
    var _proto2 = SelectorResolver.prototype;
    _proto2.dispose = function dispose() {
        if (this._subscription) {
            this._subscription.dispose();
            this._subscription = null;
        }
    };
    _proto2.resolve = function resolve() {
        if (this._isMissingData === true) {
            var pendingOperationsResult = getPendingOperationsForFragment(this._environment, this._selector.node, this._selector.owner);
            var promise = pendingOperationsResult === null || pendingOperationsResult === void 0 ? void 0 : pendingOperationsResult.promise;
            if (promise != null) {
                if (this._rootIsQueryRenderer) {
                    ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Relay Container for fragment `%s` has missing data and ' + 'would suspend. When using features such as @defer or @module, ' + 'use `useFragment` instead of a Relay Container.', this._selector.node.name) : ("TURBOPACK unreachable", undefined);
                } else {
                    var _pendingOperationsRes;
                    var pendingOperations = (_pendingOperationsRes = pendingOperationsResult === null || pendingOperationsResult === void 0 ? void 0 : pendingOperationsResult.pendingOperations) !== null && _pendingOperationsRes !== void 0 ? _pendingOperationsRes : [];
                    ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Relay Container for fragment `%s` suspended. When using ' + 'features such as @defer or @module, use `useFragment` instead ' + 'of a Relay Container.', this._selector.node.name) : ("TURBOPACK unreachable", undefined);
                    this._environment.__log({
                        name: 'suspense.fragment',
                        data: this._data,
                        fragment: this._selector.node,
                        isRelayHooks: false,
                        isMissingData: this._isMissingData,
                        isPromiseCached: false,
                        pendingOperations: pendingOperations
                    });
                    throw promise;
                }
            }
        }
        handlePotentialSnapshotErrors(this._environment, this._missingRequiredFields, this._relayResolverErrors, this._errorResponseFields);
        return this._data;
    };
    _proto2.setSelector = function setSelector(selector) {
        if (this._subscription != null && areEqualSelectors(selector, this._selector)) {
            return;
        }
        this.dispose();
        var snapshot = this._environment.lookup(selector);
        this._data = recycleNodesInto(this._data, snapshot.data);
        this._isMissingData = snapshot.isMissingData;
        this._missingRequiredFields = snapshot.missingRequiredFields;
        this._errorResponseFields = snapshot.errorResponseFields;
        this._relayResolverErrors = snapshot.relayResolverErrors;
        this._selector = selector;
        this._subscription = this._environment.subscribe(snapshot, this._onChange);
    };
    _proto2.setVariables = function setVariables(variables, request) {
        if (areEqual(variables, this._selector.variables)) {
            return;
        }
        var requestDescriptor = createRequestDescriptor(request, variables);
        var selector = createReaderSelector(this._selector.node, this._selector.dataID, variables, requestDescriptor);
        this.setSelector(selector);
    };
    return SelectorResolver;
}();
var SelectorListResolver = /*#__PURE__*/ function() {
    function SelectorListResolver(environment, rootIsQueryRenderer, selector, subscribeOnConstruction, callback) {
        var _this3 = this;
        (0, _defineProperty2["default"])(this, "_onChange", function(data) {
            _this3._stale = true;
            _this3._callback();
        });
        this._callback = callback;
        this._data = [];
        this._environment = environment;
        this._resolvers = [];
        this._stale = true;
        this._rootIsQueryRenderer = rootIsQueryRenderer;
        this._subscribeOnConstruction = subscribeOnConstruction;
        this.setSelector(selector);
    }
    var _proto3 = SelectorListResolver.prototype;
    _proto3.dispose = function dispose() {
        this._resolvers.forEach(disposeCallback);
    };
    _proto3.resolve = function resolve() {
        if (this._stale) {
            var prevData = this._data;
            var nextData;
            for(var ii = 0; ii < this._resolvers.length; ii++){
                var prevItem = prevData[ii];
                var nextItem = this._resolvers[ii].resolve();
                if (nextData || nextItem !== prevItem) {
                    nextData = nextData || prevData.slice(0, ii);
                    nextData.push(nextItem);
                }
            }
            if (!nextData && this._resolvers.length !== prevData.length) {
                nextData = prevData.slice(0, this._resolvers.length);
            }
            this._data = nextData || prevData;
            this._stale = false;
        }
        return this._data;
    };
    _proto3.setSelector = function setSelector(selector) {
        var selectors = selector.selectors;
        while(this._resolvers.length > selectors.length){
            var resolver = this._resolvers.pop();
            resolver.dispose();
        }
        for(var ii = 0; ii < selectors.length; ii++){
            if (ii < this._resolvers.length) {
                this._resolvers[ii].setSelector(selectors[ii]);
            } else {
                this._resolvers[ii] = new SelectorResolver(this._environment, this._rootIsQueryRenderer, selectors[ii], this._subscribeOnConstruction, this._onChange);
            }
        }
        this._stale = true;
    };
    _proto3.setVariables = function setVariables(variables, request) {
        this._resolvers.forEach(function(resolver) {
            return resolver.setVariables(variables, request);
        });
        this._stale = true;
    };
    return SelectorListResolver;
}();
function disposeCallback(disposable) {
    disposable && disposable.dispose();
}
module.exports = RelayModernFragmentSpecResolver;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/createFragmentSpecResolver.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayModernFragmentSpecResolver = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernFragmentSpecResolver.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function createFragmentSpecResolver(context, containerName, fragments, props, rootIsQueryRenderer, callback) {
    if ("TURBOPACK compile-time truthy", 1) {
        var fragmentNames = Object.keys(fragments);
        fragmentNames.forEach(function(fragmentName) {
            var propValue = props[fragmentName];
            ("TURBOPACK compile-time truthy", 1) ? warning(propValue !== undefined, 'createFragmentSpecResolver: Expected prop `%s` to be supplied to `%s`, but ' + 'got `undefined`. Pass an explicit `null` if this is intentional.', fragmentName, containerName) : ("TURBOPACK unreachable", undefined);
        });
    }
    return new RelayModernFragmentSpecResolver(context, fragments, props, callback, rootIsQueryRenderer);
}
module.exports = createFragmentSpecResolver;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/createRelayContext.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var relayContext;
var firstReact;
function createRelayContext(react) {
    if (!relayContext) {
        relayContext = react.createContext(null);
        if ("TURBOPACK compile-time truthy", 1) {
            relayContext.displayName = 'RelayContext';
        }
        firstReact = react;
    }
    !(react === firstReact) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, '[createRelayContext]: You are passing a different instance of React', react.version) : ("TURBOPACK unreachable", undefined) : void 0;
    return relayContext;
}
module.exports = createRelayContext;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var LIVE_RESOLVER_SUSPENSE_SENTINEL = Object.freeze({
    __LIVE_RESOLVER_SUSPENSE_SENTINEL: true
});
function suspenseSentinel() {
    return LIVE_RESOLVER_SUSPENSE_SENTINEL;
}
function isSuspenseSentinel(value) {
    return value === LIVE_RESOLVER_SUSPENSE_SENTINEL;
}
module.exports = {
    isSuspenseSentinel: isSuspenseSentinel,
    suspenseSentinel: suspenseSentinel
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js [app-ssr] (ecmascript)"));
var _toPropertyKey2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toPropertyKey.js [app-ssr] (ecmascript)"));
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var deepFreeze = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/deepFreeze.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)"), generateClientObjectClientID = _require.generateClientObjectClientID, isClientID = _require.isClientID;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js [app-ssr] (ecmascript)"), isSuspenseSentinel = _require2.isSuspenseSentinel;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), ACTOR_IDENTIFIER_KEY = _require3.ACTOR_IDENTIFIER_KEY, ERRORS_KEY = _require3.ERRORS_KEY, ID_KEY = _require3.ID_KEY, INVALIDATED_AT_KEY = _require3.INVALIDATED_AT_KEY, REF_KEY = _require3.REF_KEY, REFS_KEY = _require3.REFS_KEY, RELAY_RESOLVER_VALUE_KEY = _require3.RELAY_RESOLVER_VALUE_KEY, ROOT_ID = _require3.ROOT_ID, TYPENAME_KEY = _require3.TYPENAME_KEY;
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function clone(record) {
    return (0, _objectSpread2["default"])({}, record);
}
function copyFields(source, sink) {
    for(var key in source){
        if (source.hasOwnProperty(key)) {
            if (key !== ID_KEY && key !== TYPENAME_KEY) {
                sink[key] = source[key];
            }
        }
    }
}
function create(dataID, typeName) {
    var record = {};
    record[ID_KEY] = dataID;
    record[TYPENAME_KEY] = typeName;
    return record;
}
function fromObject(json) {
    return json;
}
function getDataID(record) {
    return record[ID_KEY];
}
function getFields(record) {
    if (ERRORS_KEY in record) {
        return Object.keys(record).filter(function(field) {
            return field !== ERRORS_KEY;
        });
    }
    return Object.keys(record);
}
function getType(record) {
    return record[TYPENAME_KEY];
}
function getErrors(record, storageKey) {
    var _record$ERRORS_KEY;
    return (_record$ERRORS_KEY = record[ERRORS_KEY]) === null || _record$ERRORS_KEY === void 0 ? void 0 : _record$ERRORS_KEY[storageKey];
}
function getValue(record, storageKey) {
    var value = record[storageKey];
    if (value && typeof value === 'object') {
        !(!value.hasOwnProperty(REF_KEY) && !value.hasOwnProperty(REFS_KEY)) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernRecord.getValue(): Expected a scalar (non-link) value for `%s.%s` ' + 'but found %s.', record[ID_KEY], storageKey, value.hasOwnProperty(REF_KEY) ? 'a linked record' : 'plural linked records') : ("TURBOPACK unreachable", undefined) : void 0;
    }
    return value;
}
function hasValue(record, storageKey) {
    return storageKey in record;
}
function getLinkedRecordID(record, storageKey) {
    var maybeLink = record[storageKey];
    if (maybeLink == null) {
        return maybeLink;
    }
    var link = maybeLink;
    !(typeof link === 'object' && link && typeof link[REF_KEY] === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernRecord.getLinkedRecordID(): Expected `%s.%s` to be a linked ID, ' + 'was `%s`.%s', record[ID_KEY], storageKey, JSON.stringify(link), typeof link === 'object' && link[REFS_KEY] !== undefined ? ' It appears to be a plural linked record: did you mean to call ' + 'getLinkedRecords() instead of getLinkedRecord()?' : '') : ("TURBOPACK unreachable", undefined) : void 0;
    return link[REF_KEY];
}
function hasLinkedRecordID(record, storageKey) {
    var maybeLink = record[storageKey];
    if (maybeLink == null) {
        return false;
    }
    var link = maybeLink;
    return typeof link === 'object' && link && typeof link[REF_KEY] === 'string';
}
function getLinkedRecordIDs(record, storageKey) {
    var links = record[storageKey];
    if (links == null) {
        return links;
    }
    !(typeof links === 'object' && Array.isArray(links[REFS_KEY])) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernRecord.getLinkedRecordIDs(): Expected `%s.%s` to contain an array ' + 'of linked IDs, got `%s`.%s', record[ID_KEY], storageKey, JSON.stringify(links), typeof links === 'object' && links[REF_KEY] !== undefined ? ' It appears to be a singular linked record: did you mean to call ' + 'getLinkedRecord() instead of getLinkedRecords()?' : '') : ("TURBOPACK unreachable", undefined) : void 0;
    return links[REFS_KEY];
}
function hasLinkedRecordIDs(record, storageKey) {
    var links = record[storageKey];
    if (links == null) {
        return false;
    }
    return typeof links === 'object' && Array.isArray(links[REFS_KEY]) && links[REFS_KEY].every(function(link) {
        return typeof link === 'string';
    });
}
function getInvalidationEpoch(record) {
    if (record == null) {
        return null;
    }
    var invalidatedAt = record[INVALIDATED_AT_KEY];
    if (typeof invalidatedAt !== 'number') {
        return null;
    }
    return invalidatedAt;
}
function update(prevRecord, nextRecord) {
    var _updated2;
    if ("TURBOPACK compile-time truthy", 1) {
        var _getType, _getType2;
        var prevID = getDataID(prevRecord);
        var nextID = getDataID(nextRecord);
        ("TURBOPACK compile-time truthy", 1) ? warning(prevID === nextID, 'RelayModernRecord: Invalid record update, expected both versions of ' + 'the record to have the same id, got `%s` and `%s`.', prevID, nextID) : ("TURBOPACK unreachable", undefined);
        var prevType = (_getType = getType(prevRecord)) !== null && _getType !== void 0 ? _getType : null;
        var nextType = (_getType2 = getType(nextRecord)) !== null && _getType2 !== void 0 ? _getType2 : null;
        ("TURBOPACK compile-time truthy", 1) ? warning(isClientID(nextID) && nextID !== ROOT_ID || prevType === nextType, 'RelayModernRecord: Invalid record update, expected both versions of ' + 'record `%s` to have the same `%s` but got conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', prevID, TYPENAME_KEY, prevType, nextType) : ("TURBOPACK unreachable", undefined);
    }
    var prevErrorsByKey = prevRecord[ERRORS_KEY];
    var nextErrorsByKey = nextRecord[ERRORS_KEY];
    var updated = null;
    if (prevErrorsByKey == null && nextErrorsByKey == null) {
        var _updated;
        for(var storageKey in nextRecord){
            if (updated || !areEqual(prevRecord[storageKey], nextRecord[storageKey])) {
                updated = updated !== null ? updated : (0, _objectSpread2["default"])({}, prevRecord);
                updated[storageKey] = nextRecord[storageKey];
            }
        }
        return (_updated = updated) !== null && _updated !== void 0 ? _updated : prevRecord;
    }
    for(var _storageKey2 in nextRecord){
        if (_storageKey2 === ERRORS_KEY) {
            continue;
        }
        var nextValue = nextRecord[_storageKey2];
        var nextErrors = nextErrorsByKey === null || nextErrorsByKey === void 0 ? void 0 : nextErrorsByKey[_storageKey2];
        if (updated == null) {
            var prevValue = prevRecord[_storageKey2];
            var prevErrors = prevErrorsByKey === null || prevErrorsByKey === void 0 ? void 0 : prevErrorsByKey[_storageKey2];
            if (areEqual(prevValue, nextValue) && areEqual(prevErrors, nextErrors)) {
                continue;
            }
            updated = (0, _objectSpread2["default"])({}, prevRecord);
            if (prevErrorsByKey != null) {
                updated[ERRORS_KEY] = (0, _objectSpread2["default"])({}, prevErrorsByKey);
            }
        }
        setValue(updated, _storageKey2, nextValue);
        setErrors(updated, _storageKey2, nextErrors);
    }
    return (_updated2 = updated) !== null && _updated2 !== void 0 ? _updated2 : prevRecord;
}
function merge(record1, record2) {
    if ("TURBOPACK compile-time truthy", 1) {
        var _getType3, _getType4;
        var prevID = getDataID(record1);
        var nextID = getDataID(record2);
        ("TURBOPACK compile-time truthy", 1) ? warning(prevID === nextID, 'RelayModernRecord: Invalid record merge, expected both versions of ' + 'the record to have the same id, got `%s` and `%s`.', prevID, nextID) : ("TURBOPACK unreachable", undefined);
        var prevType = (_getType3 = getType(record1)) !== null && _getType3 !== void 0 ? _getType3 : null;
        var nextType = (_getType4 = getType(record2)) !== null && _getType4 !== void 0 ? _getType4 : null;
        ("TURBOPACK compile-time truthy", 1) ? warning(isClientID(nextID) && nextID !== ROOT_ID || prevType === nextType, 'RelayModernRecord: Invalid record merge, expected both versions of ' + 'record `%s` to have the same `%s` but got conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', prevID, TYPENAME_KEY, prevType, nextType) : ("TURBOPACK unreachable", undefined);
    }
    if (ERRORS_KEY in record1 || ERRORS_KEY in record2) {
        var errors1 = record1[ERRORS_KEY], fields1 = (0, _objectWithoutPropertiesLoose2["default"])(record1, [
            ERRORS_KEY
        ].map(_toPropertyKey2["default"]));
        var errors2 = record2[ERRORS_KEY], fields2 = (0, _objectWithoutPropertiesLoose2["default"])(record2, [
            ERRORS_KEY
        ].map(_toPropertyKey2["default"]));
        var updated = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, fields1), fields2);
        if (errors1 == null && errors2 == null) {
            return updated;
        }
        var updatedErrors = {};
        for(var storageKey in errors1){
            if (fields2.hasOwnProperty(storageKey)) {
                continue;
            }
            updatedErrors[storageKey] = errors1[storageKey];
        }
        for(var _storageKey3 in errors2){
            updatedErrors[_storageKey3] = errors2[_storageKey3];
        }
        for(var _storageKey in updatedErrors){
            updated[ERRORS_KEY] = updatedErrors;
            break;
        }
        return updated;
    } else {
        return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, record1), record2);
    }
}
function freeze(record) {
    deepFreeze(record);
}
function setErrors(record, storageKey, errors) {
    if ("TURBOPACK compile-time truthy", 1) {
        ("TURBOPACK compile-time truthy", 1) ? warning(storageKey in record, 'RelayModernRecord: Invalid error update, `%s` should not be undefined.', storageKey) : ("TURBOPACK unreachable", undefined);
    }
    var errorsByStorageKey = record[ERRORS_KEY];
    if (errors != null && errors.length > 0) {
        if (errorsByStorageKey == null) {
            record[ERRORS_KEY] = (0, _defineProperty2["default"])({}, storageKey, errors);
        } else {
            errorsByStorageKey[storageKey] = errors;
        }
    } else if (errorsByStorageKey != null) {
        if (delete errorsByStorageKey[storageKey]) {
            for(var otherStorageKey in errorsByStorageKey){
                if (errorsByStorageKey.hasOwnProperty(otherStorageKey)) {
                    return;
                }
            }
            delete record[ERRORS_KEY];
        }
    }
}
function setValue(record, storageKey, value) {
    if ("TURBOPACK compile-time truthy", 1) {
        var prevID = getDataID(record);
        if (storageKey === ID_KEY) {
            ("TURBOPACK compile-time truthy", 1) ? warning(prevID === value, 'RelayModernRecord: Invalid field update, expected both versions of ' + 'the record to have the same id, got `%s` and `%s`.', prevID, value) : ("TURBOPACK unreachable", undefined);
        } else if (storageKey === TYPENAME_KEY) {
            var _getType5;
            var prevType = (_getType5 = getType(record)) !== null && _getType5 !== void 0 ? _getType5 : null;
            var nextType = value !== null && value !== void 0 ? value : null;
            ("TURBOPACK compile-time truthy", 1) ? warning(isClientID(getDataID(record)) && getDataID(record) !== ROOT_ID || prevType === nextType, 'RelayModernRecord: Invalid field update, expected both versions of ' + 'record `%s` to have the same `%s` but got conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', prevID, TYPENAME_KEY, prevType, nextType) : ("TURBOPACK unreachable", undefined);
        }
    }
    record[storageKey] = value;
}
function setLinkedRecordID(record, storageKey, linkedID) {
    var link = {};
    link[REF_KEY] = linkedID;
    record[storageKey] = link;
}
function setLinkedRecordIDs(record, storageKey, linkedIDs) {
    var links = {};
    links[REFS_KEY] = linkedIDs;
    record[storageKey] = links;
}
function setActorLinkedRecordID(record, storageKey, actorIdentifier, linkedID) {
    var link = {};
    link[REF_KEY] = linkedID;
    link[ACTOR_IDENTIFIER_KEY] = actorIdentifier;
    record[storageKey] = link;
}
function getActorLinkedRecordID(record, storageKey) {
    var link = record[storageKey];
    if (link == null) {
        return link;
    }
    !(typeof link === 'object' && typeof link[REF_KEY] === 'string' && link[ACTOR_IDENTIFIER_KEY] != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernRecord.getActorLinkedRecordID(): Expected `%s.%s` to be an actor specific linked ID, ' + 'was `%s`.', record[ID_KEY], storageKey, JSON.stringify(link)) : ("TURBOPACK unreachable", undefined) : void 0;
    return [
        link[ACTOR_IDENTIFIER_KEY],
        link[REF_KEY]
    ];
}
function getResolverLinkedRecordID(record, typeName) {
    var id = getValue(record, RELAY_RESOLVER_VALUE_KEY);
    if (id == null || isSuspenseSentinel(id)) {
        return null;
    }
    if (typeof id === 'object') {
        id = id.id;
    }
    !(typeof id === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernRecord.getResolverLinkedRecordID(): Expected value to be a linked ID, ' + 'was `%s`.', JSON.stringify(id)) : ("TURBOPACK unreachable", undefined) : void 0;
    return generateClientObjectClientID(typeName, id);
}
function getResolverLinkedRecordIDs(record, typeName) {
    var resolverValue = getValue(record, RELAY_RESOLVER_VALUE_KEY);
    if (resolverValue == null || isSuspenseSentinel(resolverValue)) {
        return null;
    }
    !Array.isArray(resolverValue) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernRecord.getResolverLinkedRecordIDs(): Expected value to be an array of linked IDs, ' + 'was `%s`.', JSON.stringify(resolverValue)) : ("TURBOPACK unreachable", undefined) : void 0;
    return resolverValue.map(function(id) {
        if (id == null) {
            return null;
        }
        if (typeof id === 'object') {
            id = id.id;
        }
        !(typeof id === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernRecord.getResolverLinkedRecordIDs(): Expected item within resolver linked field to be a DataID, ' + 'was `%s`.', JSON.stringify(id)) : ("TURBOPACK unreachable", undefined) : void 0;
        return generateClientObjectClientID(typeName, id);
    });
}
function toJSON(record) {
    return record;
}
module.exports = {
    clone: clone,
    copyFields: copyFields,
    create: create,
    freeze: freeze,
    fromObject: fromObject,
    getDataID: getDataID,
    getErrors: getErrors,
    getFields: getFields,
    getInvalidationEpoch: getInvalidationEpoch,
    getLinkedRecordID: getLinkedRecordID,
    getLinkedRecordIDs: getLinkedRecordIDs,
    getType: getType,
    getValue: getValue,
    hasValue: hasValue,
    hasLinkedRecordID: hasLinkedRecordID,
    hasLinkedRecordIDs: hasLinkedRecordIDs,
    merge: merge,
    setErrors: setErrors,
    setValue: setValue,
    setLinkedRecordID: setLinkedRecordID,
    setLinkedRecordIDs: setLinkedRecordIDs,
    update: update,
    getActorLinkedRecordID: getActorLinkedRecordID,
    setActorLinkedRecordID: setActorLinkedRecordID,
    getResolverLinkedRecordID: getResolverLinkedRecordID,
    getResolverLinkedRecordIDs: getResolverLinkedRecordIDs,
    toJSON: toJSON
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordState.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayRecordState = {
    EXISTENT: 'EXISTENT',
    NONEXISTENT: 'NONEXISTENT',
    UNKNOWN: 'UNKNOWN'
};
module.exports = RelayRecordState;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordSource.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var RelayRecordState = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordState.js [app-ssr] (ecmascript)");
var EXISTENT = RelayRecordState.EXISTENT, NONEXISTENT = RelayRecordState.NONEXISTENT, UNKNOWN = RelayRecordState.UNKNOWN;
var RelayRecordSource = /*#__PURE__*/ function() {
    function RelayRecordSource(records) {
        var _this = this;
        this._records = new Map();
        if (records != null) {
            Object.keys(records).forEach(function(key) {
                var object = records[key];
                var record = RelayModernRecord.fromObject(object);
                _this._records.set(key, record);
            });
        }
    }
    RelayRecordSource.create = function create(records) {
        return new RelayRecordSource(records);
    };
    var _proto = RelayRecordSource.prototype;
    _proto.clear = function clear() {
        this._records = new Map();
    };
    _proto["delete"] = function _delete(dataID) {
        this._records.set(dataID, null);
    };
    _proto.get = function get(dataID) {
        return this._records.get(dataID);
    };
    _proto.getRecordIDs = function getRecordIDs() {
        return Array.from(this._records.keys());
    };
    _proto.getStatus = function getStatus(dataID) {
        if (!this._records.has(dataID)) {
            return UNKNOWN;
        }
        return this._records.get(dataID) == null ? NONEXISTENT : EXISTENT;
    };
    _proto.has = function has(dataID) {
        return this._records.has(dataID);
    };
    _proto.remove = function remove(dataID) {
        this._records["delete"](dataID);
    };
    _proto.set = function set(dataID, record) {
        this._records.set(dataID, record);
    };
    _proto.size = function size() {
        return this._records.size;
    };
    _proto.toJSON = function toJSON() {
        var obj = {};
        var _iterator = (0, _createForOfIteratorHelper2["default"])(this._records), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var _step$value = _step.value, key = _step$value[0], record = _step$value[1];
                obj[key] = RelayModernRecord.toJSON(record);
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        return obj;
    };
    return RelayRecordSource;
}();
module.exports = RelayRecordSource;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = 'INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE';
function assertInternalActorIdentifier(actorIdentifier) {
    !(actorIdentifier === INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Expected to use only internal version of the `actorIdentifier`. "%s" was provided.', actorIdentifier) : ("TURBOPACK unreachable", undefined) : void 0;
}
module.exports = {
    assertInternalActorIdentifier: assertInternalActorIdentifier,
    getActorIdentifier: function getActorIdentifier(actorID) {
        return actorID;
    },
    getDefaultActorIdentifier: function getDefaultActorIdentifier() {
        throw new Error('Not Implemented');
    },
    INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE: INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/multi-actor-environment/ActorUtils.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var ACTOR_IDENTIFIER_FIELD_NAME = 'actor_key';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js [app-ssr] (ecmascript)"), getActorIdentifier = _require.getActorIdentifier;
function getActorIdentifierFromPayload(payload) {
    if (payload != null && typeof payload === 'object' && typeof payload[ACTOR_IDENTIFIER_FIELD_NAME] === 'string') {
        return getActorIdentifier(payload[ACTOR_IDENTIFIER_FIELD_NAME]);
    }
}
module.exports = {
    ACTOR_IDENTIFIER_FIELD_NAME: ACTOR_IDENTIFIER_FIELD_NAME,
    getActorIdentifierFromPayload: getActorIdentifierFromPayload
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/TypeID.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var PREFIX = 'client:__type:';
var TYPE_SCHEMA_TYPE = '__TypeSchema';
function generateTypeID(typeName) {
    return PREFIX + typeName;
}
function isTypeID(id) {
    return id.indexOf(PREFIX) === 0;
}
module.exports = {
    generateTypeID: generateTypeID,
    isTypeID: isTypeID,
    TYPE_SCHEMA_TYPE: TYPE_SCHEMA_TYPE
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var _toConsumableArray2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toConsumableArray.js [app-ssr] (ecmascript)"));
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/multi-actor-environment/ActorUtils.js [app-ssr] (ecmascript)"), ACTOR_IDENTIFIER_FIELD_NAME = _require.ACTOR_IDENTIFIER_FIELD_NAME, getActorIdentifierFromPayload = _require.getActorIdentifierFromPayload;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)"), ACTOR_CHANGE = _require2.ACTOR_CHANGE, CLIENT_COMPONENT = _require2.CLIENT_COMPONENT, CLIENT_EDGE_TO_CLIENT_OBJECT = _require2.CLIENT_EDGE_TO_CLIENT_OBJECT, CLIENT_EXTENSION = _require2.CLIENT_EXTENSION, CONDITION = _require2.CONDITION, DEFER = _require2.DEFER, FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD, INLINE_FRAGMENT = _require2.INLINE_FRAGMENT, LINKED_FIELD = _require2.LINKED_FIELD, LINKED_HANDLE = _require2.LINKED_HANDLE, MODULE_IMPORT = _require2.MODULE_IMPORT, RELAY_LIVE_RESOLVER = _require2.RELAY_LIVE_RESOLVER, RELAY_RESOLVER = _require2.RELAY_RESOLVER, SCALAR_FIELD = _require2.SCALAR_FIELD, SCALAR_HANDLE = _require2.SCALAR_HANDLE, STREAM = _require2.STREAM, TYPE_DISCRIMINATOR = _require2.TYPE_DISCRIMINATOR;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)"), generateClientID = _require3.generateClientID, isClientID = _require3.isClientID;
var _require4 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js [app-ssr] (ecmascript)"), getLocalVariables = _require4.getLocalVariables;
var _require5 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayErrorTrie.js [app-ssr] (ecmascript)"), buildErrorTrie = _require5.buildErrorTrie, getErrorsByKey = _require5.getErrorsByKey, getNestedErrorTrieByKey = _require5.getNestedErrorTrieByKey;
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var _require6 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernSelector.js [app-ssr] (ecmascript)"), createNormalizationSelector = _require6.createNormalizationSelector;
var _require7 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), ROOT_ID = _require7.ROOT_ID, TYPENAME_KEY = _require7.TYPENAME_KEY, getArgumentValues = _require7.getArgumentValues, getHandleStorageKey = _require7.getHandleStorageKey, getModuleComponentKey = _require7.getModuleComponentKey, getModuleOperationKey = _require7.getModuleOperationKey, getStorageKey = _require7.getStorageKey;
var _require8 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/TypeID.js [app-ssr] (ecmascript)"), TYPE_SCHEMA_TYPE = _require8.TYPE_SCHEMA_TYPE, generateTypeID = _require8.generateTypeID;
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function normalize(recordSource, selector, response, options, errors) {
    var dataID = selector.dataID, node = selector.node, variables = selector.variables;
    var normalizer = new RelayResponseNormalizer(recordSource, variables, options);
    return normalizer.normalizeResponse(node, dataID, response, errors);
}
var RelayResponseNormalizer = /*#__PURE__*/ function() {
    function RelayResponseNormalizer(recordSource, variables, options) {
        this._actorIdentifier = options.actorIdentifier;
        this._getDataId = options.getDataID;
        this._handleFieldPayloads = [];
        this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;
        this._incrementalPlaceholders = [];
        this._isClientExtension = false;
        this._isUnmatchedAbstractType = false;
        this._followupPayloads = [];
        this._path = options.path ? (0, _toConsumableArray2["default"])(options.path) : [];
        this._recordSource = recordSource;
        this._variables = variables;
        this._shouldProcessClientComponents = options.shouldProcessClientComponents;
    }
    var _proto = RelayResponseNormalizer.prototype;
    _proto.normalizeResponse = function normalizeResponse(node, dataID, data, errors) {
        var record = this._recordSource.get(dataID);
        !record ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : ("TURBOPACK unreachable", undefined) : void 0;
        this._assignClientAbstractTypes(node);
        this._errorTrie = buildErrorTrie(errors);
        this._traverseSelections(node, record, data);
        return {
            errors: errors,
            fieldPayloads: this._handleFieldPayloads,
            incrementalPlaceholders: this._incrementalPlaceholders,
            followupPayloads: this._followupPayloads,
            source: this._recordSource,
            isFinal: false
        };
    };
    _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node) {
        var clientAbstractTypes = node.clientAbstractTypes;
        if (clientAbstractTypes != null) {
            for(var _i = 0, _Object$keys = Object.keys(clientAbstractTypes); _i < _Object$keys.length; _i++){
                var abstractType = _Object$keys[_i];
                var _iterator = (0, _createForOfIteratorHelper2["default"])(clientAbstractTypes[abstractType]), _step;
                try {
                    for(_iterator.s(); !(_step = _iterator.n()).done;){
                        var concreteType = _step.value;
                        var typeID = generateTypeID(concreteType);
                        var typeRecord = this._recordSource.get(typeID);
                        if (typeRecord == null) {
                            typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);
                            this._recordSource.set(typeID, typeRecord);
                        }
                        RelayModernRecord.setValue(typeRecord, abstractType, true);
                    }
                } catch (err) {
                    _iterator.e(err);
                } finally{
                    _iterator.f();
                }
            }
        }
    };
    _proto._getVariableValue = function _getVariableValue(name) {
        !this._variables.hasOwnProperty(name) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : ("TURBOPACK unreachable", undefined) : void 0;
        return this._variables[name];
    };
    _proto._getRecordType = function _getRecordType(data) {
        var typeName = data[TYPENAME_KEY];
        !(typeName != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : ("TURBOPACK unreachable", undefined) : void 0;
        return typeName;
    };
    _proto._traverseSelections = function _traverseSelections(node, record, data) {
        for(var i = 0; i < node.selections.length; i++){
            var selection = node.selections[i];
            switch(selection.kind){
                case SCALAR_FIELD:
                case LINKED_FIELD:
                    this._normalizeField(selection, record, data);
                    break;
                case CONDITION:
                    var conditionValue = Boolean(this._getVariableValue(selection.condition));
                    if (conditionValue === selection.passingValue) {
                        this._traverseSelections(selection, record, data);
                    }
                    break;
                case FRAGMENT_SPREAD:
                    {
                        var prevVariables = this._variables;
                        this._variables = getLocalVariables(this._variables, selection.fragment.argumentDefinitions, selection.args);
                        this._traverseSelections(selection.fragment, record, data);
                        this._variables = prevVariables;
                        break;
                    }
                case INLINE_FRAGMENT:
                    {
                        var abstractKey = selection.abstractKey;
                        if (abstractKey == null) {
                            var typeName = RelayModernRecord.getType(record);
                            if (typeName === selection.type) {
                                this._traverseSelections(selection, record, data);
                            }
                        } else {
                            var implementsInterface = data.hasOwnProperty(abstractKey);
                            var _typeName = RelayModernRecord.getType(record);
                            var typeID = generateTypeID(_typeName);
                            var typeRecord = this._recordSource.get(typeID);
                            if (typeRecord == null) {
                                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);
                                this._recordSource.set(typeID, typeRecord);
                            }
                            RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);
                            if (implementsInterface) {
                                this._traverseSelections(selection, record, data);
                            }
                        }
                        break;
                    }
                case TYPE_DISCRIMINATOR:
                    {
                        var _abstractKey = selection.abstractKey;
                        var _implementsInterface = data.hasOwnProperty(_abstractKey);
                        var _typeName2 = RelayModernRecord.getType(record);
                        var _typeID = generateTypeID(_typeName2);
                        var _typeRecord = this._recordSource.get(_typeID);
                        if (_typeRecord == null) {
                            _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);
                            this._recordSource.set(_typeID, _typeRecord);
                        }
                        RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface);
                        break;
                    }
                case LINKED_HANDLE:
                case SCALAR_HANDLE:
                    var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};
                    var fieldKey = getStorageKey(selection, this._variables);
                    var handleKey = getHandleStorageKey(selection, this._variables);
                    this._handleFieldPayloads.push({
                        args: args,
                        dataID: RelayModernRecord.getDataID(record),
                        fieldKey: fieldKey,
                        handle: selection.handle,
                        handleKey: handleKey,
                        handleArgs: selection.handleArgs ? getArgumentValues(selection.handleArgs, this._variables) : {}
                    });
                    break;
                case MODULE_IMPORT:
                    this._normalizeModuleImport(selection, record, data);
                    break;
                case DEFER:
                    this._normalizeDefer(selection, record, data);
                    break;
                case STREAM:
                    this._normalizeStream(selection, record, data);
                    break;
                case CLIENT_EXTENSION:
                    var isClientExtension = this._isClientExtension;
                    this._isClientExtension = true;
                    this._traverseSelections(selection, record, data);
                    this._isClientExtension = isClientExtension;
                    break;
                case CLIENT_COMPONENT:
                    if (this._shouldProcessClientComponents === false) {
                        break;
                    }
                    this._traverseSelections(selection.fragment, record, data);
                    break;
                case ACTOR_CHANGE:
                    this._normalizeActorChange(selection, record, data);
                    break;
                case RELAY_RESOLVER:
                    this._normalizeResolver(selection, record, data);
                    break;
                case RELAY_LIVE_RESOLVER:
                    this._normalizeResolver(selection, record, data);
                    break;
                case CLIENT_EDGE_TO_CLIENT_OBJECT:
                    this._normalizeResolver(selection.backingField, record, data);
                    break;
                default:
                    selection;
                    ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
            }
        }
    };
    _proto._normalizeResolver = function _normalizeResolver(resolver, record, data) {
        if (resolver.fragment != null) {
            this._traverseSelections(resolver.fragment, record, data);
        }
    };
    _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {
        var isDeferred = defer["if"] === null || this._getVariableValue(defer["if"]);
        if ("TURBOPACK compile-time truthy", 1) {
            ("TURBOPACK compile-time truthy", 1) ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : ("TURBOPACK unreachable", undefined);
        }
        if (isDeferred === false) {
            this._traverseSelections(defer, record, data);
        } else {
            this._incrementalPlaceholders.push({
                kind: 'defer',
                data: data,
                label: defer.label,
                path: (0, _toConsumableArray2["default"])(this._path),
                selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),
                typeName: RelayModernRecord.getType(record),
                actorIdentifier: this._actorIdentifier
            });
        }
    };
    _proto._normalizeStream = function _normalizeStream(stream, record, data) {
        this._traverseSelections(stream, record, data);
        var isStreamed = stream["if"] === null || this._getVariableValue(stream["if"]);
        if ("TURBOPACK compile-time truthy", 1) {
            ("TURBOPACK compile-time truthy", 1) ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : ("TURBOPACK unreachable", undefined);
        }
        if (isStreamed === true) {
            this._incrementalPlaceholders.push({
                kind: 'stream',
                label: stream.label,
                path: (0, _toConsumableArray2["default"])(this._path),
                parentID: RelayModernRecord.getDataID(record),
                node: stream,
                variables: this._variables,
                actorIdentifier: this._actorIdentifier
            });
        }
    };
    _proto._normalizeModuleImport = function _normalizeModuleImport(moduleImport, record, data) {
        !(typeof data === 'object' && data) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : ("TURBOPACK unreachable", undefined) : void 0;
        var typeName = RelayModernRecord.getType(record);
        var componentKey = getModuleComponentKey(moduleImport.documentName);
        var componentReference = moduleImport.componentModuleProvider || data[componentKey];
        RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== void 0 ? componentReference : null);
        var operationKey = getModuleOperationKey(moduleImport.documentName);
        var operationReference = moduleImport.operationModuleProvider || data[operationKey];
        RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== void 0 ? operationReference : null);
        if (operationReference != null) {
            this._followupPayloads.push({
                kind: 'ModuleImportPayload',
                args: moduleImport.args,
                data: data,
                dataID: RelayModernRecord.getDataID(record),
                operationReference: operationReference,
                path: (0, _toConsumableArray2["default"])(this._path),
                typeName: typeName,
                variables: this._variables,
                actorIdentifier: this._actorIdentifier
            });
        }
    };
    _proto._normalizeField = function _normalizeField(selection, record, data) {
        !(typeof data === 'object' && data) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : ("TURBOPACK unreachable", undefined) : void 0;
        var responseKey = selection.alias || selection.name;
        var storageKey = getStorageKey(selection, this._variables);
        var fieldValue = data[responseKey];
        if (fieldValue == null) {
            if (fieldValue === undefined) {
                var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;
                if (isOptionalField) {
                    return;
                } else if (!this._treatMissingFieldsAsNull) {
                    if ("TURBOPACK compile-time truthy", 1) {
                        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : ("TURBOPACK unreachable", undefined);
                    }
                    return;
                }
            }
            if ("TURBOPACK compile-time truthy", 1) {
                if (selection.kind === SCALAR_FIELD) {
                    this._validateConflictingFieldsWithIdenticalId(record, storageKey, null);
                }
            }
            RelayModernRecord.setValue(record, storageKey, null);
            var errorTrie = this._errorTrie;
            if (errorTrie != null) {
                var errors = getErrorsByKey(errorTrie, responseKey);
                if (errors != null) {
                    RelayModernRecord.setErrors(record, storageKey, errors);
                }
            }
            return;
        }
        if (selection.kind === SCALAR_FIELD) {
            if ("TURBOPACK compile-time truthy", 1) {
                this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);
            }
            RelayModernRecord.setValue(record, storageKey, fieldValue);
        } else if (selection.kind === LINKED_FIELD) {
            this._path.push(responseKey);
            var oldErrorTrie = this._errorTrie;
            this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, responseKey);
            if (selection.plural) {
                this._normalizePluralLink(selection, record, storageKey, fieldValue);
            } else {
                this._normalizeLink(selection, record, storageKey, fieldValue);
            }
            this._errorTrie = oldErrorTrie;
            this._path.pop();
        } else {
            selection;
            ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
        }
    };
    _proto._normalizeActorChange = function _normalizeActorChange(selection, record, data) {
        var _field$concreteType;
        var field = selection.linkedField;
        !(typeof data === 'object' && data) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, '_normalizeActorChange(): Expected data for field `%s` to be an object.', field.name) : ("TURBOPACK unreachable", undefined) : void 0;
        var responseKey = field.alias || field.name;
        var storageKey = getStorageKey(field, this._variables);
        var fieldValue = data[responseKey];
        if (fieldValue == null) {
            if (fieldValue === undefined) {
                var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;
                if (isOptionalField) {
                    return;
                } else if (!this._treatMissingFieldsAsNull) {
                    if ("TURBOPACK compile-time truthy", 1) {
                        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : ("TURBOPACK unreachable", undefined);
                    }
                    return;
                }
            }
            RelayModernRecord.setValue(record, storageKey, null);
            return;
        }
        var actorIdentifier = getActorIdentifierFromPayload(fieldValue);
        if (actorIdentifier == null) {
            if ("TURBOPACK compile-time truthy", 1) {
                ("TURBOPACK compile-time truthy", 1) ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload. Payload is `%s`.', ACTOR_IDENTIFIER_FIELD_NAME, JSON.stringify(fieldValue, null, 2)) : ("TURBOPACK unreachable", undefined);
            }
            RelayModernRecord.setValue(record, storageKey, null);
            return;
        }
        var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue);
        var nextID = this._getDataId(fieldValue, typeName) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);
        !(typeof nextID === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : ("TURBOPACK unreachable", undefined) : void 0;
        RelayModernRecord.setActorLinkedRecordID(record, storageKey, actorIdentifier, nextID);
        this._followupPayloads.push({
            kind: 'ActorPayload',
            data: fieldValue,
            dataID: nextID,
            path: [].concat((0, _toConsumableArray2["default"])(this._path), [
                responseKey
            ]),
            typeName: typeName,
            variables: this._variables,
            node: field,
            actorIdentifier: actorIdentifier
        });
    };
    _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {
        var _field$concreteType2;
        !(typeof fieldValue === 'object' && fieldValue) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : ("TURBOPACK unreachable", undefined) : void 0;
        var nextID = this._getDataId(fieldValue, (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : this._getRecordType(fieldValue)) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);
        !(typeof nextID === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : ("TURBOPACK unreachable", undefined) : void 0;
        if ("TURBOPACK compile-time truthy", 1) {
            this._validateConflictingLinkedFieldsWithIdenticalId(RelayModernRecord.getLinkedRecordID(record, storageKey), nextID, storageKey);
        }
        RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);
        var nextRecord = this._recordSource.get(nextID);
        if (!nextRecord) {
            var typeName = field.concreteType || this._getRecordType(fieldValue);
            nextRecord = RelayModernRecord.create(nextID, typeName);
            this._recordSource.set(nextID, nextRecord);
        } else if ("TURBOPACK compile-time truthy", 1) {
            this._validateRecordType(nextRecord, field, fieldValue);
        }
        this._traverseSelections(field, nextRecord, fieldValue);
    };
    _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {
        var _this = this;
        !Array.isArray(fieldValue) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : ("TURBOPACK unreachable", undefined) : void 0;
        var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
        var nextIDs = [];
        fieldValue.forEach(function(item, nextIndex) {
            var _field$concreteType3;
            if (item == null) {
                nextIDs.push(item);
                return;
            }
            _this._path.push(String(nextIndex));
            var oldErrorTrie = _this._errorTrie;
            _this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, nextIndex);
            !(typeof item === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : ("TURBOPACK unreachable", undefined) : void 0;
            var nextID = _this._getDataId(item, (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);
            !(typeof nextID === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : ("TURBOPACK unreachable", undefined) : void 0;
            nextIDs.push(nextID);
            var nextRecord = _this._recordSource.get(nextID);
            if (!nextRecord) {
                var typeName = field.concreteType || _this._getRecordType(item);
                nextRecord = RelayModernRecord.create(nextID, typeName);
                _this._recordSource.set(nextID, nextRecord);
            } else if ("TURBOPACK compile-time truthy", 1) {
                _this._validateRecordType(nextRecord, field, item);
            }
            if ("TURBOPACK compile-time truthy", 1) {
                if (prevIDs) {
                    _this._validateConflictingLinkedFieldsWithIdenticalId(prevIDs[nextIndex], nextID, storageKey);
                }
            }
            _this._traverseSelections(field, nextRecord, item);
            _this._errorTrie = oldErrorTrie;
            _this._path.pop();
        });
        RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);
    };
    _proto._validateRecordType = function _validateRecordType(record, field, payload) {
        var _field$concreteType4;
        var typeName = (_field$concreteType4 = field.concreteType) !== null && _field$concreteType4 !== void 0 ? _field$concreteType4 : this._getRecordType(payload);
        var dataID = RelayModernRecord.getDataID(record);
        ("TURBOPACK compile-time truthy", 1) ? warning(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : ("TURBOPACK unreachable", undefined);
    };
    _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {
        if ("TURBOPACK compile-time truthy", 1) {
            var dataID = RelayModernRecord.getDataID(record);
            var previousValue = RelayModernRecord.getValue(record, storageKey);
            ("TURBOPACK compile-time truthy", 1) ? warning(storageKey === TYPENAME_KEY || previousValue === undefined || areEqual(previousValue, fieldValue), 'RelayResponseNormalizer: Invalid record. The record contains two ' + 'instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. ' + 'If two fields are different but share ' + 'the same id, one field will overwrite the other.', dataID, storageKey, previousValue, fieldValue) : ("TURBOPACK unreachable", undefined);
        }
    };
    _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(prevID, nextID, storageKey) {
        if ("TURBOPACK compile-time truthy", 1) {
            ("TURBOPACK compile-time truthy", 1) ? warning(prevID === undefined || prevID === nextID, 'RelayResponseNormalizer: Invalid record. The record contains ' + 'references to the conflicting field, %s and its id values: %s and %s. ' + 'We need to make sure that the record the field points ' + 'to remains consistent or one field will overwrite the other.', storageKey, prevID, nextID) : ("TURBOPACK unreachable", undefined);
        }
    };
    return RelayResponseNormalizer;
}();
module.exports = {
    normalize: normalize
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/normalizeResponse.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _RelayModernRecord = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)"));
var _RelayRecordSource = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordSource.js [app-ssr] (ecmascript)"));
var _RelayResponseNormalizer = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js [app-ssr] (ecmascript)"));
function normalizeResponse(response, selector, typeName, options) {
    var _response$extensions;
    var data = response.data, errors = response.errors;
    var source = _RelayRecordSource["default"].create();
    var record = _RelayModernRecord["default"].create(selector.dataID, typeName);
    source.set(selector.dataID, record);
    var relayPayload = _RelayResponseNormalizer["default"].normalize(source, selector, data, options, errors);
    return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, relayPayload), {}, {
        isFinal: ((_response$extensions = response.extensions) === null || _response$extensions === void 0 ? void 0 : _response$extensions.is_final) === true
    });
}
module.exports = normalizeResponse;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/readInlineData.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)"), getInlineDataFragment = _require.getInlineDataFragment;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), FRAGMENTS_KEY = _require2.FRAGMENTS_KEY;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function readInlineData(fragment, fragmentRef) {
    var _fragmentRef$FRAGMENT;
    var inlineDataFragment = getInlineDataFragment(fragment);
    if (fragmentRef == null) {
        return fragmentRef;
    }
    !(typeof fragmentRef === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'readInlineData(): Expected an object, got `%s`.', typeof fragmentRef) : ("TURBOPACK unreachable", undefined) : void 0;
    var inlineData = (_fragmentRef$FRAGMENT = fragmentRef[FRAGMENTS_KEY]) === null || _fragmentRef$FRAGMENT === void 0 ? void 0 : _fragmentRef$FRAGMENT[inlineDataFragment.name];
    !(inlineData != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'readInlineData(): Expected fragment `%s` to be spread in the parent ' + 'fragment.', inlineDataFragment.name) : ("TURBOPACK unreachable", undefined) : void 0;
    return inlineData;
}
module.exports = readInlineData;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/generateID.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var id = 100000;
function generateID() {
    return id++;
}
module.exports = generateID;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/wrapNetworkWithLogObserver.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var generateID = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/generateID.js [app-ssr] (ecmascript)");
function wrapNetworkWithLogObserver(env, network) {
    return {
        execute: function execute(params, variables, cacheConfig, uploadables) {
            var networkRequestId = generateID();
            var logObserver = {
                start: function start(subscription) {
                    env.__log({
                        name: 'network.start',
                        networkRequestId: networkRequestId,
                        params: params,
                        variables: variables,
                        cacheConfig: cacheConfig
                    });
                },
                next: function next(response) {
                    env.__log({
                        name: 'network.next',
                        networkRequestId: networkRequestId,
                        response: response
                    });
                },
                error: function error(_error) {
                    env.__log({
                        name: 'network.error',
                        networkRequestId: networkRequestId,
                        error: _error
                    });
                },
                complete: function complete() {
                    env.__log({
                        name: 'network.complete',
                        networkRequestId: networkRequestId
                    });
                },
                unsubscribe: function unsubscribe() {
                    env.__log({
                        name: 'network.unsubscribe',
                        networkRequestId: networkRequestId
                    });
                }
            };
            var logRequestInfo = function logRequestInfo(info) {
                env.__log({
                    name: 'network.info',
                    networkRequestId: networkRequestId,
                    info: info
                });
            };
            return network.execute(params, variables, cacheConfig, uploadables, logRequestInfo)["do"](logObserver);
        }
    };
}
module.exports = wrapNetworkWithLogObserver;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayOperationTracker.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var RelayOperationTracker = /*#__PURE__*/ function() {
    function RelayOperationTracker() {
        this._ownersToPendingOperations = new Map();
        this._pendingOperationsToOwners = new Map();
        this._ownersToPendingPromise = new Map();
    }
    var _proto = RelayOperationTracker.prototype;
    _proto.update = function update(pendingOperation, affectedOwners) {
        if (affectedOwners.size === 0) {
            return;
        }
        var pendingOperationIdentifier = pendingOperation.identifier;
        var newlyAffectedOwnersIdentifier = new Set();
        var _iterator = (0, _createForOfIteratorHelper2["default"])(affectedOwners), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var owner = _step.value;
                var ownerIdentifier = owner.identifier;
                var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);
                if (pendingOperationsAffectingOwner != null) {
                    if (!pendingOperationsAffectingOwner.has(pendingOperationIdentifier)) {
                        pendingOperationsAffectingOwner.set(pendingOperationIdentifier, pendingOperation);
                        newlyAffectedOwnersIdentifier.add(ownerIdentifier);
                    }
                } else {
                    this._ownersToPendingOperations.set(ownerIdentifier, new Map([
                        [
                            pendingOperationIdentifier,
                            pendingOperation
                        ]
                    ]));
                    newlyAffectedOwnersIdentifier.add(ownerIdentifier);
                }
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        if (newlyAffectedOwnersIdentifier.size === 0) {
            return;
        }
        var ownersAffectedByPendingOperation = this._pendingOperationsToOwners.get(pendingOperationIdentifier) || new Set();
        var _iterator2 = (0, _createForOfIteratorHelper2["default"])(newlyAffectedOwnersIdentifier), _step2;
        try {
            for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                var _ownerIdentifier = _step2.value;
                this._resolveOwnerResolvers(_ownerIdentifier);
                ownersAffectedByPendingOperation.add(_ownerIdentifier);
            }
        } catch (err) {
            _iterator2.e(err);
        } finally{
            _iterator2.f();
        }
        this._pendingOperationsToOwners.set(pendingOperationIdentifier, ownersAffectedByPendingOperation);
    };
    _proto.complete = function complete(pendingOperation) {
        var pendingOperationIdentifier = pendingOperation.identifier;
        var affectedOwnersIdentifier = this._pendingOperationsToOwners.get(pendingOperationIdentifier);
        if (affectedOwnersIdentifier == null) {
            return;
        }
        var completedOwnersIdentifier = new Set();
        var updatedOwnersIdentifier = new Set();
        var _iterator3 = (0, _createForOfIteratorHelper2["default"])(affectedOwnersIdentifier), _step3;
        try {
            for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
                var ownerIdentifier = _step3.value;
                var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);
                if (!pendingOperationsAffectingOwner) {
                    continue;
                }
                pendingOperationsAffectingOwner["delete"](pendingOperationIdentifier);
                if (pendingOperationsAffectingOwner.size > 0) {
                    updatedOwnersIdentifier.add(ownerIdentifier);
                } else {
                    completedOwnersIdentifier.add(ownerIdentifier);
                }
            }
        } catch (err) {
            _iterator3.e(err);
        } finally{
            _iterator3.f();
        }
        var _iterator4 = (0, _createForOfIteratorHelper2["default"])(completedOwnersIdentifier), _step4;
        try {
            for(_iterator4.s(); !(_step4 = _iterator4.n()).done;){
                var _ownerIdentifier2 = _step4.value;
                this._resolveOwnerResolvers(_ownerIdentifier2);
                this._ownersToPendingOperations["delete"](_ownerIdentifier2);
            }
        } catch (err) {
            _iterator4.e(err);
        } finally{
            _iterator4.f();
        }
        var _iterator5 = (0, _createForOfIteratorHelper2["default"])(updatedOwnersIdentifier), _step5;
        try {
            for(_iterator5.s(); !(_step5 = _iterator5.n()).done;){
                var _ownerIdentifier3 = _step5.value;
                this._resolveOwnerResolvers(_ownerIdentifier3);
            }
        } catch (err) {
            _iterator5.e(err);
        } finally{
            _iterator5.f();
        }
        this._pendingOperationsToOwners["delete"](pendingOperationIdentifier);
    };
    _proto._resolveOwnerResolvers = function _resolveOwnerResolvers(ownerIdentifier) {
        var promiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);
        if (promiseEntry != null) {
            promiseEntry.resolve();
        }
        this._ownersToPendingPromise["delete"](ownerIdentifier);
    };
    _proto.getPendingOperationsAffectingOwner = function getPendingOperationsAffectingOwner(owner) {
        var ownerIdentifier = owner.identifier;
        var pendingOperationsForOwner = this._ownersToPendingOperations.get(ownerIdentifier);
        if (pendingOperationsForOwner == null || pendingOperationsForOwner.size === 0) {
            return null;
        }
        var cachedPromiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);
        if (cachedPromiseEntry != null) {
            return {
                promise: cachedPromiseEntry.promise,
                pendingOperations: cachedPromiseEntry.pendingOperations
            };
        }
        var resolve;
        var promise = new Promise(function(r) {
            resolve = r;
        });
        !(resolve != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayOperationTracker: Expected resolver to be defined. If you' + 'are seeing this, it is likely a bug in Relay.') : ("TURBOPACK unreachable", undefined) : void 0;
        var pendingOperations = Array.from(pendingOperationsForOwner.values());
        this._ownersToPendingPromise.set(ownerIdentifier, {
            promise: promise,
            resolve: resolve,
            pendingOperations: pendingOperations
        });
        return {
            promise: promise,
            pendingOperations: pendingOperations
        };
    };
    return RelayOperationTracker;
}();
module.exports = RelayOperationTracker;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/registerEnvironmentWithDevTools.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function registerEnvironmentWithDevTools(environment) {
    var _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : undefined;
    var devToolsHook = _global && _global.__RELAY_DEVTOOLS_HOOK__;
    if (devToolsHook) {
        devToolsHook.registerEnvironment(environment);
    }
}
module.exports = registerEnvironmentWithDevTools;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ViewerPattern.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)"), generateClientID = _require.generateClientID;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), ROOT_ID = _require2.ROOT_ID;
var VIEWER_ID = generateClientID(ROOT_ID, 'viewer');
var VIEWER_TYPE = 'Viewer';
module.exports = {
    VIEWER_ID: VIEWER_ID,
    VIEWER_TYPE: VIEWER_TYPE
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/defaultGetDataID.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ViewerPattern.js [app-ssr] (ecmascript)"), VIEWER_ID = _require.VIEWER_ID, VIEWER_TYPE = _require.VIEWER_TYPE;
function defaultGetDataID(fieldValue, typeName) {
    if (typeName === VIEWER_TYPE) {
        return fieldValue.id == null ? VIEWER_ID : fieldValue.id;
    }
    return fieldValue.id;
}
module.exports = defaultGetDataID;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/defaultRelayFieldLogger.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var defaultRelayFieldLogger = function defaultRelayFieldLogger(event) {
    if (("TURBOPACK compile-time value", "development") !== "production" && event.kind === 'missing_field.log') {
        throw new Error('Relay Environment Configuration Error (dev only): `@required(action: LOG)` requires that the Relay Environment be configured with a `relayFieldLogger`.');
    }
};
module.exports = defaultRelayFieldLogger;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getOperation.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)"), REQUEST = _require.REQUEST, SPLIT_OPERATION = _require.SPLIT_OPERATION;
function getOperation(node) {
    switch(node.kind){
        case REQUEST:
            return node.operation;
        case SPLIT_OPERATION:
        default:
            return node;
    }
}
module.exports = getOperation;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayError.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function createError(type, name, messageFormat) {
    for(var _len = arguments.length, messageParams = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++){
        messageParams[_key - 3] = arguments[_key];
    }
    var index = 0;
    var message = messageFormat.replace(/%s/g, function() {
        return String(messageParams[index++]);
    });
    var err = new Error(message);
    var error = Object.assign(err, {
        name: name,
        messageFormat: messageFormat,
        messageParams: messageParams,
        type: type,
        taalOpcodes: [
            2,
            2
        ]
    });
    if (error.stack === undefined) {
        try {
            throw error;
        } catch (_unused) {}
    }
    return error;
}
module.exports = {
    create: function create(name, messageFormat) {
        for(var _len2 = arguments.length, messageParams = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++){
            messageParams[_key2 - 2] = arguments[_key2];
        }
        return createError.apply(void 0, [
            'error',
            name,
            messageFormat
        ].concat(messageParams));
    },
    createWarning: function createWarning(name, messageFormat) {
        for(var _len3 = arguments.length, messageParams = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++){
            messageParams[_key3 - 2] = arguments[_key3];
        }
        return createError.apply(void 0, [
            'warn',
            name,
            messageFormat
        ].concat(messageParams));
    }
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/withDuration.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _window, _window$performance;
var isPerformanceNowAvailable = typeof window !== 'undefined' && typeof ((_window = window) === null || _window === void 0 ? void 0 : (_window$performance = _window.performance) === null || _window$performance === void 0 ? void 0 : _window$performance.now) === 'function';
function currentTimestamp() {
    if (isPerformanceNowAvailable) {
        return window.performance.now();
    }
    return Date.now();
}
function withDuration(cb) {
    var startTime = currentTimestamp();
    var result = cb();
    return [
        currentTimestamp() - startTime,
        result
    ];
}
module.exports = withDuration;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/OperationExecutor.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var _toConsumableArray2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toConsumableArray.js [app-ssr] (ecmascript)"));
var RelayObservable = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayObservable.js [app-ssr] (ecmascript)");
var generateID = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/generateID.js [app-ssr] (ecmascript)");
var getOperation = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getOperation.js [app-ssr] (ecmascript)");
var RelayError = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayError.js [app-ssr] (ecmascript)");
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var stableCopy = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/stableCopy.js [app-ssr] (ecmascript)");
var withDuration = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/withDuration.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)"), generateClientID = _require.generateClientID, generateUniqueClientID = _require.generateUniqueClientID;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js [app-ssr] (ecmascript)"), getLocalVariables = _require2.getLocalVariables;
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernSelector.js [app-ssr] (ecmascript)"), createNormalizationSelector = _require3.createNormalizationSelector, createReaderSelector = _require3.createReaderSelector;
var RelayRecordSource = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordSource.js [app-ssr] (ecmascript)");
var _require4 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), ROOT_TYPE = _require4.ROOT_TYPE, TYPENAME_KEY = _require4.TYPENAME_KEY, getStorageKey = _require4.getStorageKey;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function execute(config) {
    return new Executor(config);
}
var Executor = /*#__PURE__*/ function() {
    function Executor(_ref2) {
        var _this = this;
        var actorIdentifier = _ref2.actorIdentifier, getDataID = _ref2.getDataID, getPublishQueue = _ref2.getPublishQueue, getStore = _ref2.getStore, isClientPayload = _ref2.isClientPayload, operation = _ref2.operation, operationExecutions = _ref2.operationExecutions, operationLoader = _ref2.operationLoader, operationTracker = _ref2.operationTracker, optimisticConfig = _ref2.optimisticConfig, scheduler = _ref2.scheduler, shouldProcessClientComponents = _ref2.shouldProcessClientComponents, sink = _ref2.sink, source = _ref2.source, treatMissingFieldsAsNull = _ref2.treatMissingFieldsAsNull, updater = _ref2.updater, log = _ref2.log, normalizeResponse = _ref2.normalizeResponse;
        this._actorIdentifier = actorIdentifier;
        this._getDataID = getDataID;
        this._treatMissingFieldsAsNull = treatMissingFieldsAsNull;
        this._incrementalPayloadsPending = false;
        this._incrementalResults = new Map();
        this._log = log;
        this._executeId = generateID();
        this._nextSubscriptionId = 0;
        this._operation = operation;
        this._operationExecutions = operationExecutions;
        this._operationLoader = operationLoader;
        this._operationTracker = operationTracker;
        this._operationUpdateEpochs = new Map();
        this._optimisticUpdates = null;
        this._pendingModulePayloadsCount = 0;
        this._getPublishQueue = getPublishQueue;
        this._scheduler = scheduler;
        this._sink = sink;
        this._source = new Map();
        this._state = 'started';
        this._getStore = getStore;
        this._subscriptions = new Map();
        this._updater = updater;
        this._isClientPayload = isClientPayload === true;
        this._isSubscriptionOperation = this._operation.request.node.params.operationKind === 'subscription';
        this._shouldProcessClientComponents = shouldProcessClientComponents;
        this._retainDisposables = new Map();
        this._seenActors = new Set();
        this._completeFns = [];
        this._normalizeResponse = normalizeResponse;
        var id = this._nextSubscriptionId++;
        source.subscribe({
            complete: function complete() {
                return _this._complete(id);
            },
            error: function error(_error2) {
                return _this._error(_error2);
            },
            next: function next(response) {
                try {
                    _this._next(id, response);
                } catch (error) {
                    sink.error(error);
                }
            },
            start: function start(subscription) {
                var _this$_operation$requ;
                _this._start(id, subscription);
                _this._log({
                    name: 'execute.start',
                    executeId: _this._executeId,
                    params: _this._operation.request.node.params,
                    variables: _this._operation.request.variables,
                    cacheConfig: (_this$_operation$requ = _this._operation.request.cacheConfig) !== null && _this$_operation$requ !== void 0 ? _this$_operation$requ : {}
                });
            }
        });
        if (optimisticConfig != null) {
            this._processOptimisticResponse(optimisticConfig.response != null ? {
                data: optimisticConfig.response
            } : null, optimisticConfig.updater, false);
        }
    }
    var _proto = Executor.prototype;
    _proto.cancel = function cancel() {
        var _this2 = this;
        if (this._state === 'completed') {
            return;
        }
        this._state = 'completed';
        this._operationExecutions["delete"](this._operation.request.identifier);
        if (this._subscriptions.size !== 0) {
            this._subscriptions.forEach(function(sub) {
                return sub.unsubscribe();
            });
            this._subscriptions.clear();
        }
        var optimisticUpdates = this._optimisticUpdates;
        if (optimisticUpdates !== null) {
            this._optimisticUpdates = null;
            optimisticUpdates.forEach(function(update) {
                return _this2._getPublishQueueAndSaveActor().revertUpdate(update);
            });
            this._runPublishQueue();
        }
        this._incrementalResults.clear();
        if (this._asyncStoreUpdateDisposable != null) {
            this._asyncStoreUpdateDisposable.dispose();
            this._asyncStoreUpdateDisposable = null;
        }
        this._completeFns = [];
        this._completeOperationTracker();
        this._disposeRetainedData();
    };
    _proto._updateActiveState = function _updateActiveState() {
        var activeState;
        switch(this._state){
            case 'started':
                {
                    activeState = 'active';
                    break;
                }
            case 'loading_incremental':
                {
                    activeState = 'active';
                    break;
                }
            case 'completed':
                {
                    activeState = 'inactive';
                    break;
                }
            case 'loading_final':
                {
                    activeState = this._pendingModulePayloadsCount > 0 ? 'active' : 'inactive';
                    break;
                }
            default:
                this._state;
                ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: invalid executor state.') : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
        }
        this._operationExecutions.set(this._operation.request.identifier, activeState);
    };
    _proto._schedule = function _schedule(task) {
        var _this3 = this;
        var scheduler = this._scheduler;
        if (scheduler != null) {
            var id = this._nextSubscriptionId++;
            RelayObservable.create(function(sink) {
                var cancellationToken = scheduler.schedule(function() {
                    try {
                        task();
                        sink.complete();
                    } catch (error) {
                        sink.error(error);
                    }
                });
                return function() {
                    return scheduler.cancel(cancellationToken);
                };
            }).subscribe({
                complete: function complete() {
                    return _this3._complete(id);
                },
                error: function error(_error3) {
                    return _this3._error(_error3);
                },
                start: function start(subscription) {
                    return _this3._start(id, subscription);
                }
            });
        } else {
            task();
        }
    };
    _proto._complete = function _complete(id) {
        this._subscriptions["delete"](id);
        if (this._subscriptions.size === 0) {
            this.cancel();
            this._sink.complete();
            this._log({
                name: 'execute.complete',
                executeId: this._executeId
            });
        }
    };
    _proto._error = function _error(error) {
        this.cancel();
        this._sink.error(error);
        this._log({
            name: 'execute.error',
            executeId: this._executeId,
            error: error
        });
    };
    _proto._start = function _start(id, subscription) {
        this._subscriptions.set(id, subscription);
        this._updateActiveState();
    };
    _proto._next = function _next(_id, response) {
        var _this4 = this;
        this._schedule(function() {
            var _withDuration = withDuration(function() {
                _this4._handleNext(response);
                _this4._maybeCompleteSubscriptionOperationTracking();
            }), duration = _withDuration[0];
            _this4._log({
                name: 'execute.next',
                executeId: _this4._executeId,
                response: response,
                duration: duration
            });
        });
    };
    _proto._handleErrorResponse = function _handleErrorResponse(responses) {
        var _this5 = this;
        var results = [];
        responses.forEach(function(response) {
            if (response.data === null && response.extensions != null && !response.hasOwnProperty('errors')) {
                return;
            } else if (response.data == null) {
                var errors = response.hasOwnProperty('errors') && response.errors != null ? response.errors : null;
                var messages = errors ? errors.map(function(_ref3) {
                    var message = _ref3.message;
                    return message;
                }).join('\n') : '(No errors)';
                var error = RelayError.create('RelayNetwork', 'No data returned for operation `' + _this5._operation.request.node.params.name + '`, got error(s):\n' + messages + '\n\nSee the error `source` property for more information.');
                error.source = {
                    errors: errors,
                    operation: _this5._operation.request.node,
                    variables: _this5._operation.request.variables
                };
                error.stack;
                throw error;
            } else {
                var responseWithData = response;
                results.push(responseWithData);
            }
        });
        return results;
    };
    _proto._handleOptimisticResponses = function _handleOptimisticResponses(responses) {
        var _response$extensions;
        if (responses.length > 1) {
            if (responses.some(function(responsePart) {
                var _responsePart$extensi;
                return ((_responsePart$extensi = responsePart.extensions) === null || _responsePart$extensi === void 0 ? void 0 : _responsePart$extensi.isOptimistic) === true;
            })) {
                ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Optimistic responses cannot be batched.') : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
            }
            return false;
        }
        var response = responses[0];
        var isOptimistic = ((_response$extensions = response.extensions) === null || _response$extensions === void 0 ? void 0 : _response$extensions.isOptimistic) === true;
        if (isOptimistic && this._state !== 'started') {
            ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: optimistic payload received after server payload.') : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
        }
        if (isOptimistic) {
            this._processOptimisticResponse(response, null, this._treatMissingFieldsAsNull);
            this._sink.next(response);
            return true;
        }
        return false;
    };
    _proto._handleNext = function _handleNext(response) {
        if (this._state === 'completed') {
            return;
        }
        this._seenActors.clear();
        var responses = Array.isArray(response) ? response : [
            response
        ];
        var responsesWithData = this._handleErrorResponse(responses);
        if (responsesWithData.length === 0) {
            var isFinal = responses.some(function(x) {
                var _x$extensions;
                return ((_x$extensions = x.extensions) === null || _x$extensions === void 0 ? void 0 : _x$extensions.is_final) === true;
            });
            if (isFinal) {
                this._state = 'loading_final';
                this._updateActiveState();
                this._incrementalPayloadsPending = false;
            }
            this._sink.next(response);
            return;
        }
        var isOptimistic = this._handleOptimisticResponses(responsesWithData);
        if (isOptimistic) {
            return;
        }
        var _partitionGraphQLResp = partitionGraphQLResponses(responsesWithData), nonIncrementalResponses = _partitionGraphQLResp[0], incrementalResponses = _partitionGraphQLResp[1];
        var hasNonIncrementalResponses = nonIncrementalResponses.length > 0;
        if (hasNonIncrementalResponses) {
            if (this._isSubscriptionOperation) {
                var nextID = generateUniqueClientID();
                this._operation = {
                    request: this._operation.request,
                    fragment: createReaderSelector(this._operation.fragment.node, nextID, this._operation.fragment.variables, this._operation.fragment.owner),
                    root: createNormalizationSelector(this._operation.root.node, nextID, this._operation.root.variables)
                };
            }
            var payloadFollowups = this._processResponses(nonIncrementalResponses);
            this._processPayloadFollowups(payloadFollowups);
        }
        if (incrementalResponses.length > 0) {
            var _payloadFollowups = this._processIncrementalResponses(incrementalResponses);
            this._processPayloadFollowups(_payloadFollowups);
        }
        if (this._isSubscriptionOperation) {
            if (responsesWithData[0].extensions == null) {
                responsesWithData[0].extensions = {
                    __relay_subscription_root_id: this._operation.fragment.dataID
                };
            } else {
                responsesWithData[0].extensions.__relay_subscription_root_id = this._operation.fragment.dataID;
            }
        }
        var updatedOwners = this._runPublishQueue(hasNonIncrementalResponses ? this._operation : undefined);
        if (hasNonIncrementalResponses) {
            if (this._incrementalPayloadsPending) {
                this._retainData();
            }
        }
        this._updateOperationTracker(updatedOwners);
        this._sink.next(response);
    };
    _proto._processOptimisticResponse = function _processOptimisticResponse(response, updater, treatMissingFieldsAsNull) {
        var _this6 = this;
        !(this._optimisticUpdates === null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: environment.execute: only support one optimistic response per ' + 'execute.') : ("TURBOPACK unreachable", undefined) : void 0;
        if (response == null && updater == null) {
            return;
        }
        var optimisticUpdates = [];
        if (response) {
            var payload = this._normalizeResponse(response, this._operation.root, ROOT_TYPE, {
                actorIdentifier: this._actorIdentifier,
                getDataID: this._getDataID,
                path: [],
                shouldProcessClientComponents: this._shouldProcessClientComponents,
                treatMissingFieldsAsNull: treatMissingFieldsAsNull
            });
            validateOptimisticResponsePayload(payload);
            optimisticUpdates.push({
                operation: this._operation,
                payload: payload,
                updater: updater
            });
            this._processOptimisticFollowups(payload, optimisticUpdates);
        } else if (updater) {
            optimisticUpdates.push({
                operation: this._operation,
                payload: {
                    errors: null,
                    fieldPayloads: null,
                    incrementalPlaceholders: null,
                    followupPayloads: null,
                    source: RelayRecordSource.create(),
                    isFinal: false
                },
                updater: updater
            });
        }
        this._optimisticUpdates = optimisticUpdates;
        optimisticUpdates.forEach(function(update) {
            return _this6._getPublishQueueAndSaveActor().applyUpdate(update);
        });
        var updatedOwners = this._runPublishQueue();
        if (RelayFeatureFlags.ENABLE_OPERATION_TRACKER_OPTIMISTIC_UPDATES) {
            this._updateOperationTracker(updatedOwners);
        }
    };
    _proto._processOptimisticFollowups = function _processOptimisticFollowups(payload, optimisticUpdates) {
        if (payload.followupPayloads && payload.followupPayloads.length) {
            var followupPayloads = payload.followupPayloads;
            var _iterator = (0, _createForOfIteratorHelper2["default"])(followupPayloads), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var followupPayload = _step.value;
                    switch(followupPayload.kind){
                        case 'ModuleImportPayload':
                            var operationLoader = this._expectOperationLoader();
                            var operation = operationLoader.get(followupPayload.operationReference);
                            if (operation == null) {
                                this._processAsyncOptimisticModuleImport(followupPayload);
                            } else {
                                var moduleImportOptimisticUpdates = this._processOptimisticModuleImport(operation, followupPayload);
                                optimisticUpdates.push.apply(optimisticUpdates, (0, _toConsumableArray2["default"])(moduleImportOptimisticUpdates));
                            }
                            break;
                        case 'ActorPayload':
                            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'OperationExecutor: Unexpected optimistic ActorPayload. These updates are not supported.') : ("TURBOPACK unreachable", undefined);
                            break;
                        default:
                            followupPayload;
                            ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Unexpected followup kind `%s`. when processing optimistic updates.', followupPayload.kind) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
                    }
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
        }
    };
    _proto._normalizeFollowupPayload = function _normalizeFollowupPayload(followupPayload, normalizationNode) {
        var variables;
        if (normalizationNode.kind === 'SplitOperation' && followupPayload.kind === 'ModuleImportPayload') {
            variables = getLocalVariables(followupPayload.variables, normalizationNode.argumentDefinitions, followupPayload.args);
        } else {
            variables = followupPayload.variables;
        }
        var selector = createNormalizationSelector(normalizationNode, followupPayload.dataID, variables);
        return this._normalizeResponse({
            data: followupPayload.data
        }, selector, followupPayload.typeName, {
            actorIdentifier: this._actorIdentifier,
            getDataID: this._getDataID,
            path: followupPayload.path,
            treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
            shouldProcessClientComponents: this._shouldProcessClientComponents
        });
    };
    _proto._processOptimisticModuleImport = function _processOptimisticModuleImport(normalizationRootNode, moduleImportPayload) {
        var operation = getOperation(normalizationRootNode);
        var optimisticUpdates = [];
        var modulePayload = this._normalizeFollowupPayload(moduleImportPayload, operation);
        validateOptimisticResponsePayload(modulePayload);
        optimisticUpdates.push({
            operation: this._operation,
            payload: modulePayload,
            updater: null
        });
        this._processOptimisticFollowups(modulePayload, optimisticUpdates);
        return optimisticUpdates;
    };
    _proto._processAsyncOptimisticModuleImport = function _processAsyncOptimisticModuleImport(moduleImportPayload) {
        var _this7 = this;
        this._expectOperationLoader().load(moduleImportPayload.operationReference).then(function(operation) {
            if (operation == null || _this7._state !== 'started') {
                return;
            }
            var moduleImportOptimisticUpdates = _this7._processOptimisticModuleImport(operation, moduleImportPayload);
            moduleImportOptimisticUpdates.forEach(function(update) {
                return _this7._getPublishQueueAndSaveActor().applyUpdate(update);
            });
            if (_this7._optimisticUpdates == null) {
                ("TURBOPACK compile-time truthy", 1) ? warning(false, 'OperationExecutor: Unexpected ModuleImport optimistic ' + 'update in operation %s.' + _this7._operation.request.node.params.name) : ("TURBOPACK unreachable", undefined);
            } else {
                var _this$_optimisticUpda;
                (_this$_optimisticUpda = _this7._optimisticUpdates).push.apply(_this$_optimisticUpda, (0, _toConsumableArray2["default"])(moduleImportOptimisticUpdates));
                _this7._runPublishQueue();
            }
        });
    };
    _proto._processResponses = function _processResponses(responses) {
        var _this8 = this;
        if (this._optimisticUpdates !== null) {
            this._optimisticUpdates.forEach(function(update) {
                _this8._getPublishQueueAndSaveActor().revertUpdate(update);
            });
            this._optimisticUpdates = null;
        }
        this._incrementalPayloadsPending = false;
        this._incrementalResults.clear();
        this._source.clear();
        return responses.map(function(payloadPart) {
            var relayPayload = _this8._normalizeResponse(payloadPart, _this8._operation.root, ROOT_TYPE, {
                actorIdentifier: _this8._actorIdentifier,
                getDataID: _this8._getDataID,
                path: [],
                treatMissingFieldsAsNull: _this8._treatMissingFieldsAsNull,
                shouldProcessClientComponents: _this8._shouldProcessClientComponents
            });
            _this8._getPublishQueueAndSaveActor().commitPayload(_this8._operation, relayPayload, _this8._updater);
            return relayPayload;
        });
    };
    _proto._processPayloadFollowups = function _processPayloadFollowups(payloads) {
        var _this9 = this;
        if (this._state === 'completed') {
            return;
        }
        payloads.forEach(function(payload) {
            var incrementalPlaceholders = payload.incrementalPlaceholders, followupPayloads = payload.followupPayloads, isFinal = payload.isFinal;
            _this9._state = isFinal ? 'loading_final' : 'loading_incremental';
            _this9._updateActiveState();
            if (isFinal) {
                _this9._incrementalPayloadsPending = false;
            }
            if (followupPayloads && followupPayloads.length !== 0) {
                followupPayloads.forEach(function(followupPayload) {
                    var _followupPayload$acto;
                    var prevActorIdentifier = _this9._actorIdentifier;
                    _this9._actorIdentifier = (_followupPayload$acto = followupPayload.actorIdentifier) !== null && _followupPayload$acto !== void 0 ? _followupPayload$acto : _this9._actorIdentifier;
                    _this9._processFollowupPayload(followupPayload);
                    _this9._actorIdentifier = prevActorIdentifier;
                });
            }
            if (incrementalPlaceholders && incrementalPlaceholders.length !== 0) {
                _this9._incrementalPayloadsPending = _this9._state !== 'loading_final';
                incrementalPlaceholders.forEach(function(incrementalPlaceholder) {
                    var _incrementalPlacehold;
                    var prevActorIdentifier = _this9._actorIdentifier;
                    _this9._actorIdentifier = (_incrementalPlacehold = incrementalPlaceholder.actorIdentifier) !== null && _incrementalPlacehold !== void 0 ? _incrementalPlacehold : _this9._actorIdentifier;
                    _this9._processIncrementalPlaceholder(payload, incrementalPlaceholder);
                    _this9._actorIdentifier = prevActorIdentifier;
                });
                if (_this9._isClientPayload || _this9._state === 'loading_final') {
                    ("TURBOPACK compile-time truthy", 1) ? warning(_this9._isClientPayload, 'RelayModernEnvironment: Operation `%s` contains @defer/@stream ' + 'directives but was executed in non-streaming mode. See ' + 'https://fburl.com/relay-incremental-delivery-non-streaming-warning.', _this9._operation.request.node.params.name) : ("TURBOPACK unreachable", undefined);
                    var relayPayloads = [];
                    incrementalPlaceholders.forEach(function(placeholder) {
                        if (placeholder.kind === 'defer') {
                            relayPayloads.push(_this9._processDeferResponse(placeholder.label, placeholder.path, placeholder, {
                                data: placeholder.data
                            }));
                        }
                    });
                    if (relayPayloads.length > 0) {
                        _this9._processPayloadFollowups(relayPayloads);
                    }
                }
            }
        });
    };
    _proto._maybeCompleteSubscriptionOperationTracking = function _maybeCompleteSubscriptionOperationTracking() {
        if (!this._isSubscriptionOperation) {
            return;
        }
        if (this._pendingModulePayloadsCount === 0 && this._incrementalPayloadsPending === false) {
            this._completeOperationTracker();
        }
    };
    _proto._processFollowupPayload = function _processFollowupPayload(followupPayload) {
        var _this10 = this;
        switch(followupPayload.kind){
            case 'ModuleImportPayload':
                var operationLoader = this._expectOperationLoader();
                var node = operationLoader.get(followupPayload.operationReference);
                if (node != null) {
                    this._processFollowupPayloadWithNormalizationNode(followupPayload, getOperation(node));
                } else {
                    var id = this._nextSubscriptionId++;
                    this._pendingModulePayloadsCount++;
                    var decrementPendingCount = function decrementPendingCount() {
                        _this10._pendingModulePayloadsCount--;
                        _this10._maybeCompleteSubscriptionOperationTracking();
                    };
                    var networkObservable = RelayObservable.from(new Promise(function(resolve, reject) {
                        operationLoader.load(followupPayload.operationReference).then(resolve, reject);
                    }));
                    RelayObservable.create(function(sink) {
                        var cancellationToken;
                        var subscription = networkObservable.subscribe({
                            next: function next(loadedNode) {
                                if (loadedNode != null) {
                                    var publishModuleImportPayload = function publishModuleImportPayload() {
                                        try {
                                            var operation = getOperation(loadedNode);
                                            var batchAsyncModuleUpdatesFN = RelayFeatureFlags.BATCH_ASYNC_MODULE_UPDATES_FN;
                                            var shouldScheduleAsyncStoreUpdate = batchAsyncModuleUpdatesFN != null && _this10._pendingModulePayloadsCount > 1;
                                            var _withDuration2 = withDuration(function() {
                                                _this10._handleFollowupPayload(followupPayload, operation);
                                                if (shouldScheduleAsyncStoreUpdate) {
                                                    _this10._scheduleAsyncStoreUpdate(batchAsyncModuleUpdatesFN, sink.complete);
                                                } else {
                                                    var updatedOwners = _this10._runPublishQueue();
                                                    _this10._updateOperationTracker(updatedOwners);
                                                }
                                            }), duration = _withDuration2[0];
                                            _this10._log({
                                                name: 'execute.async.module',
                                                executeId: _this10._executeId,
                                                operationName: operation.name,
                                                duration: duration
                                            });
                                            if (!shouldScheduleAsyncStoreUpdate) {
                                                sink.complete();
                                            }
                                        } catch (error) {
                                            sink.error(error);
                                        }
                                    };
                                    var scheduler = _this10._scheduler;
                                    if (scheduler == null) {
                                        publishModuleImportPayload();
                                    } else {
                                        cancellationToken = scheduler.schedule(publishModuleImportPayload);
                                    }
                                } else {
                                    sink.complete();
                                }
                            },
                            error: sink.error
                        });
                        return function() {
                            subscription.unsubscribe();
                            if (_this10._scheduler != null && cancellationToken != null) {
                                _this10._scheduler.cancel(cancellationToken);
                            }
                        };
                    }).subscribe({
                        complete: function complete() {
                            _this10._complete(id);
                            decrementPendingCount();
                        },
                        error: function error(_error4) {
                            _this10._error(_error4);
                            decrementPendingCount();
                        },
                        start: function start(subscription) {
                            return _this10._start(id, subscription);
                        }
                    });
                }
                break;
            case 'ActorPayload':
                this._processFollowupPayloadWithNormalizationNode(followupPayload, followupPayload.node);
                break;
            default:
                followupPayload;
                ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Unexpected followup kind `%s`.', followupPayload.kind) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
        }
    };
    _proto._processFollowupPayloadWithNormalizationNode = function _processFollowupPayloadWithNormalizationNode(followupPayload, normalizationNode) {
        this._handleFollowupPayload(followupPayload, normalizationNode);
        this._maybeCompleteSubscriptionOperationTracking();
    };
    _proto._handleFollowupPayload = function _handleFollowupPayload(followupPayload, normalizationNode) {
        var relayPayload = this._normalizeFollowupPayload(followupPayload, normalizationNode);
        this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload);
        this._processPayloadFollowups([
            relayPayload
        ]);
    };
    _proto._processIncrementalPlaceholder = function _processIncrementalPlaceholder(relayPayload, placeholder) {
        var _relayPayload$fieldPa;
        var label = placeholder.label, path = placeholder.path;
        var pathKey = path.map(String).join('.');
        var resultForLabel = this._incrementalResults.get(label);
        if (resultForLabel == null) {
            resultForLabel = new Map();
            this._incrementalResults.set(label, resultForLabel);
        }
        var resultForPath = resultForLabel.get(pathKey);
        var pendingResponses = resultForPath != null && resultForPath.kind === 'response' ? resultForPath.responses : null;
        resultForLabel.set(pathKey, {
            kind: 'placeholder',
            placeholder: placeholder
        });
        var parentID;
        if (placeholder.kind === 'stream') {
            parentID = placeholder.parentID;
        } else if (placeholder.kind === 'defer') {
            parentID = placeholder.selector.dataID;
        } else {
            placeholder;
            ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Unsupported incremental placeholder kind `%s`.', placeholder.kind) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
        }
        var parentRecord = relayPayload.source.get(parentID);
        var parentPayloads = ((_relayPayload$fieldPa = relayPayload.fieldPayloads) !== null && _relayPayload$fieldPa !== void 0 ? _relayPayload$fieldPa : []).filter(function(fieldPayload) {
            var fieldID = generateClientID(fieldPayload.dataID, fieldPayload.fieldKey);
            return fieldPayload.dataID === parentID || fieldID === parentID;
        });
        !(parentRecord != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected record `%s` to exist.', parentID) : ("TURBOPACK unreachable", undefined) : void 0;
        var nextParentRecord;
        var nextParentPayloads;
        var previousParentEntry = this._source.get(parentID);
        if (previousParentEntry != null) {
            nextParentRecord = RelayModernRecord.update(previousParentEntry.record, parentRecord);
            var handlePayloads = new Map();
            var dedupePayload = function dedupePayload(payload) {
                var key = stableStringify(payload);
                handlePayloads.set(key, payload);
            };
            previousParentEntry.fieldPayloads.forEach(dedupePayload);
            parentPayloads.forEach(dedupePayload);
            nextParentPayloads = Array.from(handlePayloads.values());
        } else {
            nextParentRecord = parentRecord;
            nextParentPayloads = parentPayloads;
        }
        this._source.set(parentID, {
            record: nextParentRecord,
            fieldPayloads: nextParentPayloads
        });
        if (pendingResponses != null) {
            var payloadFollowups = this._processIncrementalResponses(pendingResponses);
            this._processPayloadFollowups(payloadFollowups);
        }
    };
    _proto._processIncrementalResponses = function _processIncrementalResponses(incrementalResponses) {
        var _this11 = this;
        var relayPayloads = [];
        incrementalResponses.forEach(function(incrementalResponse) {
            var label = incrementalResponse.label, path = incrementalResponse.path, response = incrementalResponse.response;
            var resultForLabel = _this11._incrementalResults.get(label);
            if (resultForLabel == null) {
                resultForLabel = new Map();
                _this11._incrementalResults.set(label, resultForLabel);
            }
            if (label.indexOf('$defer$') !== -1) {
                var pathKey = path.map(String).join('.');
                var resultForPath = resultForLabel.get(pathKey);
                if (resultForPath == null) {
                    resultForPath = {
                        kind: 'response',
                        responses: [
                            incrementalResponse
                        ]
                    };
                    resultForLabel.set(pathKey, resultForPath);
                    return;
                } else if (resultForPath.kind === 'response') {
                    resultForPath.responses.push(incrementalResponse);
                    return;
                }
                var placeholder = resultForPath.placeholder;
                !(placeholder.kind === 'defer') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected data for path `%s` for label `%s` ' + 'to be data for @defer, was `@%s`.', pathKey, label, placeholder.kind) : ("TURBOPACK unreachable", undefined) : void 0;
                relayPayloads.push(_this11._processDeferResponse(label, path, placeholder, response));
            } else {
                var _pathKey = path.slice(0, -2).map(String).join('.');
                var _resultForPath = resultForLabel.get(_pathKey);
                if (_resultForPath == null) {
                    _resultForPath = {
                        kind: 'response',
                        responses: [
                            incrementalResponse
                        ]
                    };
                    resultForLabel.set(_pathKey, _resultForPath);
                    return;
                } else if (_resultForPath.kind === 'response') {
                    _resultForPath.responses.push(incrementalResponse);
                    return;
                }
                var _placeholder = _resultForPath.placeholder;
                !(_placeholder.kind === 'stream') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected data for path `%s` for label `%s` ' + 'to be data for @stream, was `@%s`.', _pathKey, label, _placeholder.kind) : ("TURBOPACK unreachable", undefined) : void 0;
                relayPayloads.push(_this11._processStreamResponse(label, path, _placeholder, response));
            }
        });
        return relayPayloads;
    };
    _proto._processDeferResponse = function _processDeferResponse(label, path, placeholder, response) {
        var _placeholder$actorIde;
        var parentID = placeholder.selector.dataID;
        var prevActorIdentifier = this._actorIdentifier;
        this._actorIdentifier = (_placeholder$actorIde = placeholder.actorIdentifier) !== null && _placeholder$actorIde !== void 0 ? _placeholder$actorIde : this._actorIdentifier;
        var relayPayload = this._normalizeResponse(response, placeholder.selector, placeholder.typeName, {
            actorIdentifier: this._actorIdentifier,
            getDataID: this._getDataID,
            path: placeholder.path,
            treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
            shouldProcessClientComponents: this._shouldProcessClientComponents
        });
        this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload);
        var parentEntry = this._source.get(parentID);
        !(parentEntry != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected the parent record `%s` for @defer ' + 'data to exist.', parentID) : ("TURBOPACK unreachable", undefined) : void 0;
        var fieldPayloads = parentEntry.fieldPayloads;
        if (fieldPayloads.length !== 0) {
            var _response$extensions2;
            var handleFieldsRelayPayload = {
                errors: null,
                fieldPayloads: fieldPayloads,
                incrementalPlaceholders: null,
                followupPayloads: null,
                source: RelayRecordSource.create(),
                isFinal: ((_response$extensions2 = response.extensions) === null || _response$extensions2 === void 0 ? void 0 : _response$extensions2.is_final) === true
            };
            this._getPublishQueueAndSaveActor().commitPayload(this._operation, handleFieldsRelayPayload);
        }
        this._actorIdentifier = prevActorIdentifier;
        return relayPayload;
    };
    _proto._processStreamResponse = function _processStreamResponse(label, path, placeholder, response) {
        var parentID = placeholder.parentID, node = placeholder.node, variables = placeholder.variables, actorIdentifier = placeholder.actorIdentifier;
        var prevActorIdentifier = this._actorIdentifier;
        this._actorIdentifier = actorIdentifier !== null && actorIdentifier !== void 0 ? actorIdentifier : this._actorIdentifier;
        var field = node.selections[0];
        !(field != null && field.kind === 'LinkedField' && field.plural === true) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected @stream to be used on a plural field.') : ("TURBOPACK unreachable", undefined) : void 0;
        var _this$_normalizeStrea = this._normalizeStreamItem(response, parentID, field, variables, path, placeholder.path), fieldPayloads = _this$_normalizeStrea.fieldPayloads, itemID = _this$_normalizeStrea.itemID, itemIndex = _this$_normalizeStrea.itemIndex, prevIDs = _this$_normalizeStrea.prevIDs, relayPayload = _this$_normalizeStrea.relayPayload, storageKey = _this$_normalizeStrea.storageKey;
        this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload, function(store) {
            var currentParentRecord = store.get(parentID);
            if (currentParentRecord == null) {
                return;
            }
            var currentItems = currentParentRecord.getLinkedRecords(storageKey);
            if (currentItems == null) {
                return;
            }
            if (currentItems.length !== prevIDs.length || currentItems.some(function(currentItem, index) {
                return prevIDs[index] !== (currentItem && currentItem.getDataID());
            })) {
                return;
            }
            var nextItems = (0, _toConsumableArray2["default"])(currentItems);
            nextItems[itemIndex] = store.get(itemID);
            currentParentRecord.setLinkedRecords(nextItems, storageKey);
        });
        if (fieldPayloads.length !== 0) {
            var handleFieldsRelayPayload = {
                errors: null,
                fieldPayloads: fieldPayloads,
                incrementalPlaceholders: null,
                followupPayloads: null,
                source: RelayRecordSource.create(),
                isFinal: false
            };
            this._getPublishQueueAndSaveActor().commitPayload(this._operation, handleFieldsRelayPayload);
        }
        this._actorIdentifier = prevActorIdentifier;
        return relayPayload;
    };
    _proto._normalizeStreamItem = function _normalizeStreamItem(response, parentID, field, variables, path, normalizationPath) {
        var _field$alias, _field$concreteType, _ref, _this$_getDataID;
        var data = response.data;
        !(typeof data === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected the GraphQL @stream payload `data` ' + 'value to be an object.') : ("TURBOPACK unreachable", undefined) : void 0;
        var responseKey = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;
        var storageKey = getStorageKey(field, variables);
        var parentEntry = this._source.get(parentID);
        !(parentEntry != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected the parent record `%s` for @stream ' + 'data to exist.', parentID) : ("TURBOPACK unreachable", undefined) : void 0;
        var parentRecord = parentEntry.record, fieldPayloads = parentEntry.fieldPayloads;
        var prevIDs = RelayModernRecord.getLinkedRecordIDs(parentRecord, storageKey);
        !(prevIDs != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected record `%s` to have fetched field ' + '`%s` with @stream.', parentID, field.name) : ("TURBOPACK unreachable", undefined) : void 0;
        var finalPathEntry = path[path.length - 1];
        var itemIndex = parseInt(finalPathEntry, 10);
        !(itemIndex === finalPathEntry && itemIndex >= 0) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected path for @stream to end in a ' + 'positive integer index, got `%s`', finalPathEntry) : ("TURBOPACK unreachable", undefined) : void 0;
        var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : data[TYPENAME_KEY];
        !(typeof typeName === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected @stream field `%s` to have a ' + '__typename.', field.name) : ("TURBOPACK unreachable", undefined) : void 0;
        var itemID = (_ref = (_this$_getDataID = this._getDataID(data, typeName)) !== null && _this$_getDataID !== void 0 ? _this$_getDataID : prevIDs === null || prevIDs === void 0 ? void 0 : prevIDs[itemIndex]) !== null && _ref !== void 0 ? _ref : generateClientID(parentID, storageKey, itemIndex);
        !(typeof itemID === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : ("TURBOPACK unreachable", undefined) : void 0;
        var selector = createNormalizationSelector(field, itemID, variables);
        var nextParentRecord = RelayModernRecord.clone(parentRecord);
        var nextIDs = (0, _toConsumableArray2["default"])(prevIDs);
        nextIDs[itemIndex] = itemID;
        RelayModernRecord.setLinkedRecordIDs(nextParentRecord, storageKey, nextIDs);
        this._source.set(parentID, {
            record: nextParentRecord,
            fieldPayloads: fieldPayloads
        });
        var relayPayload = this._normalizeResponse(response, selector, typeName, {
            actorIdentifier: this._actorIdentifier,
            getDataID: this._getDataID,
            path: [].concat((0, _toConsumableArray2["default"])(normalizationPath), [
                responseKey,
                String(itemIndex)
            ]),
            treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
            shouldProcessClientComponents: this._shouldProcessClientComponents
        });
        return {
            fieldPayloads: fieldPayloads,
            itemID: itemID,
            itemIndex: itemIndex,
            prevIDs: prevIDs,
            relayPayload: relayPayload,
            storageKey: storageKey
        };
    };
    _proto._scheduleAsyncStoreUpdate = function _scheduleAsyncStoreUpdate(scheduleFn, completeFn) {
        var _this12 = this;
        this._completeFns.push(completeFn);
        if (this._asyncStoreUpdateDisposable != null) {
            return;
        }
        this._asyncStoreUpdateDisposable = scheduleFn(function() {
            _this12._asyncStoreUpdateDisposable = null;
            var updatedOwners = _this12._runPublishQueue();
            _this12._updateOperationTracker(updatedOwners);
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(_this12._completeFns), _step2;
            try {
                for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                    var complete = _step2.value;
                    complete();
                }
            } catch (err) {
                _iterator2.e(err);
            } finally{
                _iterator2.f();
            }
            _this12._completeFns = [];
        });
    };
    _proto._updateOperationTracker = function _updateOperationTracker(updatedOwners) {
        if (updatedOwners != null && updatedOwners.length > 0) {
            this._operationTracker.update(this._operation.request, new Set(updatedOwners));
        }
    };
    _proto._completeOperationTracker = function _completeOperationTracker() {
        this._operationTracker.complete(this._operation.request);
    };
    _proto._getPublishQueueAndSaveActor = function _getPublishQueueAndSaveActor() {
        this._seenActors.add(this._actorIdentifier);
        return this._getPublishQueue(this._actorIdentifier);
    };
    _proto._getActorsToVisit = function _getActorsToVisit() {
        if (this._seenActors.size === 0) {
            return new Set([
                this._actorIdentifier
            ]);
        } else {
            return this._seenActors;
        }
    };
    _proto._runPublishQueue = function _runPublishQueue(operation) {
        var updatedOwners = new Set();
        var _iterator3 = (0, _createForOfIteratorHelper2["default"])(this._getActorsToVisit()), _step3;
        try {
            for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
                var actorIdentifier = _step3.value;
                var owners = this._getPublishQueue(actorIdentifier).run(operation);
                owners.forEach(function(owner) {
                    return updatedOwners.add(owner);
                });
            }
        } catch (err) {
            _iterator3.e(err);
        } finally{
            _iterator3.f();
        }
        return Array.from(updatedOwners);
    };
    _proto._retainData = function _retainData() {
        var _iterator4 = (0, _createForOfIteratorHelper2["default"])(this._getActorsToVisit()), _step4;
        try {
            for(_iterator4.s(); !(_step4 = _iterator4.n()).done;){
                var actorIdentifier = _step4.value;
                if (!this._retainDisposables.has(actorIdentifier)) {
                    this._retainDisposables.set(actorIdentifier, this._getStore(actorIdentifier).retain(this._operation));
                }
            }
        } catch (err) {
            _iterator4.e(err);
        } finally{
            _iterator4.f();
        }
    };
    _proto._disposeRetainedData = function _disposeRetainedData() {
        var _iterator5 = (0, _createForOfIteratorHelper2["default"])(this._retainDisposables.values()), _step5;
        try {
            for(_iterator5.s(); !(_step5 = _iterator5.n()).done;){
                var disposable = _step5.value;
                disposable.dispose();
            }
        } catch (err) {
            _iterator5.e(err);
        } finally{
            _iterator5.f();
        }
        this._retainDisposables.clear();
    };
    _proto._expectOperationLoader = function _expectOperationLoader() {
        var operationLoader = this._operationLoader;
        !operationLoader ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: Expected an operationLoader to be ' + 'configured when using `@match`.') : ("TURBOPACK unreachable", undefined) : void 0;
        return operationLoader;
    };
    return Executor;
}();
function partitionGraphQLResponses(responses) {
    var nonIncrementalResponses = [];
    var incrementalResponses = [];
    responses.forEach(function(response) {
        if (response.path != null || response.label != null) {
            var label = response.label, path = response.path;
            if (label == null || path == null) {
                ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: invalid incremental payload, expected ' + '`path` and `label` to either both be null/undefined, or ' + '`path` to be an `Array<string | number>` and `label` to be a ' + '`string`.') : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
            }
            incrementalResponses.push({
                label: label,
                path: path,
                response: response
            });
        } else {
            nonIncrementalResponses.push(response);
        }
    });
    return [
        nonIncrementalResponses,
        incrementalResponses
    ];
}
function stableStringify(value) {
    var _JSON$stringify;
    return (_JSON$stringify = JSON.stringify(stableCopy(value))) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : '';
}
function validateOptimisticResponsePayload(payload) {
    var incrementalPlaceholders = payload.incrementalPlaceholders;
    if (incrementalPlaceholders != null && incrementalPlaceholders.length !== 0) {
        ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'OperationExecutor: optimistic responses cannot be returned ' + 'for operations that use incremental data delivery (@defer, ' + '@stream, and @stream_connection).') : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
    }
}
module.exports = {
    execute: execute
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayRecordSourceMutator.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordState.js [app-ssr] (ecmascript)"), EXISTENT = _require.EXISTENT;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var RelayRecordSourceMutator = /*#__PURE__*/ function() {
    function RelayRecordSourceMutator(base, sink) {
        this.__sources = [
            sink,
            base
        ];
        this._base = base;
        this._sink = sink;
    }
    var _proto = RelayRecordSourceMutator.prototype;
    _proto.unstable_getRawRecordWithChanges = function unstable_getRawRecordWithChanges(dataID) {
        var baseRecord = this._base.get(dataID);
        var sinkRecord = this._sink.get(dataID);
        if (sinkRecord === undefined) {
            if (baseRecord == null) {
                return baseRecord;
            }
            var nextRecord = RelayModernRecord.clone(baseRecord);
            if ("TURBOPACK compile-time truthy", 1) {
                RelayModernRecord.freeze(nextRecord);
            }
            return nextRecord;
        } else if (sinkRecord === null) {
            return null;
        } else if (baseRecord != null) {
            var _nextRecord = RelayModernRecord.update(baseRecord, sinkRecord);
            if ("TURBOPACK compile-time truthy", 1) {
                if (_nextRecord !== baseRecord) {
                    RelayModernRecord.freeze(_nextRecord);
                }
            }
            return _nextRecord;
        } else {
            var _nextRecord2 = RelayModernRecord.clone(sinkRecord);
            if ("TURBOPACK compile-time truthy", 1) {
                RelayModernRecord.freeze(_nextRecord2);
            }
            return _nextRecord2;
        }
    };
    _proto._getSinkRecord = function _getSinkRecord(dataID) {
        var sinkRecord = this._sink.get(dataID);
        if (!sinkRecord) {
            var baseRecord = this._base.get(dataID);
            !baseRecord ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordSourceMutator: Cannot modify non-existent record `%s`.', dataID) : ("TURBOPACK unreachable", undefined) : void 0;
            sinkRecord = RelayModernRecord.create(dataID, RelayModernRecord.getType(baseRecord));
            this._sink.set(dataID, sinkRecord);
        }
        return sinkRecord;
    };
    _proto.copyFields = function copyFields(sourceID, sinkID) {
        var sinkSource = this._sink.get(sourceID);
        var baseSource = this._base.get(sourceID);
        !(sinkSource || baseSource) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordSourceMutator#copyFields(): Cannot copy fields from ' + 'non-existent record `%s`.', sourceID) : ("TURBOPACK unreachable", undefined) : void 0;
        var sink = this._getSinkRecord(sinkID);
        if (baseSource) {
            RelayModernRecord.copyFields(baseSource, sink);
        }
        if (sinkSource) {
            RelayModernRecord.copyFields(sinkSource, sink);
        }
    };
    _proto.copyFieldsFromRecord = function copyFieldsFromRecord(record, sinkID) {
        var sink = this._getSinkRecord(sinkID);
        RelayModernRecord.copyFields(record, sink);
    };
    _proto.create = function create(dataID, typeName) {
        !(this._base.getStatus(dataID) !== EXISTENT && this._sink.getStatus(dataID) !== EXISTENT) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordSourceMutator#create(): Cannot create a record with id ' + '`%s`, this record already exists.', dataID) : ("TURBOPACK unreachable", undefined) : void 0;
        var record = RelayModernRecord.create(dataID, typeName);
        this._sink.set(dataID, record);
    };
    _proto["delete"] = function _delete(dataID) {
        this._sink["delete"](dataID);
    };
    _proto.getStatus = function getStatus(dataID) {
        return this._sink.has(dataID) ? this._sink.getStatus(dataID) : this._base.getStatus(dataID);
    };
    _proto.getType = function getType(dataID) {
        for(var ii = 0; ii < this.__sources.length; ii++){
            var record = this.__sources[ii].get(dataID);
            if (record) {
                return RelayModernRecord.getType(record);
            } else if (record === null) {
                return null;
            }
        }
    };
    _proto.getValue = function getValue(dataID, storageKey) {
        for(var ii = 0; ii < this.__sources.length; ii++){
            var record = this.__sources[ii].get(dataID);
            if (record) {
                var value = RelayModernRecord.getValue(record, storageKey);
                if (value !== undefined) {
                    return value;
                }
            } else if (record === null) {
                return null;
            }
        }
    };
    _proto.setValue = function setValue(dataID, storageKey, value) {
        var sinkRecord = this._getSinkRecord(dataID);
        RelayModernRecord.setValue(sinkRecord, storageKey, value);
    };
    _proto.getLinkedRecordID = function getLinkedRecordID(dataID, storageKey) {
        for(var ii = 0; ii < this.__sources.length; ii++){
            var record = this.__sources[ii].get(dataID);
            if (record) {
                var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
                if (linkedID !== undefined) {
                    return linkedID;
                }
            } else if (record === null) {
                return null;
            }
        }
    };
    _proto.setLinkedRecordID = function setLinkedRecordID(dataID, storageKey, linkedID) {
        var sinkRecord = this._getSinkRecord(dataID);
        RelayModernRecord.setLinkedRecordID(sinkRecord, storageKey, linkedID);
    };
    _proto.getLinkedRecordIDs = function getLinkedRecordIDs(dataID, storageKey) {
        for(var ii = 0; ii < this.__sources.length; ii++){
            var record = this.__sources[ii].get(dataID);
            if (record) {
                var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
                if (linkedIDs !== undefined) {
                    return linkedIDs;
                }
            } else if (record === null) {
                return null;
            }
        }
    };
    _proto.setLinkedRecordIDs = function setLinkedRecordIDs(dataID, storageKey, linkedIDs) {
        var sinkRecord = this._getSinkRecord(dataID);
        RelayModernRecord.setLinkedRecordIDs(sinkRecord, storageKey, linkedIDs);
    };
    return RelayRecordSourceMutator;
}();
module.exports = RelayRecordSourceMutator;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/createUpdatableProxy.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), getArgumentValues = _require.getArgumentValues;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)"), ACTOR_CHANGE = _require2.ACTOR_CHANGE, ALIASED_FRAGMENT_SPREAD = _require2.ALIASED_FRAGMENT_SPREAD, ALIASED_INLINE_FRAGMENT_SPREAD = _require2.ALIASED_INLINE_FRAGMENT_SPREAD, CLIENT_EDGE_TO_CLIENT_OBJECT = _require2.CLIENT_EDGE_TO_CLIENT_OBJECT, CLIENT_EDGE_TO_SERVER_OBJECT = _require2.CLIENT_EDGE_TO_SERVER_OBJECT, CLIENT_EXTENSION = _require2.CLIENT_EXTENSION, CONDITION = _require2.CONDITION, DEFER = _require2.DEFER, FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD, INLINE_DATA_FRAGMENT_SPREAD = _require2.INLINE_DATA_FRAGMENT_SPREAD, INLINE_FRAGMENT = _require2.INLINE_FRAGMENT, LINKED_FIELD = _require2.LINKED_FIELD, MODULE_IMPORT = _require2.MODULE_IMPORT, RELAY_LIVE_RESOLVER = _require2.RELAY_LIVE_RESOLVER, RELAY_RESOLVER = _require2.RELAY_RESOLVER, REQUIRED_FIELD = _require2.REQUIRED_FIELD, SCALAR_FIELD = _require2.SCALAR_FIELD, STREAM = _require2.STREAM;
var nonUpdatableKeys = [
    'id',
    '__id',
    '__typename',
    'js'
];
function createUpdatableProxy(updatableProxyRootRecord, variables, selections, recordSourceProxy, missingFieldHandlers) {
    var mutableUpdatableProxy = {};
    updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy, missingFieldHandlers);
    if ("TURBOPACK compile-time truthy", 1) {
        Object.freeze(mutableUpdatableProxy);
    }
    return mutableUpdatableProxy;
}
function updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy, missingFieldHandlers) {
    var _selection$alias3;
    var _iterator = (0, _createForOfIteratorHelper2["default"])(selections), _step;
    try {
        var _loop = function _loop() {
            var selection = _step.value;
            switch(selection.kind){
                case LINKED_FIELD:
                    if (selection.plural) {
                        Object.defineProperty(mutableUpdatableProxy, (_selection$alias = selection.alias) !== null && _selection$alias !== void 0 ? _selection$alias : selection.name, {
                            get: createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers),
                            set: createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)
                        });
                    } else {
                        Object.defineProperty(mutableUpdatableProxy, (_selection$alias2 = selection.alias) !== null && _selection$alias2 !== void 0 ? _selection$alias2 : selection.name, {
                            get: createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers),
                            set: createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)
                        });
                    }
                    break;
                case SCALAR_FIELD:
                    var scalarFieldName = (_selection$alias3 = selection.alias) !== null && _selection$alias3 !== void 0 ? _selection$alias3 : selection.name;
                    Object.defineProperty(mutableUpdatableProxy, scalarFieldName, {
                        get: function get() {
                            var _selection$args;
                            var newVariables = getArgumentValues((_selection$args = selection.args) !== null && _selection$args !== void 0 ? _selection$args : [], variables);
                            var value = updatableProxyRootRecord.getValue(selection.name, newVariables);
                            if (value == null) {
                                value = getScalarUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers);
                            }
                            return value;
                        },
                        set: nonUpdatableKeys.includes(selection.name) ? undefined : function(newValue) {
                            var _selection$args2;
                            var newVariables = getArgumentValues((_selection$args2 = selection.args) !== null && _selection$args2 !== void 0 ? _selection$args2 : [], variables);
                            updatableProxyRootRecord.setValue__UNSAFE(newValue, selection.name, newVariables);
                        }
                    });
                    break;
                case INLINE_FRAGMENT:
                    if (updatableProxyRootRecord.getType() === selection.type) {
                        updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
                    }
                    break;
                case CLIENT_EXTENSION:
                    updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
                    break;
                case FRAGMENT_SPREAD:
                    break;
                case CONDITION:
                case ACTOR_CHANGE:
                case ALIASED_FRAGMENT_SPREAD:
                case INLINE_DATA_FRAGMENT_SPREAD:
                case ALIASED_INLINE_FRAGMENT_SPREAD:
                case CLIENT_EDGE_TO_CLIENT_OBJECT:
                case CLIENT_EDGE_TO_SERVER_OBJECT:
                case DEFER:
                case MODULE_IMPORT:
                case RELAY_LIVE_RESOLVER:
                case REQUIRED_FIELD:
                case STREAM:
                case RELAY_RESOLVER:
                    throw new Error('Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.');
                default:
                    selection.kind;
                    throw new Error('Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.');
            }
        };
        for(_iterator.s(); !(_step = _iterator.n()).done;){
            var _selection$alias;
            var _selection$alias2;
            _loop();
        }
    } catch (err) {
        _iterator.e(err);
    } finally{
        _iterator.f();
    }
}
function createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {
    return function set(newValue) {
        var _selection$args3;
        var newVariables = getArgumentValues((_selection$args3 = selection.args) !== null && _selection$args3 !== void 0 ? _selection$args3 : [], variables);
        if (newValue == null) {
            throw new Error('Do not assign null to plural linked fields; assign an empty array instead.');
        } else {
            var recordProxies = newValue.map(function(item) {
                if (item == null) {
                    throw new Error('When assigning an array of items, none of the items should be null or undefined.');
                }
                var __id = item.__id;
                if (__id == null) {
                    throw new Error('The __id field must be present on each item passed to the setter. This indicates a bug in Relay.');
                }
                var newValueRecord = recordSourceProxy.get(__id);
                if (newValueRecord == null) {
                    throw new Error("Did not find item with data id ".concat(__id, " in the store."));
                }
                return newValueRecord;
            });
            updatableProxyRootRecord.setLinkedRecords(recordProxies, selection.name, newVariables);
        }
    };
}
function createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {
    return function set(newValue) {
        var _selection$args4;
        var newVariables = getArgumentValues((_selection$args4 = selection.args) !== null && _selection$args4 !== void 0 ? _selection$args4 : [], variables);
        if (newValue == null) {
            updatableProxyRootRecord.setValue(newValue, selection.name, newVariables);
        } else {
            var __id = newValue.__id;
            if (__id == null) {
                throw new Error('The __id field must be present on the argument. This indicates a bug in Relay.');
            }
            var newValueRecord = recordSourceProxy.get(__id);
            if (newValueRecord == null) {
                throw new Error("Did not find item with data id ".concat(__id, " in the store."));
            }
            updatableProxyRootRecord.setLinkedRecord(newValueRecord, selection.name, newVariables);
        }
    };
}
function createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
    return function() {
        var _selection$args5;
        var newVariables = getArgumentValues((_selection$args5 = selection.args) !== null && _selection$args5 !== void 0 ? _selection$args5 : [], variables);
        var linkedRecords = updatableProxyRootRecord.getLinkedRecords(selection.name, newVariables);
        if (linkedRecords === undefined) {
            linkedRecords = getPluralLinkedRecordUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers);
        }
        if (linkedRecords != null) {
            return linkedRecords.map(function(linkedRecord) {
                if (linkedRecord != null) {
                    var updatableProxy = {};
                    updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
                    if ("TURBOPACK compile-time truthy", 1) {
                        Object.freeze(updatableProxy);
                    }
                    return updatableProxy;
                } else {
                    return linkedRecord;
                }
            });
        } else {
            return linkedRecords;
        }
    };
}
function createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
    return function() {
        var _selection$args6;
        var newVariables = getArgumentValues((_selection$args6 = selection.args) !== null && _selection$args6 !== void 0 ? _selection$args6 : [], variables);
        var linkedRecord = updatableProxyRootRecord.getLinkedRecord(selection.name, newVariables);
        if (linkedRecord === undefined) {
            linkedRecord = getLinkedRecordUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers);
        }
        if (linkedRecord != null) {
            var updatableProxy = {};
            updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
            if ("TURBOPACK compile-time truthy", 1) {
                Object.freeze(updatableProxy);
            }
            return updatableProxy;
        } else {
            return linkedRecord;
        }
    };
}
function getLinkedRecordUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
    var _iterator2 = (0, _createForOfIteratorHelper2["default"])(missingFieldHandlers), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var handler = _step2.value;
            if (handler.kind === 'linked') {
                var newId = handler.handle(selection, updatableProxyRootRecord, newVariables, recordSourceProxy);
                if (newId != null) {
                    return recordSourceProxy.get(newId);
                }
            }
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
}
function getPluralLinkedRecordUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
    var _iterator3 = (0, _createForOfIteratorHelper2["default"])(missingFieldHandlers), _step3;
    try {
        for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
            var handler = _step3.value;
            if (handler.kind === 'pluralLinked') {
                var newIds = handler.handle(selection, updatableProxyRootRecord, newVariables, recordSourceProxy);
                if (newIds != null) {
                    return newIds.map(function(newId) {
                        if (newId != null) {
                            return recordSourceProxy.get(newId);
                        }
                    });
                }
            }
        }
    } catch (err) {
        _iterator3.e(err);
    } finally{
        _iterator3.f();
    }
}
function getScalarUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
    var _iterator4 = (0, _createForOfIteratorHelper2["default"])(missingFieldHandlers), _step4;
    try {
        for(_iterator4.s(); !(_step4 = _iterator4.n()).done;){
            var handler = _step4.value;
            if (handler.kind === 'scalar') {
                var value = handler.handle(selection, updatableProxyRootRecord, newVariables, recordSourceProxy);
                if (value !== undefined) {
                    return value;
                }
            }
        }
    } catch (err) {
        _iterator4.e(err);
    } finally{
        _iterator4.f();
    }
}
module.exports = {
    createUpdatableProxy: createUpdatableProxy
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/readUpdatableFragment.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)"), getFragment = _require.getFragment;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernSelector.js [app-ssr] (ecmascript)"), getVariablesFromFragment = _require2.getVariablesFromFragment;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), ID_KEY = _require3.ID_KEY;
var _require4 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/createUpdatableProxy.js [app-ssr] (ecmascript)"), createUpdatableProxy = _require4.createUpdatableProxy;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function readUpdatableFragment(fragment, fragmentReference, proxy, missingFieldHandlers) {
    var updatableFragment = getFragment(fragment);
    var fragmentVariables = getVariablesFromFragment(updatableFragment, fragmentReference);
    var id = fragmentReference[ID_KEY];
    var fragmentRoot = proxy.get(id);
    !(fragmentRoot != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, "No record with ".concat(id, " was found. This likely indicates a problem with Relay.")) : ("TURBOPACK unreachable", undefined) : void 0;
    return {
        updatableData: createUpdatableProxy(fragmentRoot, fragmentVariables, updatableFragment.selections, proxy, missingFieldHandlers)
    };
}
module.exports = {
    readUpdatableFragment: readUpdatableFragment
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/readUpdatableQuery.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)"), getUpdatableQuery = _require.getUpdatableQuery;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/createUpdatableProxy.js [app-ssr] (ecmascript)"), createUpdatableProxy = _require2.createUpdatableProxy;
function readUpdatableQuery(query, variables, proxy, missingFieldHandlers) {
    var updatableQuery = getUpdatableQuery(query);
    return {
        updatableData: createUpdatableProxy(proxy.getRoot(), variables, updatableQuery.fragment.selections, proxy, missingFieldHandlers)
    };
}
module.exports = {
    readUpdatableQuery: readUpdatableQuery
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayRecordProxy.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)"), generateClientID = _require.generateClientID;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), getStableStorageKey = _require2.getStableStorageKey;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var RelayRecordProxy = /*#__PURE__*/ function() {
    function RelayRecordProxy(source, mutator, dataID) {
        this._dataID = dataID;
        this._mutator = mutator;
        this._source = source;
    }
    var _proto = RelayRecordProxy.prototype;
    _proto.copyFieldsFrom = function copyFieldsFrom(source) {
        this._mutator.copyFields(source.getDataID(), this._dataID);
    };
    _proto.getDataID = function getDataID() {
        return this._dataID;
    };
    _proto.getType = function getType() {
        var type = this._mutator.getType(this._dataID);
        !(type != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordProxy: Cannot get the type of deleted record `%s`.', this._dataID) : ("TURBOPACK unreachable", undefined) : void 0;
        return type;
    };
    _proto.getValue = function getValue(name, args) {
        var storageKey = getStableStorageKey(name, args);
        return this._mutator.getValue(this._dataID, storageKey);
    };
    _proto.setValue = function setValue(value, name, args) {
        !isValidLeafValue(value) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordProxy#setValue(): Expected a scalar or array of scalars, ' + 'got `%s`.', JSON.stringify(value)) : ("TURBOPACK unreachable", undefined) : void 0;
        return this.setValue__UNSAFE(value, name, args);
    };
    _proto.setValue__UNSAFE = function setValue__UNSAFE(value, name, args) {
        var storageKey = getStableStorageKey(name, args);
        this._mutator.setValue(this._dataID, storageKey, value);
        return this;
    };
    _proto.getLinkedRecord = function getLinkedRecord(name, args) {
        var storageKey = getStableStorageKey(name, args);
        var linkedID = this._mutator.getLinkedRecordID(this._dataID, storageKey);
        return linkedID != null ? this._source.get(linkedID) : linkedID;
    };
    _proto.setLinkedRecord = function setLinkedRecord(record, name, args) {
        !(record instanceof RelayRecordProxy) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordProxy#setLinkedRecord(): Expected a record, got `%s`.', record) : ("TURBOPACK unreachable", undefined) : void 0;
        var storageKey = getStableStorageKey(name, args);
        var linkedID = record.getDataID();
        this._mutator.setLinkedRecordID(this._dataID, storageKey, linkedID);
        return this;
    };
    _proto.getOrCreateLinkedRecord = function getOrCreateLinkedRecord(name, typeName, args) {
        var linkedRecord = this.getLinkedRecord(name, args);
        if (!linkedRecord) {
            var _this$_source$get;
            var storageKey = getStableStorageKey(name, args);
            var clientID = generateClientID(this.getDataID(), storageKey);
            linkedRecord = (_this$_source$get = this._source.get(clientID)) !== null && _this$_source$get !== void 0 ? _this$_source$get : this._source.create(clientID, typeName);
            this.setLinkedRecord(linkedRecord, name, args);
        }
        return linkedRecord;
    };
    _proto.getLinkedRecords = function getLinkedRecords(name, args) {
        var _this = this;
        var storageKey = getStableStorageKey(name, args);
        var linkedIDs = this._mutator.getLinkedRecordIDs(this._dataID, storageKey);
        if (linkedIDs == null) {
            return linkedIDs;
        }
        return linkedIDs.map(function(linkedID) {
            return linkedID != null ? _this._source.get(linkedID) : linkedID;
        });
    };
    _proto.setLinkedRecords = function setLinkedRecords(records, name, args) {
        !Array.isArray(records) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordProxy#setLinkedRecords(): Expected records to be an array, got `%s`.', records) : ("TURBOPACK unreachable", undefined) : void 0;
        var storageKey = getStableStorageKey(name, args);
        var linkedIDs = records.map(function(record) {
            return record && record.getDataID();
        });
        this._mutator.setLinkedRecordIDs(this._dataID, storageKey, linkedIDs);
        return this;
    };
    _proto.invalidateRecord = function invalidateRecord() {
        this._source.markIDForInvalidation(this._dataID);
    };
    return RelayRecordProxy;
}();
function isValidLeafValue(value) {
    return value == null || typeof value !== 'object' || Array.isArray(value) && value.every(isValidLeafValue);
}
module.exports = RelayRecordProxy;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayRecordSourceProxy.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordState.js [app-ssr] (ecmascript)"), EXISTENT = _require.EXISTENT, NONEXISTENT = _require.NONEXISTENT;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), ROOT_ID = _require2.ROOT_ID, ROOT_TYPE = _require2.ROOT_TYPE;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/readUpdatableFragment.js [app-ssr] (ecmascript)"), _readUpdatableFragment = _require3.readUpdatableFragment;
var _require4 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/readUpdatableQuery.js [app-ssr] (ecmascript)"), _readUpdatableQuery = _require4.readUpdatableQuery;
var RelayRecordProxy = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayRecordProxy.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var RelayRecordSourceProxy = /*#__PURE__*/ function() {
    function RelayRecordSourceProxy(mutator, getDataID, handlerProvider, missingFieldHandlers) {
        this.__mutator = mutator;
        this._handlerProvider = handlerProvider || null;
        this._proxies = {};
        this._getDataID = getDataID;
        this._invalidatedStore = false;
        this._idsMarkedForInvalidation = new Set();
        this._missingFieldHandlers = missingFieldHandlers;
    }
    var _proto = RelayRecordSourceProxy.prototype;
    _proto.publishSource = function publishSource(source, fieldPayloads) {
        var _this = this;
        var dataIDs = source.getRecordIDs();
        dataIDs.forEach(function(dataID) {
            var status = source.getStatus(dataID);
            if (status === EXISTENT) {
                var sourceRecord = source.get(dataID);
                if (sourceRecord) {
                    if (_this.__mutator.getStatus(dataID) !== EXISTENT) {
                        _this.create(dataID, RelayModernRecord.getType(sourceRecord));
                    }
                    _this.__mutator.copyFieldsFromRecord(sourceRecord, dataID);
                }
            } else if (status === NONEXISTENT) {
                _this["delete"](dataID);
            }
        });
        if (fieldPayloads && fieldPayloads.length) {
            fieldPayloads.forEach(function(fieldPayload) {
                var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);
                !handler ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernEnvironment: Expected a handler to be provided for handle `%s`.', fieldPayload.handle) : ("TURBOPACK unreachable", undefined) : void 0;
                handler.update(_this, fieldPayload);
            });
        }
    };
    _proto.create = function create(dataID, typeName) {
        this.__mutator.create(dataID, typeName);
        delete this._proxies[dataID];
        var record = this.get(dataID);
        !record ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordSourceProxy#create(): Expected the created record to exist.') : ("TURBOPACK unreachable", undefined) : void 0;
        return record;
    };
    _proto["delete"] = function _delete(dataID) {
        !(dataID !== ROOT_ID) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordSourceProxy#delete(): Cannot delete the root record.') : ("TURBOPACK unreachable", undefined) : void 0;
        delete this._proxies[dataID];
        this.__mutator["delete"](dataID);
    };
    _proto.get = function get(dataID) {
        if (!this._proxies.hasOwnProperty(dataID)) {
            var status = this.__mutator.getStatus(dataID);
            if (status === EXISTENT) {
                this._proxies[dataID] = new RelayRecordProxy(this, this.__mutator, dataID);
            } else {
                this._proxies[dataID] = status === NONEXISTENT ? null : undefined;
            }
        }
        return this._proxies[dataID];
    };
    _proto.getRoot = function getRoot() {
        var root = this.get(ROOT_ID);
        if (!root) {
            root = this.create(ROOT_ID, ROOT_TYPE);
        }
        !(root && root.getType() === ROOT_TYPE) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordSourceProxy#getRoot(): Expected the source to contain a ' + 'root record, %s.', root == null ? 'no root record found' : "found a root record of type `".concat(root.getType(), "`")) : ("TURBOPACK unreachable", undefined) : void 0;
        return root;
    };
    _proto.invalidateStore = function invalidateStore() {
        this._invalidatedStore = true;
    };
    _proto.isStoreMarkedForInvalidation = function isStoreMarkedForInvalidation() {
        return this._invalidatedStore;
    };
    _proto.markIDForInvalidation = function markIDForInvalidation(dataID) {
        this._idsMarkedForInvalidation.add(dataID);
    };
    _proto.getIDsMarkedForInvalidation = function getIDsMarkedForInvalidation() {
        return this._idsMarkedForInvalidation;
    };
    _proto.readUpdatableQuery = function readUpdatableQuery(query, variables) {
        return _readUpdatableQuery(query, variables, this, this._missingFieldHandlers);
    };
    _proto.readUpdatableFragment = function readUpdatableFragment(fragment, fragmentReference) {
        return _readUpdatableFragment(fragment, fragmentReference, this, this._missingFieldHandlers);
    };
    return RelayRecordSourceProxy;
}();
module.exports = RelayRecordSourceProxy;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayRecordSourceSelectorProxy.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), ROOT_TYPE = _require.ROOT_TYPE, getStorageKey = _require.getStorageKey;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/readUpdatableFragment.js [app-ssr] (ecmascript)"), _readUpdatableFragment = _require2.readUpdatableFragment;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/readUpdatableQuery.js [app-ssr] (ecmascript)"), _readUpdatableQuery = _require3.readUpdatableQuery;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var RelayRecordSourceSelectorProxy = /*#__PURE__*/ function() {
    function RelayRecordSourceSelectorProxy(mutator, recordSource, readSelector, missingFieldHandlers) {
        this.__mutator = mutator;
        this.__recordSource = recordSource;
        this._readSelector = readSelector;
        this._missingFieldHandlers = missingFieldHandlers;
    }
    var _proto = RelayRecordSourceSelectorProxy.prototype;
    _proto.create = function create(dataID, typeName) {
        return this.__recordSource.create(dataID, typeName);
    };
    _proto["delete"] = function _delete(dataID) {
        this.__recordSource["delete"](dataID);
    };
    _proto.get = function get(dataID) {
        return this.__recordSource.get(dataID);
    };
    _proto.getRoot = function getRoot() {
        return this.__recordSource.getRoot();
    };
    _proto.getOperationRoot = function getOperationRoot() {
        var root = this.__recordSource.get(this._readSelector.dataID);
        if (!root) {
            root = this.__recordSource.create(this._readSelector.dataID, ROOT_TYPE);
        }
        return root;
    };
    _proto._getRootField = function _getRootField(selector, fieldName, plural) {
        var field = selector.node.selections.find(function(selection) {
            return selection.kind === 'LinkedField' && selection.name === fieldName || selection.kind === 'RequiredField' && selection.field.name === fieldName;
        });
        if (field && field.kind === 'RequiredField') {
            field = field.field;
        }
        !(field && field.kind === 'LinkedField') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Cannot find root ' + 'field `%s`, no such field is defined on GraphQL document `%s`.', fieldName, selector.node.name) : ("TURBOPACK unreachable", undefined) : void 0;
        !(field.plural === plural) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Expected root field ' + '`%s` to be %s.', fieldName, plural ? 'plural' : 'singular') : ("TURBOPACK unreachable", undefined) : void 0;
        return field;
    };
    _proto.getRootField = function getRootField(fieldName) {
        var field = this._getRootField(this._readSelector, fieldName, false);
        var storageKey = getStorageKey(field, this._readSelector.variables);
        return this.getOperationRoot().getLinkedRecord(storageKey);
    };
    _proto.getPluralRootField = function getPluralRootField(fieldName) {
        var field = this._getRootField(this._readSelector, fieldName, true);
        var storageKey = getStorageKey(field, this._readSelector.variables);
        return this.getOperationRoot().getLinkedRecords(storageKey);
    };
    _proto.invalidateStore = function invalidateStore() {
        this.__recordSource.invalidateStore();
    };
    _proto.readUpdatableQuery = function readUpdatableQuery(query, variables) {
        return _readUpdatableQuery(query, variables, this, this._missingFieldHandlers);
    };
    _proto.readUpdatableFragment = function readUpdatableFragment(fragment, fragmentReference) {
        return _readUpdatableFragment(fragment, fragmentReference, this, this._missingFieldHandlers);
    };
    return RelayRecordSourceSelectorProxy;
}();
module.exports = RelayRecordSourceSelectorProxy;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/shallowFreeze.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
module.exports = function shallowFreeze(value) {
    if (typeof value === 'object' && value != null && (Array.isArray(value) || value.constructor === Object)) {
        Object.freeze(value);
    }
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ResolverCache.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var recycleNodesInto = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/recycleNodesInto.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)"), RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER;
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var shallowFreeze = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/shallowFreeze.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)"), generateClientID = _require2.generateClientID;
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), RELAY_RESOLVER_ERROR_KEY = _require3.RELAY_RESOLVER_ERROR_KEY, RELAY_RESOLVER_INVALIDATION_KEY = _require3.RELAY_RESOLVER_INVALIDATION_KEY, RELAY_RESOLVER_SNAPSHOT_KEY = _require3.RELAY_RESOLVER_SNAPSHOT_KEY, RELAY_RESOLVER_VALUE_KEY = _require3.RELAY_RESOLVER_VALUE_KEY, getStorageKey = _require3.getStorageKey;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var emptySet = new Set();
var NoopResolverCache = /*#__PURE__*/ function() {
    function NoopResolverCache() {}
    var _proto = NoopResolverCache.prototype;
    _proto.readFromCacheOrEvaluate = function readFromCacheOrEvaluate(recordID, field, variables, evaluate, getDataForResolverFragment) {
        !(field.kind !== RELAY_LIVE_RESOLVER) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'This store does not support Live Resolvers') : ("TURBOPACK unreachable", undefined) : void 0;
        var _evaluate = evaluate(), resolverResult = _evaluate.resolverResult, snapshot = _evaluate.snapshot, error = _evaluate.error;
        return [
            resolverResult,
            undefined,
            error,
            snapshot,
            undefined,
            undefined
        ];
    };
    _proto.invalidateDataIDs = function invalidateDataIDs(updatedDataIDs) {};
    _proto.ensureClientRecord = function ensureClientRecord(id, typeName) {
        ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Client Edges to Client Objects are not supported in this version of Relay Store') : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
    };
    _proto.notifyUpdatedSubscribers = function notifyUpdatedSubscribers(updatedDataIDs) {};
    return NoopResolverCache;
}();
function addDependencyEdge(edges, from, to) {
    var set = edges.get(from);
    if (!set) {
        set = new Set();
        edges.set(from, set);
    }
    set.add(to);
}
var RecordResolverCache = /*#__PURE__*/ function() {
    function RecordResolverCache(getRecordSource) {
        this._resolverIDToRecordIDs = new Map();
        this._recordIDToResolverIDs = new Map();
        this._getRecordSource = getRecordSource;
    }
    var _proto2 = RecordResolverCache.prototype;
    _proto2.readFromCacheOrEvaluate = function readFromCacheOrEvaluate(recordID, field, variables, evaluate, getDataForResolverFragment) {
        var recordSource = this._getRecordSource();
        var record = recordSource.get(recordID);
        !(record != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'We expect record to exist in the store.') : ("TURBOPACK unreachable", undefined) : void 0;
        var storageKey = getStorageKey(field, variables);
        var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
        var linkedRecord = linkedID == null ? null : recordSource.get(linkedID);
        if (linkedRecord == null || this._isInvalid(linkedRecord, getDataForResolverFragment)) {
            var _linkedID;
            linkedID = (_linkedID = linkedID) !== null && _linkedID !== void 0 ? _linkedID : generateClientID(recordID, storageKey);
            linkedRecord = RelayModernRecord.create(linkedID, '__RELAY_RESOLVER__');
            var evaluationResult = evaluate();
            if (RelayFeatureFlags.ENABLE_SHALLOW_FREEZE_RESOLVER_VALUES) {
                shallowFreeze(evaluationResult.resolverResult);
            }
            RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_VALUE_KEY, evaluationResult.resolverResult);
            RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_SNAPSHOT_KEY, evaluationResult.snapshot);
            RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_ERROR_KEY, evaluationResult.error);
            recordSource.set(linkedID, linkedRecord);
            var currentRecord = recordSource.get(recordID);
            !(currentRecord != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Expected the parent record to still be in the record source.') : ("TURBOPACK unreachable", undefined) : void 0;
            var nextRecord = RelayModernRecord.clone(currentRecord);
            RelayModernRecord.setLinkedRecordID(nextRecord, storageKey, linkedID);
            recordSource.set(recordID, nextRecord);
            if (field.fragment != null) {
                var _evaluationResult$sna;
                var fragmentStorageKey = getStorageKey(field.fragment, variables);
                var resolverID = generateClientID(recordID, fragmentStorageKey);
                addDependencyEdge(this._resolverIDToRecordIDs, resolverID, linkedID);
                addDependencyEdge(this._recordIDToResolverIDs, recordID, resolverID);
                var seenRecordIds = (_evaluationResult$sna = evaluationResult.snapshot) === null || _evaluationResult$sna === void 0 ? void 0 : _evaluationResult$sna.seenRecords;
                if (seenRecordIds != null) {
                    var _iterator = (0, _createForOfIteratorHelper2["default"])(seenRecordIds), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var seenRecordID = _step.value;
                            addDependencyEdge(this._recordIDToResolverIDs, seenRecordID, resolverID);
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                }
            }
        }
        var answer = RelayModernRecord.getValue(linkedRecord, RELAY_RESOLVER_VALUE_KEY);
        var snapshot = RelayModernRecord.getValue(linkedRecord, RELAY_RESOLVER_SNAPSHOT_KEY);
        var error = RelayModernRecord.getValue(linkedRecord, RELAY_RESOLVER_ERROR_KEY);
        return [
            answer,
            linkedID,
            error,
            snapshot,
            undefined,
            undefined
        ];
    };
    _proto2.invalidateDataIDs = function invalidateDataIDs(updatedDataIDs) {
        var recordSource = this._getRecordSource();
        var visited = new Set();
        var recordsToVisit = Array.from(updatedDataIDs);
        while(recordsToVisit.length){
            var recordID = recordsToVisit.pop();
            updatedDataIDs.add(recordID);
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])((_this$_recordIDToReso = this._recordIDToResolverIDs.get(recordID)) !== null && _this$_recordIDToReso !== void 0 ? _this$_recordIDToReso : emptySet), _step2;
            try {
                for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                    var _this$_recordIDToReso;
                    var fragment = _step2.value;
                    if (!visited.has(fragment)) {
                        var _iterator3 = (0, _createForOfIteratorHelper2["default"])((_this$_resolverIDToRe = this._resolverIDToRecordIDs.get(fragment)) !== null && _this$_resolverIDToRe !== void 0 ? _this$_resolverIDToRe : emptySet), _step3;
                        try {
                            for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
                                var _this$_resolverIDToRe;
                                var anotherRecordID = _step3.value;
                                this._markInvalidatedResolverRecord(anotherRecordID, recordSource, updatedDataIDs);
                                if (!visited.has(anotherRecordID)) {
                                    recordsToVisit.push(anotherRecordID);
                                }
                            }
                        } catch (err) {
                            _iterator3.e(err);
                        } finally{
                            _iterator3.f();
                        }
                    }
                }
            } catch (err) {
                _iterator2.e(err);
            } finally{
                _iterator2.f();
            }
        }
    };
    _proto2._markInvalidatedResolverRecord = function _markInvalidatedResolverRecord(dataID, recordSource, updatedDataIDs) {
        var record = recordSource.get(dataID);
        if (!record) {
            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Expected a resolver record with ID %s, but it was missing.', dataID) : ("TURBOPACK unreachable", undefined);
            return;
        }
        var nextRecord = RelayModernRecord.clone(record);
        RelayModernRecord.setValue(nextRecord, RELAY_RESOLVER_INVALIDATION_KEY, true);
        recordSource.set(dataID, nextRecord);
    };
    _proto2._isInvalid = function _isInvalid(record, getDataForResolverFragment) {
        if (!RelayModernRecord.getValue(record, RELAY_RESOLVER_INVALIDATION_KEY)) {
            return false;
        }
        var snapshot = RelayModernRecord.getValue(record, RELAY_RESOLVER_SNAPSHOT_KEY);
        var originalInputs = snapshot === null || snapshot === void 0 ? void 0 : snapshot.data;
        var readerSelector = snapshot === null || snapshot === void 0 ? void 0 : snapshot.selector;
        if (originalInputs == null || readerSelector == null) {
            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Expected previous inputs and reader selector on resolver record with ID %s, but they were missing.', RelayModernRecord.getDataID(record)) : ("TURBOPACK unreachable", undefined);
            return true;
        }
        var _getDataForResolverFr = getDataForResolverFragment(readerSelector), latestValues = _getDataForResolverFr.data;
        var recycled = recycleNodesInto(originalInputs, latestValues);
        if (recycled !== originalInputs) {
            return true;
        }
        return false;
    };
    _proto2.ensureClientRecord = function ensureClientRecord(id, typename) {
        ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Client Edges to Client Objects are not supported in this version of Relay Store') : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
    };
    _proto2.notifyUpdatedSubscribers = function notifyUpdatedSubscribers(updatedDataIDs) {
        ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Processing @outputType records is not supported in this version of Relay Store') : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
    };
    return RecordResolverCache;
}();
module.exports = {
    NoopResolverCache: NoopResolverCache,
    RecordResolverCache: RecordResolverCache
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ResolverFragments.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)"), getFragment = _require.getFragment;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernSelector.js [app-ssr] (ecmascript)"), getSelector = _require2.getSelector;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var contextStack = [];
function withResolverContext(context, cb) {
    contextStack.push(context);
    try {
        return cb();
    } finally{
        contextStack.pop();
    }
}
function readFragment(fragmentInput, fragmentKey) {
    if (!contextStack.length) {
        throw new Error('readFragment should be called only from within a Relay Resolver function.');
    }
    var context = contextStack[contextStack.length - 1];
    var fragmentNode = getFragment(fragmentInput);
    var fragmentSelector = getSelector(fragmentNode, fragmentKey);
    !(fragmentSelector != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, "Expected a selector for the fragment of the resolver ".concat(fragmentNode.name, ", but got null.")) : ("TURBOPACK unreachable", undefined) : void 0;
    !(fragmentSelector.kind === 'SingularReaderSelector') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, "Expected a singular reader selector for the fragment of the resolver ".concat(fragmentNode.name, ", but it was plural.")) : ("TURBOPACK unreachable", undefined) : void 0;
    var _context$getDataForRe = context.getDataForResolverFragment(fragmentSelector, fragmentKey), data = _context$getDataForRe.data, isMissingData = _context$getDataForRe.isMissingData;
    if (isMissingData) {
        throw RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL;
    }
    return data;
}
var RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = {};
module.exports = {
    readFragment: readFragment,
    withResolverContext: withResolverContext,
    RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL: RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayReader.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var _toConsumableArray2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toConsumableArray.js [app-ssr] (ecmascript)"));
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)"), ACTOR_CHANGE = _require.ACTOR_CHANGE, ALIASED_FRAGMENT_SPREAD = _require.ALIASED_FRAGMENT_SPREAD, ALIASED_INLINE_FRAGMENT_SPREAD = _require.ALIASED_INLINE_FRAGMENT_SPREAD, CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT, CLIENT_EDGE_TO_SERVER_OBJECT = _require.CLIENT_EDGE_TO_SERVER_OBJECT, CLIENT_EXTENSION = _require.CLIENT_EXTENSION, CONDITION = _require.CONDITION, DEFER = _require.DEFER, FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD, INLINE_DATA_FRAGMENT_SPREAD = _require.INLINE_DATA_FRAGMENT_SPREAD, INLINE_FRAGMENT = _require.INLINE_FRAGMENT, LINKED_FIELD = _require.LINKED_FIELD, MODULE_IMPORT = _require.MODULE_IMPORT, RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER, RELAY_RESOLVER = _require.RELAY_RESOLVER, REQUIRED_FIELD = _require.REQUIRED_FIELD, SCALAR_FIELD = _require.SCALAR_FIELD, STREAM = _require.STREAM;
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js [app-ssr] (ecmascript)"), isSuspenseSentinel = _require2.isSuspenseSentinel;
var RelayConcreteVariables = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js [app-ssr] (ecmascript)");
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), CLIENT_EDGE_TRAVERSAL_PATH = _require3.CLIENT_EDGE_TRAVERSAL_PATH, FRAGMENT_OWNER_KEY = _require3.FRAGMENT_OWNER_KEY, FRAGMENT_PROP_NAME_KEY = _require3.FRAGMENT_PROP_NAME_KEY, FRAGMENTS_KEY = _require3.FRAGMENTS_KEY, ID_KEY = _require3.ID_KEY, MODULE_COMPONENT_KEY = _require3.MODULE_COMPONENT_KEY, ROOT_ID = _require3.ROOT_ID, getArgumentValues = _require3.getArgumentValues, getModuleComponentKey = _require3.getModuleComponentKey, getStorageKey = _require3.getStorageKey;
var _require4 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ResolverCache.js [app-ssr] (ecmascript)"), NoopResolverCache = _require4.NoopResolverCache;
var _require5 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ResolverFragments.js [app-ssr] (ecmascript)"), RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = _require5.RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL, withResolverContext = _require5.withResolverContext;
var _require6 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/TypeID.js [app-ssr] (ecmascript)"), generateTypeID = _require6.generateTypeID;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function read(recordSource, selector, resolverCache) {
    var reader = new RelayReader(recordSource, selector, resolverCache !== null && resolverCache !== void 0 ? resolverCache : new NoopResolverCache());
    return reader.read();
}
var RelayReader = /*#__PURE__*/ function() {
    function RelayReader(recordSource, selector, resolverCache) {
        var _selector$clientEdgeT;
        this._clientEdgeTraversalPath = RelayFeatureFlags.ENABLE_CLIENT_EDGES && (_selector$clientEdgeT = selector.clientEdgeTraversalPath) !== null && _selector$clientEdgeT !== void 0 && _selector$clientEdgeT.length ? (0, _toConsumableArray2["default"])(selector.clientEdgeTraversalPath) : [];
        this._missingClientEdges = [];
        this._missingLiveResolverFields = [];
        this._isMissingData = false;
        this._isWithinUnmatchedTypeRefinement = false;
        this._missingRequiredFields = null;
        this._errorResponseFields = null;
        this._owner = selector.owner;
        this._recordSource = recordSource;
        this._seenRecords = new Set();
        this._selector = selector;
        this._variables = selector.variables;
        this._resolverCache = resolverCache;
        this._resolverErrors = [];
        this._fragmentName = selector.node.name;
        this._updatedDataIDs = new Set();
    }
    var _proto = RelayReader.prototype;
    _proto.read = function read() {
        var _this$_selector = this._selector, node = _this$_selector.node, dataID = _this$_selector.dataID, isWithinUnmatchedTypeRefinement = _this$_selector.isWithinUnmatchedTypeRefinement;
        var abstractKey = node.abstractKey;
        var record = this._recordSource.get(dataID);
        var isDataExpectedToBePresent = !isWithinUnmatchedTypeRefinement;
        if (isDataExpectedToBePresent && abstractKey == null && record != null) {
            var recordType = RelayModernRecord.getType(record);
            if (recordType !== node.type && dataID !== ROOT_ID) {
                isDataExpectedToBePresent = false;
            }
        }
        if (isDataExpectedToBePresent && abstractKey != null && record != null) {
            var implementsInterface = this._implementsInterface(record, abstractKey);
            if (implementsInterface === false) {
                isDataExpectedToBePresent = false;
            } else if (implementsInterface == null) {
                this._isMissingData = true;
            }
        }
        this._isWithinUnmatchedTypeRefinement = !isDataExpectedToBePresent;
        var data = this._traverse(node, dataID, null);
        if (this._updatedDataIDs.size > 0) {
            this._resolverCache.notifyUpdatedSubscribers(this._updatedDataIDs);
            this._updatedDataIDs.clear();
        }
        return {
            data: data,
            isMissingData: this._isMissingData && isDataExpectedToBePresent,
            missingClientEdges: RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._missingClientEdges.length ? this._missingClientEdges : null,
            missingLiveResolverFields: this._missingLiveResolverFields,
            seenRecords: this._seenRecords,
            selector: this._selector,
            missingRequiredFields: this._missingRequiredFields,
            relayResolverErrors: this._resolverErrors,
            errorResponseFields: this._errorResponseFields
        };
    };
    _proto._maybeAddErrorResponseFields = function _maybeAddErrorResponseFields(record, storageKey) {
        if (!RelayFeatureFlags.ENABLE_FIELD_ERROR_HANDLING) {
            return;
        }
        var errors = RelayModernRecord.getErrors(record, storageKey);
        if (errors == null) {
            return;
        }
        var owner = this._fragmentName;
        if (this._errorResponseFields == null) {
            this._errorResponseFields = [];
        }
        var _iterator = (0, _createForOfIteratorHelper2["default"])(errors), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var _error$path;
                var error = _step.value;
                this._errorResponseFields.push({
                    owner: owner,
                    path: ((_error$path = error.path) !== null && _error$path !== void 0 ? _error$path : []).join('.'),
                    error: error
                });
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
    };
    _proto._markDataAsMissing = function _markDataAsMissing() {
        this._isMissingData = true;
        if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._clientEdgeTraversalPath.length) {
            var top = this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1];
            if (top !== null) {
                this._missingClientEdges.push({
                    request: top.readerClientEdge.operation,
                    clientEdgeDestinationID: top.clientEdgeDestinationID
                });
            }
        }
    };
    _proto._traverse = function _traverse(node, dataID, prevData) {
        var record = this._recordSource.get(dataID);
        this._seenRecords.add(dataID);
        if (record == null) {
            if (record === undefined) {
                this._markDataAsMissing();
            }
            return record;
        }
        var data = prevData || {};
        var hadRequiredData = this._traverseSelections(node.selections, record, data);
        return hadRequiredData ? data : null;
    };
    _proto._getVariableValue = function _getVariableValue(name) {
        !this._variables.hasOwnProperty(name) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReader(): Undefined variable `%s`.', name) : ("TURBOPACK unreachable", undefined) : void 0;
        return this._variables[name];
    };
    _proto._maybeReportUnexpectedNull = function _maybeReportUnexpectedNull(fieldPath, action) {
        var _this$_missingRequire;
        if (((_this$_missingRequire = this._missingRequiredFields) === null || _this$_missingRequire === void 0 ? void 0 : _this$_missingRequire.action) === 'THROW') {
            return;
        }
        var owner = this._fragmentName;
        switch(action){
            case 'THROW':
                this._missingRequiredFields = {
                    action: action,
                    field: {
                        path: fieldPath,
                        owner: owner
                    }
                };
                return;
            case 'LOG':
                if (this._missingRequiredFields == null) {
                    this._missingRequiredFields = {
                        action: action,
                        fields: [
                            {
                                path: fieldPath,
                                owner: owner
                            }
                        ]
                    };
                } else {
                    this._missingRequiredFields = {
                        action: action,
                        fields: [].concat((0, _toConsumableArray2["default"])(this._missingRequiredFields.fields), [
                            {
                                path: fieldPath,
                                owner: owner
                            }
                        ])
                    };
                }
                return;
            default:
                action;
        }
    };
    _proto._traverseSelections = function _traverseSelections(selections, record, data) {
        for(var i = 0; i < selections.length; i++){
            var selection = selections[i];
            switch(selection.kind){
                case REQUIRED_FIELD:
                    {
                        var fieldValue = this._readRequiredField(selection, record, data);
                        if (fieldValue == null) {
                            var action = selection.action;
                            if (action !== 'NONE') {
                                this._maybeReportUnexpectedNull(selection.path, action);
                            }
                            return false;
                        }
                        break;
                    }
                case SCALAR_FIELD:
                    this._readScalar(selection, record, data);
                    break;
                case LINKED_FIELD:
                    if (selection.plural) {
                        this._readPluralLink(selection, record, data);
                    } else {
                        this._readLink(selection, record, data);
                    }
                    break;
                case CONDITION:
                    var conditionValue = Boolean(this._getVariableValue(selection.condition));
                    if (conditionValue === selection.passingValue) {
                        var hasExpectedData = this._traverseSelections(selection.selections, record, data);
                        if (!hasExpectedData) {
                            return false;
                        }
                    }
                    break;
                case INLINE_FRAGMENT:
                    {
                        if (this._readInlineFragment(selection, record, data) === false) {
                            return false;
                        }
                        break;
                    }
                case RELAY_LIVE_RESOLVER:
                case RELAY_RESOLVER:
                    {
                        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
                            throw new Error('Relay Resolver fields are not yet supported.');
                        }
                        this._readResolverField(selection, record, data);
                        break;
                    }
                case FRAGMENT_SPREAD:
                    this._createFragmentPointer(selection, record, data);
                    break;
                case ALIASED_FRAGMENT_SPREAD:
                    data[selection.name] = this._createAliasedFragmentSpread(selection, record);
                    break;
                case ALIASED_INLINE_FRAGMENT_SPREAD:
                    {
                        var _fieldValue = this._readInlineFragment(selection.fragment, record, {});
                        if (_fieldValue === false) {
                            _fieldValue = null;
                        }
                        data[selection.name] = _fieldValue;
                        break;
                    }
                case MODULE_IMPORT:
                    this._readModuleImport(selection, record, data);
                    break;
                case INLINE_DATA_FRAGMENT_SPREAD:
                    this._createInlineDataOrResolverFragmentPointer(selection, record, data);
                    break;
                case DEFER:
                case CLIENT_EXTENSION:
                    {
                        var isMissingData = this._isMissingData;
                        var alreadyMissingClientEdges = this._missingClientEdges.length;
                        if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
                            this._clientEdgeTraversalPath.push(null);
                        }
                        var _hasExpectedData = this._traverseSelections(selection.selections, record, data);
                        this._isMissingData = isMissingData || this._missingClientEdges.length > alreadyMissingClientEdges || this._missingLiveResolverFields.length > 0;
                        if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
                            this._clientEdgeTraversalPath.pop();
                        }
                        if (!_hasExpectedData) {
                            return false;
                        }
                        break;
                    }
                case STREAM:
                    {
                        var _hasExpectedData2 = this._traverseSelections(selection.selections, record, data);
                        if (!_hasExpectedData2) {
                            return false;
                        }
                        break;
                    }
                case ACTOR_CHANGE:
                    this._readActorChange(selection, record, data);
                    break;
                case CLIENT_EDGE_TO_CLIENT_OBJECT:
                case CLIENT_EDGE_TO_SERVER_OBJECT:
                    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
                        this._readClientEdge(selection, record, data);
                    } else {
                        throw new Error('Client edges are not yet supported.');
                    }
                    break;
                default:
                    selection;
                    ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
            }
        }
        return true;
    };
    _proto._readRequiredField = function _readRequiredField(selection, record, data) {
        switch(selection.field.kind){
            case SCALAR_FIELD:
                return this._readScalar(selection.field, record, data);
            case LINKED_FIELD:
                if (selection.field.plural) {
                    return this._readPluralLink(selection.field, record, data);
                } else {
                    return this._readLink(selection.field, record, data);
                }
            case RELAY_RESOLVER:
                if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
                    throw new Error('Relay Resolver fields are not yet supported.');
                }
                return this._readResolverField(selection.field, record, data);
            case RELAY_LIVE_RESOLVER:
                if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
                    throw new Error('Relay Resolver fields are not yet supported.');
                }
                return this._readResolverField(selection.field, record, data);
            case CLIENT_EDGE_TO_CLIENT_OBJECT:
            case CLIENT_EDGE_TO_SERVER_OBJECT:
                if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
                    throw new Error('Relay Resolver fields are not yet supported.');
                }
                return this._readClientEdge(selection.field, record, data);
            default:
                selection.field.kind;
                ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
        }
    };
    _proto._readResolverField = function _readResolverField(field, record, data) {
        var _field$alias;
        var parentRecordID = RelayModernRecord.getDataID(record);
        var result = this._readResolverFieldImpl(field, parentRecordID);
        var applicationName = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;
        data[applicationName] = result;
        return result;
    };
    _proto._readResolverFieldImpl = function _readResolverFieldImpl(field, parentRecordID) {
        var _this = this;
        var fragment = field.fragment;
        var snapshot;
        var getDataForResolverFragment = function getDataForResolverFragment(singularReaderSelector) {
            if (snapshot != null) {
                return {
                    data: snapshot.data,
                    isMissingData: snapshot.isMissingData
                };
            }
            snapshot = read(_this._recordSource, singularReaderSelector, _this._resolverCache);
            return {
                data: snapshot.data,
                isMissingData: snapshot.isMissingData
            };
        };
        var evaluate = function evaluate() {
            if (fragment != null) {
                var key = {
                    __id: parentRecordID,
                    __fragmentOwner: _this._owner,
                    __fragments: (0, _defineProperty2["default"])({}, fragment.name, fragment.args ? getArgumentValues(fragment.args, _this._variables) : {})
                };
                var resolverContext = {
                    getDataForResolverFragment: getDataForResolverFragment
                };
                return withResolverContext(resolverContext, function() {
                    var _getResolverValue = getResolverValue(field, _this._variables, key), resolverResult = _getResolverValue[0], resolverError = _getResolverValue[1];
                    return {
                        resolverResult: resolverResult,
                        snapshot: snapshot,
                        error: resolverError
                    };
                });
            } else {
                var _getResolverValue2 = getResolverValue(field, _this._variables, null), resolverResult = _getResolverValue2[0], _resolverError = _getResolverValue2[1];
                return {
                    resolverResult: resolverResult,
                    snapshot: undefined,
                    error: _resolverError
                };
            }
        };
        var _this$_resolverCache$ = this._resolverCache.readFromCacheOrEvaluate(parentRecordID, field, this._variables, evaluate, getDataForResolverFragment), result = _this$_resolverCache$[0], seenRecord = _this$_resolverCache$[1], resolverError = _this$_resolverCache$[2], cachedSnapshot = _this$_resolverCache$[3], suspenseID = _this$_resolverCache$[4], updatedDataIDs = _this$_resolverCache$[5];
        this._propogateResolverMetadata(field.path, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs);
        return result;
    };
    _proto._propogateResolverMetadata = function _propogateResolverMetadata(fieldPath, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs) {
        if (cachedSnapshot != null) {
            if (cachedSnapshot.missingRequiredFields != null) {
                this._addMissingRequiredFields(cachedSnapshot.missingRequiredFields);
            }
            if (cachedSnapshot.missingClientEdges != null) {
                var _iterator2 = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.missingClientEdges), _step2;
                try {
                    for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                        var missing = _step2.value;
                        this._missingClientEdges.push(missing);
                    }
                } catch (err) {
                    _iterator2.e(err);
                } finally{
                    _iterator2.f();
                }
            }
            if (cachedSnapshot.missingLiveResolverFields != null) {
                this._isMissingData = this._isMissingData || cachedSnapshot.missingLiveResolverFields.length > 0;
                var _iterator3 = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.missingLiveResolverFields), _step3;
                try {
                    for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
                        var missingResolverField = _step3.value;
                        this._missingLiveResolverFields.push(missingResolverField);
                    }
                } catch (err) {
                    _iterator3.e(err);
                } finally{
                    _iterator3.f();
                }
            }
            var _iterator4 = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.relayResolverErrors), _step4;
            try {
                for(_iterator4.s(); !(_step4 = _iterator4.n()).done;){
                    var error = _step4.value;
                    this._resolverErrors.push(error);
                }
            } catch (err) {
                _iterator4.e(err);
            } finally{
                _iterator4.f();
            }
            this._isMissingData = this._isMissingData || cachedSnapshot.isMissingData;
        }
        if (resolverError) {
            this._resolverErrors.push({
                field: {
                    path: fieldPath,
                    owner: this._fragmentName
                },
                error: resolverError
            });
        }
        if (seenRecord != null) {
            this._seenRecords.add(seenRecord);
        }
        if (suspenseID != null) {
            this._isMissingData = true;
            this._missingLiveResolverFields.push({
                path: "".concat(this._fragmentName, ".").concat(fieldPath),
                liveStateID: suspenseID
            });
        }
        if (updatedDataIDs != null) {
            var _iterator5 = (0, _createForOfIteratorHelper2["default"])(updatedDataIDs), _step5;
            try {
                for(_iterator5.s(); !(_step5 = _iterator5.n()).done;){
                    var recordID = _step5.value;
                    this._updatedDataIDs.add(recordID);
                }
            } catch (err) {
                _iterator5.e(err);
            } finally{
                _iterator5.f();
            }
        }
    };
    _proto._readClientEdge = function _readClientEdge(field, record, data) {
        var _this2 = this;
        var _backingField$alias;
        var backingField = field.backingField;
        !(backingField.kind !== 'ClientExtension') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Client extension client edges are not yet implemented.') : ("TURBOPACK unreachable", undefined) : void 0;
        var applicationName = (_backingField$alias = backingField.alias) !== null && _backingField$alias !== void 0 ? _backingField$alias : backingField.name;
        var backingFieldData = {};
        this._traverseSelections([
            backingField
        ], record, backingFieldData);
        var clientEdgeResolverResponse = backingFieldData[applicationName];
        if (clientEdgeResolverResponse == null || isSuspenseSentinel(clientEdgeResolverResponse)) {
            data[applicationName] = clientEdgeResolverResponse;
            return clientEdgeResolverResponse;
        }
        var validClientEdgeResolverResponse = assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse);
        switch(validClientEdgeResolverResponse.kind){
            case 'PluralConcrete':
                var storeIDs = getStoreIDsForPluralClientEdgeResolver(field, validClientEdgeResolverResponse.ids, this._resolverCache);
                var validStoreIDs = storeIDs;
                if (field.modelResolver != null) {
                    var modelResolver = field.modelResolver;
                    validStoreIDs = storeIDs.map(function(storeID) {
                        var model = _this2._readResolverFieldImpl(modelResolver, storeID);
                        return model != null ? storeID : null;
                    });
                }
                this._clientEdgeTraversalPath.push(null);
                var edgeValues = this._readLinkedIds(field.linkedField, validStoreIDs, record, data);
                this._clientEdgeTraversalPath.pop();
                data[applicationName] = edgeValues;
                return edgeValues;
            case 'SingularConcrete':
                var _getStoreIDAndTravers = getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, validClientEdgeResolverResponse.id, this._resolverCache), storeID = _getStoreIDAndTravers[0], traversalPathSegment = _getStoreIDAndTravers[1];
                if (field.modelResolver != null) {
                    var model = this._readResolverFieldImpl(field.modelResolver, storeID);
                    if (model == null) {
                        data[applicationName] = null;
                        return null;
                    }
                }
                this._clientEdgeTraversalPath.push(traversalPathSegment);
                var prevData = data[applicationName];
                !(prevData == null || typeof prevData === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : ("TURBOPACK unreachable", undefined) : void 0;
                var edgeValue = this._traverse(field.linkedField, storeID, prevData);
                this._clientEdgeTraversalPath.pop();
                data[applicationName] = edgeValue;
                return edgeValue;
            default:
                validClientEdgeResolverResponse.kind;
        }
    };
    _proto._readScalar = function _readScalar(field, record, data) {
        var _field$alias2;
        var applicationName = (_field$alias2 = field.alias) !== null && _field$alias2 !== void 0 ? _field$alias2 : field.name;
        var storageKey = getStorageKey(field, this._variables);
        var value = RelayModernRecord.getValue(record, storageKey);
        if (value === null) {
            this._maybeAddErrorResponseFields(record, storageKey);
        } else if (value === undefined) {
            this._markDataAsMissing();
        }
        data[applicationName] = value;
        return value;
    };
    _proto._readLink = function _readLink(field, record, data) {
        var _field$alias3;
        var applicationName = (_field$alias3 = field.alias) !== null && _field$alias3 !== void 0 ? _field$alias3 : field.name;
        var storageKey = getStorageKey(field, this._variables);
        var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
        if (linkedID == null) {
            data[applicationName] = linkedID;
            if (linkedID === null) {
                this._maybeAddErrorResponseFields(record, storageKey);
            } else if (linkedID === undefined) {
                this._markDataAsMissing();
            }
            return linkedID;
        }
        var prevData = data[applicationName];
        !(prevData == null || typeof prevData === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : ("TURBOPACK unreachable", undefined) : void 0;
        var value = this._traverse(field, linkedID, prevData);
        data[applicationName] = value;
        return value;
    };
    _proto._readActorChange = function _readActorChange(field, record, data) {
        var _field$alias4;
        var applicationName = (_field$alias4 = field.alias) !== null && _field$alias4 !== void 0 ? _field$alias4 : field.name;
        var storageKey = getStorageKey(field, this._variables);
        var externalRef = RelayModernRecord.getActorLinkedRecordID(record, storageKey);
        if (externalRef == null) {
            data[applicationName] = externalRef;
            if (externalRef === undefined) {
                this._markDataAsMissing();
            } else if (externalRef === null) {
                this._maybeAddErrorResponseFields(record, storageKey);
            }
            return data[applicationName];
        }
        var actorIdentifier = externalRef[0], dataID = externalRef[1];
        var fragmentRef = {};
        this._createFragmentPointer(field.fragmentSpread, RelayModernRecord.fromObject({
            __id: dataID
        }), fragmentRef);
        data[applicationName] = {
            __fragmentRef: fragmentRef,
            __viewer: actorIdentifier
        };
        return data[applicationName];
    };
    _proto._readPluralLink = function _readPluralLink(field, record, data) {
        var storageKey = getStorageKey(field, this._variables);
        var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
        if (linkedIDs === null) {
            this._maybeAddErrorResponseFields(record, storageKey);
        }
        return this._readLinkedIds(field, linkedIDs, record, data);
    };
    _proto._readLinkedIds = function _readLinkedIds(field, linkedIDs, record, data) {
        var _this3 = this;
        var _field$alias5;
        var applicationName = (_field$alias5 = field.alias) !== null && _field$alias5 !== void 0 ? _field$alias5 : field.name;
        if (linkedIDs == null) {
            data[applicationName] = linkedIDs;
            if (linkedIDs === undefined) {
                this._markDataAsMissing();
            }
            return linkedIDs;
        }
        var prevData = data[applicationName];
        !(prevData == null || Array.isArray(prevData)) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an array, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : ("TURBOPACK unreachable", undefined) : void 0;
        var linkedArray = prevData || [];
        linkedIDs.forEach(function(linkedID, nextIndex) {
            if (linkedID == null) {
                if (linkedID === undefined) {
                    _this3._markDataAsMissing();
                }
                linkedArray[nextIndex] = linkedID;
                return;
            }
            var prevItem = linkedArray[nextIndex];
            !(prevItem == null || typeof prevItem === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevItem) : ("TURBOPACK unreachable", undefined) : void 0;
            linkedArray[nextIndex] = _this3._traverse(field, linkedID, prevItem);
        });
        data[applicationName] = linkedArray;
        return linkedArray;
    };
    _proto._readModuleImport = function _readModuleImport(moduleImport, record, data) {
        var componentKey = getModuleComponentKey(moduleImport.documentName);
        var component = RelayModernRecord.getValue(record, componentKey);
        if (component == null) {
            if (component === undefined) {
                this._markDataAsMissing();
            }
            return;
        }
        this._createFragmentPointer({
            kind: 'FragmentSpread',
            name: moduleImport.fragmentName,
            args: moduleImport.args
        }, record, data);
        data[FRAGMENT_PROP_NAME_KEY] = moduleImport.fragmentPropName;
        data[MODULE_COMPONENT_KEY] = component;
    };
    _proto._createAliasedFragmentSpread = function _createAliasedFragmentSpread(namedFragmentSpread, record) {
        var abstractKey = namedFragmentSpread.abstractKey;
        if (abstractKey == null) {
            var typeName = RelayModernRecord.getType(record);
            if (typeName == null || typeName !== namedFragmentSpread.type) {
                return null;
            }
        } else {
            var implementsInterface = this._implementsInterface(record, abstractKey);
            if (implementsInterface === false) {
                return null;
            } else if (implementsInterface == null) {
                this._markDataAsMissing();
                return undefined;
            }
        }
        var fieldData = {};
        this._createFragmentPointer(namedFragmentSpread.fragment, record, fieldData);
        return RelayModernRecord.fromObject(fieldData);
    };
    _proto._readInlineFragment = function _readInlineFragment(inlineFragment, record, data) {
        var abstractKey = inlineFragment.abstractKey;
        if (abstractKey == null) {
            var typeName = RelayModernRecord.getType(record);
            if (typeName == null || typeName !== inlineFragment.type) {
                return null;
            } else {
                var hasExpectedData = this._traverseSelections(inlineFragment.selections, record, data);
                if (!hasExpectedData) {
                    return false;
                }
            }
        } else {
            var implementsInterface = this._implementsInterface(record, abstractKey);
            var parentIsMissingData = this._isMissingData;
            var parentIsWithinUnmatchedTypeRefinement = this._isWithinUnmatchedTypeRefinement;
            this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement || implementsInterface === false;
            this._traverseSelections(inlineFragment.selections, record, data);
            this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement;
            if (implementsInterface === false) {
                this._isMissingData = parentIsMissingData;
                return undefined;
            } else if (implementsInterface == null) {
                this._markDataAsMissing();
                return null;
            }
        }
        return data;
    };
    _proto._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data) {
        var fragmentPointers = data[FRAGMENTS_KEY];
        if (fragmentPointers == null) {
            fragmentPointers = data[FRAGMENTS_KEY] = {};
        }
        !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : ("TURBOPACK unreachable", undefined) : void 0;
        if (data[ID_KEY] == null) {
            data[ID_KEY] = RelayModernRecord.getDataID(record);
        }
        fragmentPointers[fragmentSpread.name] = getArgumentValues(fragmentSpread.args, this._variables, this._isWithinUnmatchedTypeRefinement);
        data[FRAGMENT_OWNER_KEY] = this._owner;
        if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
            if (this._clientEdgeTraversalPath.length > 0 && this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1] !== null) {
                data[CLIENT_EDGE_TRAVERSAL_PATH] = (0, _toConsumableArray2["default"])(this._clientEdgeTraversalPath);
            }
        }
    };
    _proto._createInlineDataOrResolverFragmentPointer = function _createInlineDataOrResolverFragmentPointer(fragmentSpreadOrFragment, record, data) {
        var fragmentPointers = data[FRAGMENTS_KEY];
        if (fragmentPointers == null) {
            fragmentPointers = data[FRAGMENTS_KEY] = {};
        }
        !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : ("TURBOPACK unreachable", undefined) : void 0;
        if (data[ID_KEY] == null) {
            data[ID_KEY] = RelayModernRecord.getDataID(record);
        }
        var inlineData = {};
        var parentFragmentName = this._fragmentName;
        this._fragmentName = fragmentSpreadOrFragment.name;
        var parentVariables = this._variables;
        var argumentVariables = fragmentSpreadOrFragment.args ? getArgumentValues(fragmentSpreadOrFragment.args, this._variables) : {};
        this._variables = RelayConcreteVariables.getFragmentVariables(fragmentSpreadOrFragment, this._owner.variables, argumentVariables);
        this._traverseSelections(fragmentSpreadOrFragment.selections, record, inlineData);
        this._variables = parentVariables;
        this._fragmentName = parentFragmentName;
        fragmentPointers[fragmentSpreadOrFragment.name] = inlineData;
    };
    _proto._addMissingRequiredFields = function _addMissingRequiredFields(additional) {
        if (this._missingRequiredFields == null) {
            this._missingRequiredFields = additional;
            return;
        }
        if (this._missingRequiredFields.action === 'THROW') {
            return;
        }
        if (additional.action === 'THROW') {
            this._missingRequiredFields = additional;
            return;
        }
        this._missingRequiredFields = {
            action: 'LOG',
            fields: [].concat((0, _toConsumableArray2["default"])(this._missingRequiredFields.fields), (0, _toConsumableArray2["default"])(additional.fields))
        };
    };
    _proto._implementsInterface = function _implementsInterface(record, abstractKey) {
        var typeName = RelayModernRecord.getType(record);
        var typeRecord = this._recordSource.get(generateTypeID(typeName));
        var implementsInterface = typeRecord != null ? RelayModernRecord.getValue(typeRecord, abstractKey) : null;
        return implementsInterface;
    };
    return RelayReader;
}();
function getResolverValue(field, variables, fragmentKey) {
    var resolverFunction = typeof field.resolverModule === 'function' ? field.resolverModule : field.resolverModule["default"];
    var resolverResult = null;
    var resolverError = null;
    try {
        var resolverFunctionArgs = [];
        if (field.fragment != null) {
            resolverFunctionArgs.push(fragmentKey);
        }
        var args = field.args ? getArgumentValues(field.args, variables) : undefined;
        resolverFunctionArgs.push(args);
        resolverResult = resolverFunction.apply(null, resolverFunctionArgs);
    } catch (e) {
        if (e === RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL) {
            resolverResult = undefined;
        } else {
            resolverError = e;
        }
    }
    return [
        resolverResult,
        resolverError
    ];
}
function assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse) {
    if (field.linkedField.plural) {
        !Array.isArray(clientEdgeResolverResponse) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Expected plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.') : ("TURBOPACK unreachable", undefined) : void 0;
        return {
            kind: 'PluralConcrete',
            ids: clientEdgeResolverResponse.map(function(response) {
                return extractIdFromResponse(response, 'Expected this plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.');
            })
        };
    } else {
        return {
            kind: 'SingularConcrete',
            id: extractIdFromResponse(clientEdgeResolverResponse, 'Expected this Client Edge Relay Resolver to return an ID of type `string` or an object with shape {id}.')
        };
    }
}
function getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {
    if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {
        if (field.backingField.normalizationInfo == null) {
            var concreteType = field.concreteType;
            !(concreteType != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : ("TURBOPACK unreachable", undefined) : void 0;
            return [
                resolverCache.ensureClientRecord(clientEdgeResolverResponse, concreteType),
                null
            ];
        } else {
            return [
                clientEdgeResolverResponse,
                null
            ];
        }
    } else {
        return [
            clientEdgeResolverResponse,
            {
                readerClientEdge: field,
                clientEdgeDestinationID: clientEdgeResolverResponse
            }
        ];
    }
}
function getStoreIDsForPluralClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {
    if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {
        if (field.backingField.normalizationInfo == null) {
            var concreteType = field.concreteType;
            !(concreteType != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : ("TURBOPACK unreachable", undefined) : void 0;
            return clientEdgeResolverResponse.map(function(id) {
                return resolverCache.ensureClientRecord(id, concreteType);
            });
        } else {
            return clientEdgeResolverResponse;
        }
    } else {
        ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Unexpected Client Edge to plural server type. This should be prevented by the compiler.') : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
    }
}
function extractIdFromResponse(individualResponse, errorMessage) {
    if (typeof individualResponse === 'string') {
        return individualResponse;
    } else if (typeof individualResponse === 'object' && individualResponse != null && typeof individualResponse.id === 'string') {
        return individualResponse.id;
    }
    ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, errorMessage) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
}
module.exports = {
    read: read
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayPublishQueue.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _global$ErrorUtils$ap, _global$ErrorUtils;
var RelayRecordSourceMutator = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayRecordSourceMutator.js [app-ssr] (ecmascript)");
var RelayRecordSourceProxy = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayRecordSourceProxy.js [app-ssr] (ecmascript)");
var RelayRecordSourceSelectorProxy = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayRecordSourceSelectorProxy.js [app-ssr] (ecmascript)");
var RelayReader = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayReader.js [app-ssr] (ecmascript)");
var RelayRecordSource = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordSource.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : undefined;
var applyWithGuard = (_global$ErrorUtils$ap = _global === null || _global === void 0 ? void 0 : (_global$ErrorUtils = _global.ErrorUtils) === null || _global$ErrorUtils === void 0 ? void 0 : _global$ErrorUtils.applyWithGuard) !== null && _global$ErrorUtils$ap !== void 0 ? _global$ErrorUtils$ap : function(callback, context, args, onError, name) {
    return callback.apply(context, args);
};
var RelayPublishQueue = /*#__PURE__*/ function() {
    function RelayPublishQueue(store, handlerProvider, getDataID, missingFieldHandlers) {
        this._hasStoreSnapshot = false;
        this._handlerProvider = handlerProvider || null;
        this._pendingBackupRebase = false;
        this._pendingData = new Set();
        this._pendingOptimisticUpdates = new Set();
        this._store = store;
        this._appliedOptimisticUpdates = new Set();
        this._gcHold = null;
        this._getDataID = getDataID;
        this._missingFieldHandlers = missingFieldHandlers;
    }
    var _proto = RelayPublishQueue.prototype;
    _proto.applyUpdate = function applyUpdate(updater) {
        !(!this._appliedOptimisticUpdates.has(updater) && !this._pendingOptimisticUpdates.has(updater)) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayPublishQueue: Cannot apply the same update function more than ' + 'once concurrently.') : ("TURBOPACK unreachable", undefined) : void 0;
        this._pendingOptimisticUpdates.add(updater);
    };
    _proto.revertUpdate = function revertUpdate(updater) {
        if (this._pendingOptimisticUpdates.has(updater)) {
            this._pendingOptimisticUpdates["delete"](updater);
        } else if (this._appliedOptimisticUpdates.has(updater)) {
            this._pendingBackupRebase = true;
            this._appliedOptimisticUpdates["delete"](updater);
        }
    };
    _proto.revertAll = function revertAll() {
        this._pendingBackupRebase = true;
        this._pendingOptimisticUpdates.clear();
        this._appliedOptimisticUpdates.clear();
    };
    _proto.commitPayload = function commitPayload(operation, payload, updater) {
        this._pendingBackupRebase = true;
        this._pendingData.add({
            kind: 'payload',
            operation: operation,
            payload: payload,
            updater: updater
        });
    };
    _proto.commitUpdate = function commitUpdate(updater) {
        this._pendingBackupRebase = true;
        this._pendingData.add({
            kind: 'updater',
            updater: updater
        });
    };
    _proto.commitSource = function commitSource(source) {
        this._pendingBackupRebase = true;
        this._pendingData.add({
            kind: 'source',
            source: source
        });
    };
    _proto.run = function run(sourceOperation) {
        var runWillClearGcHold = this._appliedOptimisticUpdates === 0 && !!this._gcHold;
        var runIsANoop = !this._pendingBackupRebase && this._pendingOptimisticUpdates.size === 0 && !runWillClearGcHold;
        if ("TURBOPACK compile-time truthy", 1) {
            ("TURBOPACK compile-time truthy", 1) ? warning(!runIsANoop, 'RelayPublishQueue.run was called, but the call would have been a noop.') : ("TURBOPACK unreachable", undefined);
            ("TURBOPACK compile-time truthy", 1) ? warning(this._isRunning !== true, 'A store update was detected within another store update. Please ' + "make sure new store updates aren't being executed within an " + 'updater function for a different update.') : ("TURBOPACK unreachable", undefined);
            this._isRunning = true;
        }
        if (runIsANoop) {
            if ("TURBOPACK compile-time truthy", 1) {
                this._isRunning = false;
            }
            return [];
        }
        if (this._pendingBackupRebase) {
            if (this._hasStoreSnapshot) {
                this._store.restore();
                this._hasStoreSnapshot = false;
            }
        }
        var invalidatedStore = this._commitData();
        if (this._pendingOptimisticUpdates.size || this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {
            if (!this._hasStoreSnapshot) {
                this._store.snapshot();
                this._hasStoreSnapshot = true;
            }
            this._applyUpdates();
        }
        this._pendingBackupRebase = false;
        if (this._appliedOptimisticUpdates.size > 0) {
            if (!this._gcHold) {
                this._gcHold = this._store.holdGC();
            }
        } else {
            if (this._gcHold) {
                this._gcHold.dispose();
                this._gcHold = null;
            }
        }
        if ("TURBOPACK compile-time truthy", 1) {
            this._isRunning = false;
        }
        return this._store.notify(sourceOperation, invalidatedStore);
    };
    _proto._publishSourceFromPayload = function _publishSourceFromPayload(pendingPayload) {
        var _this = this;
        var payload = pendingPayload.payload, operation = pendingPayload.operation, updater = pendingPayload.updater;
        var source = payload.source, fieldPayloads = payload.fieldPayloads;
        var mutator = new RelayRecordSourceMutator(this._store.getSource(), source);
        var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider, this._missingFieldHandlers);
        if (fieldPayloads && fieldPayloads.length) {
            fieldPayloads.forEach(function(fieldPayload) {
                var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);
                !handler ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernEnvironment: Expected a handler to be provided for ' + 'handle `%s`.', fieldPayload.handle) : ("TURBOPACK unreachable", undefined) : void 0;
                handler.update(recordSourceProxy, fieldPayload);
            });
        }
        if (updater) {
            var selector = operation.fragment;
            !(selector != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernEnvironment: Expected a selector to be provided with updater function.') : ("TURBOPACK unreachable", undefined) : void 0;
            var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, selector, this._missingFieldHandlers);
            var selectorData = lookupSelector(source, selector);
            updater(recordSourceSelectorProxy, selectorData);
        }
        var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();
        this._store.publish(source, idsMarkedForInvalidation);
        return recordSourceProxy.isStoreMarkedForInvalidation();
    };
    _proto._commitData = function _commitData() {
        var _this2 = this;
        if (!this._pendingData.size) {
            return false;
        }
        var invalidatedStore = false;
        this._pendingData.forEach(function(data) {
            if (data.kind === 'payload') {
                var payloadInvalidatedStore = _this2._publishSourceFromPayload(data);
                invalidatedStore = invalidatedStore || payloadInvalidatedStore;
            } else if (data.kind === 'source') {
                var source = data.source;
                _this2._store.publish(source);
            } else {
                var updater = data.updater;
                var sink = RelayRecordSource.create();
                var mutator = new RelayRecordSourceMutator(_this2._store.getSource(), sink);
                var recordSourceProxy = new RelayRecordSourceProxy(mutator, _this2._getDataID, _this2._handlerProvider, _this2._missingFieldHandlers);
                applyWithGuard(updater, null, [
                    recordSourceProxy
                ], null, 'RelayPublishQueue:commitData');
                invalidatedStore = invalidatedStore || recordSourceProxy.isStoreMarkedForInvalidation();
                var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();
                _this2._store.publish(sink, idsMarkedForInvalidation);
            }
        });
        this._pendingData.clear();
        return invalidatedStore;
    };
    _proto._applyUpdates = function _applyUpdates() {
        var _this3 = this;
        var sink = RelayRecordSource.create();
        var mutator = new RelayRecordSourceMutator(this._store.getSource(), sink);
        var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider, this._missingFieldHandlers);
        var processUpdate = function processUpdate(optimisticUpdate) {
            if (optimisticUpdate.storeUpdater) {
                var storeUpdater = optimisticUpdate.storeUpdater;
                applyWithGuard(storeUpdater, null, [
                    recordSourceProxy
                ], null, 'RelayPublishQueue:applyUpdates');
            } else {
                var operation = optimisticUpdate.operation, payload = optimisticUpdate.payload, updater = optimisticUpdate.updater;
                var source = payload.source, fieldPayloads = payload.fieldPayloads;
                if (source) {
                    recordSourceProxy.publishSource(source, fieldPayloads);
                }
                if (updater) {
                    var selectorData;
                    if (source) {
                        selectorData = lookupSelector(source, operation.fragment);
                    }
                    var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, operation.fragment, _this3._missingFieldHandlers);
                    applyWithGuard(updater, null, [
                        recordSourceSelectorProxy,
                        selectorData
                    ], null, 'RelayPublishQueue:applyUpdates');
                }
            }
        };
        if (this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {
            this._appliedOptimisticUpdates.forEach(processUpdate);
        }
        if (this._pendingOptimisticUpdates.size) {
            this._pendingOptimisticUpdates.forEach(function(optimisticUpdate) {
                processUpdate(optimisticUpdate);
                _this3._appliedOptimisticUpdates.add(optimisticUpdate);
            });
            this._pendingOptimisticUpdates.clear();
        }
        this._store.publish(sink);
    };
    return RelayPublishQueue;
}();
function lookupSelector(source, selector) {
    var selectorData = RelayReader.read(source, selector).data;
    if ("TURBOPACK compile-time truthy", 1) {
        var deepFreeze = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/deepFreeze.js [app-ssr] (ecmascript)");
        if (selectorData) {
            deepFreeze(selectorData);
        }
    }
    return selectorData;
}
module.exports = RelayPublishQueue;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/StoreInspector.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _toConsumableArray2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toConsumableArray.js [app-ssr] (ecmascript)"));
var inspect = function inspect() {};
if ("TURBOPACK compile-time truthy", 1) {
    var formattersInstalled = false;
    var installDevtoolFormatters = function installDevtoolFormatters() {
        var _window$devtoolsForma;
        if (formattersInstalled) {
            return;
        }
        formattersInstalled = true;
        if (window.devtoolsFormatters == null) {
            window.devtoolsFormatters = [];
        }
        if (!Array.isArray(window.devtoolsFormatters)) {
            return;
        }
        console.info('Make sure to select "Enable custom formatters" in the Chrome ' + 'Developer Tools settings, tab "Preferences" under the "Console" ' + 'section.');
        (_window$devtoolsForma = window.devtoolsFormatters).push.apply(_window$devtoolsForma, (0, _toConsumableArray2["default"])(createFormatters()));
    };
    var createFormatters = function createFormatters() {
        var listStyle = {
            style: 'list-style-type: none; padding: 0; margin: 0 0 0 12px; font-style: normal'
        };
        var keyStyle = {
            style: 'rgb(136, 19, 145)'
        };
        var nullStyle = {
            style: 'color: #777'
        };
        var reference = function reference(object, config) {
            return object == null ? [
                'span',
                nullStyle,
                'undefined'
            ] : [
                'object',
                {
                    object: object,
                    config: config
                }
            ];
        };
        var renderRecordHeader = function renderRecordHeader(record) {
            return [
                'span',
                {
                    style: 'font-style: italic'
                },
                record.__typename,
                [
                    'span',
                    nullStyle,
                    ' {id: "',
                    record.__id,
                    '", …}'
                ]
            ];
        };
        var isRecord = function isRecord(o) {
            return o != null && typeof o.__id === 'string';
        };
        var RecordEntry = function RecordEntry(key, value) {
            this.key = key;
            this.value = value;
        };
        var renderRecordEntries = function renderRecordEntries(record) {
            var children = Object.keys(record).map(function(key) {
                return [
                    'li',
                    {},
                    [
                        'object',
                        {
                            object: new RecordEntry(key, record[key])
                        }
                    ]
                ];
            });
            return [
                'ol',
                listStyle
            ].concat((0, _toConsumableArray2["default"])(children));
        };
        var recordFormatter = {
            header: function header(obj) {
                if (!isRecord(obj)) {
                    return null;
                }
                return renderRecordHeader(obj);
            },
            hasBody: function hasBody(obj) {
                return true;
            },
            body: function body(obj) {
                return renderRecordEntries(obj);
            }
        };
        var recordEntryFormatter = {
            header: function header(obj) {
                if (obj instanceof RecordEntry) {
                    var value = isRecord(obj.value) ? renderRecordHeader(obj.value) : reference(obj.value);
                    return [
                        'span',
                        keyStyle,
                        obj.key,
                        ': ',
                        value
                    ];
                }
                return null;
            },
            hasBody: function hasBody(obj) {
                return isRecord(obj.value);
            },
            body: function body(obj) {
                return renderRecordEntries(obj.value);
            }
        };
        return [
            recordFormatter,
            recordEntryFormatter
        ];
    };
    var getWrappedRecord = function getWrappedRecord(source, dataID) {
        var record = source.get(dataID);
        if (record == null) {
            return record;
        }
        return new Proxy((0, _objectSpread2["default"])({}, record), {
            get: function get(target, prop) {
                var value = target[prop];
                if (value == null) {
                    return value;
                }
                if (typeof value === 'object') {
                    if (typeof value.__ref === 'string') {
                        return getWrappedRecord(source, value.__ref);
                    }
                    if (Array.isArray(value.__refs)) {
                        return value.__refs.map(function(ref) {
                            return getWrappedRecord(source, ref);
                        });
                    }
                }
                return value;
            }
        });
    };
    inspect = function inspect(environment, dataID) {
        installDevtoolFormatters();
        return getWrappedRecord(environment.getStore().getSource(), dataID !== null && dataID !== void 0 ? dataID : 'client:root');
    };
}
module.exports = {
    inspect: inspect
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernEnvironment.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var RelayDefaultHandlerProvider = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/RelayDefaultHandlerProvider.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js [app-ssr] (ecmascript)"), INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE, assertInternalActorIdentifier = _require.assertInternalActorIdentifier;
var RelayObservable = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayObservable.js [app-ssr] (ecmascript)");
var wrapNetworkWithLogObserver = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/wrapNetworkWithLogObserver.js [app-ssr] (ecmascript)");
var RelayOperationTracker = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayOperationTracker.js [app-ssr] (ecmascript)");
var registerEnvironmentWithDevTools = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/registerEnvironmentWithDevTools.js [app-ssr] (ecmascript)");
var defaultGetDataID = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/defaultGetDataID.js [app-ssr] (ecmascript)");
var defaultRelayFieldLogger = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/defaultRelayFieldLogger.js [app-ssr] (ecmascript)");
var normalizeResponse = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/normalizeResponse.js [app-ssr] (ecmascript)");
var OperationExecutor = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/OperationExecutor.js [app-ssr] (ecmascript)");
var RelayPublishQueue = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayPublishQueue.js [app-ssr] (ecmascript)");
var RelayRecordSource = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordSource.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var RelayModernEnvironment = /*#__PURE__*/ function() {
    function RelayModernEnvironment(config) {
        var _this = this;
        var _config$log, _config$relayFieldLog, _config$UNSTABLE_defa, _config$getDataID, _config$missingFieldH, _config$handlerProvid, _config$scheduler, _config$isServer, _config$normalizeResp, _config$operationTrac;
        this.configName = config.configName;
        this._treatMissingFieldsAsNull = config.treatMissingFieldsAsNull === true;
        var operationLoader = config.operationLoader;
        if ("TURBOPACK compile-time truthy", 1) {
            if (operationLoader != null) {
                !(typeof operationLoader === 'object' && typeof operationLoader.get === 'function' && typeof operationLoader.load === 'function') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernEnvironment: Expected `operationLoader` to be an object ' + 'with get() and load() functions, got `%s`.', operationLoader) : ("TURBOPACK unreachable", undefined) : void 0;
            }
        }
        this.__log = (_config$log = config.log) !== null && _config$log !== void 0 ? _config$log : emptyFunction;
        this.relayFieldLogger = (_config$relayFieldLog = config.relayFieldLogger) !== null && _config$relayFieldLog !== void 0 ? _config$relayFieldLog : defaultRelayFieldLogger;
        this._defaultRenderPolicy = (_config$UNSTABLE_defa = config.UNSTABLE_defaultRenderPolicy) !== null && _config$UNSTABLE_defa !== void 0 ? _config$UNSTABLE_defa : 'partial';
        this._operationLoader = operationLoader;
        this._operationExecutions = new Map();
        this._network = wrapNetworkWithLogObserver(this, config.network);
        this._getDataID = (_config$getDataID = config.getDataID) !== null && _config$getDataID !== void 0 ? _config$getDataID : defaultGetDataID;
        this._missingFieldHandlers = (_config$missingFieldH = config.missingFieldHandlers) !== null && _config$missingFieldH !== void 0 ? _config$missingFieldH : [];
        this._publishQueue = new RelayPublishQueue(config.store, (_config$handlerProvid = config.handlerProvider) !== null && _config$handlerProvid !== void 0 ? _config$handlerProvid : RelayDefaultHandlerProvider, this._getDataID, this._missingFieldHandlers);
        this._scheduler = (_config$scheduler = config.scheduler) !== null && _config$scheduler !== void 0 ? _config$scheduler : null;
        this._store = config.store;
        this.options = config.options;
        this._isServer = (_config$isServer = config.isServer) !== null && _config$isServer !== void 0 ? _config$isServer : false;
        this._normalizeResponse = (_config$normalizeResp = config.normalizeResponse) !== null && _config$normalizeResp !== void 0 ? _config$normalizeResp : normalizeResponse;
        this.__setNet = function(newNet) {
            return _this._network = wrapNetworkWithLogObserver(_this, newNet);
        };
        if ("TURBOPACK compile-time truthy", 1) {
            var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/StoreInspector.js [app-ssr] (ecmascript)"), inspect = _require2.inspect;
            this.DEBUG_inspect = function(dataID) {
                return inspect(_this, dataID);
            };
        }
        this._operationTracker = (_config$operationTrac = config.operationTracker) !== null && _config$operationTrac !== void 0 ? _config$operationTrac : new RelayOperationTracker();
        this._shouldProcessClientComponents = config.shouldProcessClientComponents;
        registerEnvironmentWithDevTools(this);
    }
    var _proto = RelayModernEnvironment.prototype;
    _proto.getStore = function getStore() {
        return this._store;
    };
    _proto.getNetwork = function getNetwork() {
        return this._network;
    };
    _proto.getOperationTracker = function getOperationTracker() {
        return this._operationTracker;
    };
    _proto.getScheduler = function getScheduler() {
        return this._scheduler;
    };
    _proto.isRequestActive = function isRequestActive(requestIdentifier) {
        var activeState = this._operationExecutions.get(requestIdentifier);
        return activeState === 'active';
    };
    _proto.UNSTABLE_getDefaultRenderPolicy = function UNSTABLE_getDefaultRenderPolicy() {
        return this._defaultRenderPolicy;
    };
    _proto.applyUpdate = function applyUpdate(optimisticUpdate) {
        var _this2 = this;
        var dispose = function dispose() {
            _this2._scheduleUpdates(function() {
                _this2._publishQueue.revertUpdate(optimisticUpdate);
                _this2._publishQueue.run();
            });
        };
        this._scheduleUpdates(function() {
            _this2._publishQueue.applyUpdate(optimisticUpdate);
            _this2._publishQueue.run();
        });
        return {
            dispose: dispose
        };
    };
    _proto.revertUpdate = function revertUpdate(update) {
        var _this3 = this;
        this._scheduleUpdates(function() {
            _this3._publishQueue.revertUpdate(update);
            _this3._publishQueue.run();
        });
    };
    _proto.replaceUpdate = function replaceUpdate(update, newUpdate) {
        var _this4 = this;
        this._scheduleUpdates(function() {
            _this4._publishQueue.revertUpdate(update);
            _this4._publishQueue.applyUpdate(newUpdate);
            _this4._publishQueue.run();
        });
    };
    _proto.applyMutation = function applyMutation(optimisticConfig) {
        var subscription = this._execute({
            createSource: function createSource() {
                return RelayObservable.create(function(_sink) {});
            },
            isClientPayload: false,
            operation: optimisticConfig.operation,
            optimisticConfig: optimisticConfig,
            updater: null
        }).subscribe({});
        return {
            dispose: function dispose() {
                return subscription.unsubscribe();
            }
        };
    };
    _proto.check = function check(operation) {
        if (this._missingFieldHandlers.length === 0 && !operationHasClientAbstractTypes(operation)) {
            return this._store.check(operation);
        }
        return this._checkSelectorAndHandleMissingFields(operation, this._missingFieldHandlers);
    };
    _proto.commitPayload = function commitPayload(operation, payload) {
        this._execute({
            createSource: function createSource() {
                return RelayObservable.from({
                    data: payload
                });
            },
            isClientPayload: true,
            operation: operation,
            optimisticConfig: null,
            updater: null
        }).subscribe({});
    };
    _proto.commitUpdate = function commitUpdate(updater) {
        var _this5 = this;
        this._scheduleUpdates(function() {
            _this5._publishQueue.commitUpdate(updater);
            _this5._publishQueue.run();
        });
    };
    _proto.lookup = function lookup(readSelector) {
        return this._store.lookup(readSelector);
    };
    _proto.subscribe = function subscribe(snapshot, callback) {
        return this._store.subscribe(snapshot, callback);
    };
    _proto.retain = function retain(operation) {
        return this._store.retain(operation);
    };
    _proto.isServer = function isServer() {
        return this._isServer;
    };
    _proto._checkSelectorAndHandleMissingFields = function _checkSelectorAndHandleMissingFields(operation, handlers) {
        var _this6 = this;
        var target = RelayRecordSource.create();
        var source = this._store.getSource();
        var result = this._store.check(operation, {
            handlers: handlers,
            defaultActorIdentifier: INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,
            getSourceForActor: function getSourceForActor(actorIdentifier) {
                assertInternalActorIdentifier(actorIdentifier);
                return source;
            },
            getTargetForActor: function getTargetForActor(actorIdentifier) {
                assertInternalActorIdentifier(actorIdentifier);
                return target;
            }
        });
        if (target.size() > 0) {
            this._scheduleUpdates(function() {
                _this6._publishQueue.commitSource(target);
                _this6._publishQueue.run();
            });
        }
        return result;
    };
    _proto._scheduleUpdates = function _scheduleUpdates(task) {
        var scheduler = this._scheduler;
        if (scheduler != null) {
            scheduler.schedule(task);
        } else {
            task();
        }
    };
    _proto.execute = function execute(_ref) {
        var _this7 = this;
        var operation = _ref.operation;
        return this._execute({
            createSource: function createSource() {
                return _this7.getNetwork().execute(operation.request.node.params, operation.request.variables, operation.request.cacheConfig || {}, null);
            },
            isClientPayload: false,
            operation: operation,
            optimisticConfig: null,
            updater: null
        });
    };
    _proto.executeSubscription = function executeSubscription(_ref2) {
        var _this8 = this;
        var operation = _ref2.operation, updater = _ref2.updater;
        return this._execute({
            createSource: function createSource() {
                return _this8.getNetwork().execute(operation.request.node.params, operation.request.variables, operation.request.cacheConfig || {}, null);
            },
            isClientPayload: false,
            operation: operation,
            optimisticConfig: null,
            updater: updater
        });
    };
    _proto.executeMutation = function executeMutation(_ref3) {
        var _this9 = this;
        var operation = _ref3.operation, optimisticResponse = _ref3.optimisticResponse, optimisticUpdater = _ref3.optimisticUpdater, updater = _ref3.updater, uploadables = _ref3.uploadables;
        var optimisticConfig;
        if (optimisticResponse || optimisticUpdater) {
            optimisticConfig = {
                operation: operation,
                response: optimisticResponse,
                updater: optimisticUpdater
            };
        }
        return this._execute({
            createSource: function createSource() {
                return _this9.getNetwork().execute(operation.request.node.params, operation.request.variables, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, operation.request.cacheConfig), {}, {
                    force: true
                }), uploadables);
            },
            isClientPayload: false,
            operation: operation,
            optimisticConfig: optimisticConfig,
            updater: updater
        });
    };
    _proto.executeWithSource = function executeWithSource(_ref4) {
        var operation = _ref4.operation, source = _ref4.source;
        return this._execute({
            createSource: function createSource() {
                return source;
            },
            isClientPayload: false,
            operation: operation,
            optimisticConfig: null,
            updater: null
        });
    };
    _proto.toJSON = function toJSON() {
        var _this$configName;
        return "RelayModernEnvironment(".concat((_this$configName = this.configName) !== null && _this$configName !== void 0 ? _this$configName : '', ")");
    };
    _proto._execute = function _execute(_ref5) {
        var _this10 = this;
        var createSource = _ref5.createSource, isClientPayload = _ref5.isClientPayload, operation = _ref5.operation, optimisticConfig = _ref5.optimisticConfig, updater = _ref5.updater;
        var publishQueue = this._publishQueue;
        var store = this._store;
        return RelayObservable.create(function(sink) {
            var executor = OperationExecutor.execute({
                actorIdentifier: INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,
                getDataID: _this10._getDataID,
                isClientPayload: isClientPayload,
                log: _this10.__log,
                operation: operation,
                operationExecutions: _this10._operationExecutions,
                operationLoader: _this10._operationLoader,
                operationTracker: _this10._operationTracker,
                optimisticConfig: optimisticConfig,
                getPublishQueue: function getPublishQueue(actorIdentifier) {
                    assertInternalActorIdentifier(actorIdentifier);
                    return publishQueue;
                },
                scheduler: _this10._scheduler,
                shouldProcessClientComponents: _this10._shouldProcessClientComponents,
                sink: sink,
                source: createSource(),
                getStore: function getStore(actorIdentifier) {
                    assertInternalActorIdentifier(actorIdentifier);
                    return store;
                },
                treatMissingFieldsAsNull: _this10._treatMissingFieldsAsNull,
                updater: updater,
                normalizeResponse: _this10._normalizeResponse
            });
            return function() {
                return executor.cancel();
            };
        });
    };
    return RelayModernEnvironment;
}();
function operationHasClientAbstractTypes(operation) {
    return operation.root.node.kind === 'Operation' && operation.root.node.clientAbstractTypes != null;
}
RelayModernEnvironment.prototype['@@RelayModernEnvironment'] = true;
function emptyFunction() {}
module.exports = RelayModernEnvironment;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/resolveImmediate.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var resolvedPromise = Promise.resolve();
function resolveImmediate(callback) {
    resolvedPromise.then(callback)["catch"](throwNext);
}
function throwNext(error) {
    setTimeout(function() {
        throw error;
    }, 0);
}
module.exports = resolveImmediate;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)"), LINKED_FIELD = _require.LINKED_FIELD;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), getHandleStorageKey = _require2.getHandleStorageKey;
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function cloneRelayHandleSourceField(handleField, selections, variables) {
    var sourceField = selections.find(function(source) {
        return source.kind === LINKED_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);
    });
    !(sourceField && sourceField.kind === LINKED_FIELD) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'cloneRelayHandleSourceField: Expected a corresponding source field for ' + 'handle `%s`.', handleField.handle) : ("TURBOPACK unreachable", undefined) : void 0;
    var handleKey = getHandleStorageKey(handleField, variables);
    return {
        kind: 'LinkedField',
        alias: sourceField.alias,
        name: handleKey,
        storageKey: handleKey,
        args: null,
        concreteType: sourceField.concreteType,
        plural: sourceField.plural,
        selections: sourceField.selections
    };
}
module.exports = cloneRelayHandleSourceField;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/cloneRelayScalarHandleSourceField.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)"), SCALAR_FIELD = _require.SCALAR_FIELD;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), getHandleStorageKey = _require2.getHandleStorageKey;
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function cloneRelayScalarHandleSourceField(handleField, selections, variables) {
    var sourceField = selections.find(function(source) {
        return source.kind === SCALAR_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);
    });
    !(sourceField && sourceField.kind === SCALAR_FIELD) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'cloneRelayScalarHandleSourceField: Expected a corresponding source field for ' + 'handle `%s`.', handleField.handle) : ("TURBOPACK unreachable", undefined) : void 0;
    var handleKey = getHandleStorageKey(handleField, variables);
    return {
        kind: 'ScalarField',
        alias: sourceField.alias,
        name: handleKey,
        storageKey: handleKey,
        args: null
    };
}
module.exports = cloneRelayScalarHandleSourceField;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/DataChecker.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var RelayRecordSourceMutator = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayRecordSourceMutator.js [app-ssr] (ecmascript)");
var RelayRecordSourceProxy = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayRecordSourceProxy.js [app-ssr] (ecmascript)");
var getOperation = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getOperation.js [app-ssr] (ecmascript)");
var RelayConcreteNode = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)"), isClientID = _require.isClientID;
var cloneRelayHandleSourceField = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js [app-ssr] (ecmascript)");
var cloneRelayScalarHandleSourceField = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/cloneRelayScalarHandleSourceField.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js [app-ssr] (ecmascript)"), getLocalVariables = _require2.getLocalVariables;
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordState.js [app-ssr] (ecmascript)"), EXISTENT = _require3.EXISTENT, UNKNOWN = _require3.UNKNOWN;
var RelayStoreUtils = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)");
var _require4 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/TypeID.js [app-ssr] (ecmascript)"), TYPE_SCHEMA_TYPE = _require4.TYPE_SCHEMA_TYPE, generateTypeID = _require4.generateTypeID;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE, CONDITION = RelayConcreteNode.CONDITION, CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT, CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION, CLIENT_EDGE_TO_CLIENT_OBJECT = RelayConcreteNode.CLIENT_EDGE_TO_CLIENT_OBJECT, DEFER = RelayConcreteNode.DEFER, FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD, INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT, LINKED_FIELD = RelayConcreteNode.LINKED_FIELD, LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE, MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT, RELAY_RESOLVER = RelayConcreteNode.RELAY_RESOLVER, RELAY_LIVE_RESOLVER = RelayConcreteNode.RELAY_LIVE_RESOLVER, SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD, SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE, STREAM = RelayConcreteNode.STREAM, TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;
var getModuleOperationKey = RelayStoreUtils.getModuleOperationKey, getStorageKey = RelayStoreUtils.getStorageKey, getArgumentValues = RelayStoreUtils.getArgumentValues;
function check(getSourceForActor, getTargetForActor, defaultActorIdentifier, selector, handlers, operationLoader, getDataID, shouldProcessClientComponents) {
    var dataID = selector.dataID, node = selector.node, variables = selector.variables;
    var checker = new DataChecker(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents);
    return checker.check(node, dataID);
}
var DataChecker = /*#__PURE__*/ function() {
    function DataChecker(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents) {
        this._getSourceForActor = getSourceForActor;
        this._getTargetForActor = getTargetForActor;
        this._getDataID = getDataID;
        this._source = getSourceForActor(defaultActorIdentifier);
        this._mutatorRecordSourceProxyCache = new Map();
        var _this$_getMutatorAndR = this._getMutatorAndRecordProxyForActor(defaultActorIdentifier), mutator = _this$_getMutatorAndR[0], recordSourceProxy = _this$_getMutatorAndR[1];
        this._mostRecentlyInvalidatedAt = null;
        this._handlers = handlers;
        this._mutator = mutator;
        this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;
        this._recordSourceProxy = recordSourceProxy;
        this._recordWasMissing = false;
        this._variables = variables;
        this._shouldProcessClientComponents = shouldProcessClientComponents;
    }
    var _proto = DataChecker.prototype;
    _proto._getMutatorAndRecordProxyForActor = function _getMutatorAndRecordProxyForActor(actorIdentifier) {
        var tuple = this._mutatorRecordSourceProxyCache.get(actorIdentifier);
        if (tuple == null) {
            var target = this._getTargetForActor(actorIdentifier);
            var mutator = new RelayRecordSourceMutator(this._getSourceForActor(actorIdentifier), target);
            var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, undefined, this._handlers);
            tuple = [
                mutator,
                recordSourceProxy
            ];
            this._mutatorRecordSourceProxyCache.set(actorIdentifier, tuple);
        }
        return tuple;
    };
    _proto.check = function check(node, dataID) {
        this._assignClientAbstractTypes(node);
        this._traverse(node, dataID);
        return this._recordWasMissing === true ? {
            status: 'missing',
            mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt
        } : {
            status: 'available',
            mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt
        };
    };
    _proto._getVariableValue = function _getVariableValue(name) {
        !this._variables.hasOwnProperty(name) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayAsyncLoader(): Undefined variable `%s`.', name) : ("TURBOPACK unreachable", undefined) : void 0;
        return this._variables[name];
    };
    _proto._handleMissing = function _handleMissing() {
        this._recordWasMissing = true;
    };
    _proto._handleMissingScalarField = function _handleMissingScalarField(field, dataID) {
        if (field.name === 'id' && field.alias == null && isClientID(dataID)) {
            return undefined;
        }
        var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};
        var _iterator = (0, _createForOfIteratorHelper2["default"])(this._handlers), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var handler = _step.value;
                if (handler.kind === 'scalar') {
                    var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);
                    if (newValue !== undefined) {
                        return newValue;
                    }
                }
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        this._handleMissing();
    };
    _proto._handleMissingLinkField = function _handleMissingLinkField(field, dataID) {
        var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};
        var _iterator2 = (0, _createForOfIteratorHelper2["default"])(this._handlers), _step2;
        try {
            for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                var handler = _step2.value;
                if (handler.kind === 'linked') {
                    var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);
                    if (newValue !== undefined && (newValue === null || this._mutator.getStatus(newValue) === EXISTENT)) {
                        return newValue;
                    }
                }
            }
        } catch (err) {
            _iterator2.e(err);
        } finally{
            _iterator2.f();
        }
        this._handleMissing();
    };
    _proto._handleMissingPluralLinkField = function _handleMissingPluralLinkField(field, dataID) {
        var _this = this;
        var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};
        var _iterator3 = (0, _createForOfIteratorHelper2["default"])(this._handlers), _step3;
        try {
            for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
                var handler = _step3.value;
                if (handler.kind === 'pluralLinked') {
                    var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);
                    if (newValue != null) {
                        var allItemsKnown = newValue.every(function(linkedID) {
                            return linkedID != null && _this._mutator.getStatus(linkedID) === EXISTENT;
                        });
                        if (allItemsKnown) {
                            return newValue;
                        }
                    } else if (newValue === null) {
                        return null;
                    }
                }
            }
        } catch (err) {
            _iterator3.e(err);
        } finally{
            _iterator3.f();
        }
        this._handleMissing();
    };
    _proto._traverse = function _traverse(node, dataID) {
        var status = this._mutator.getStatus(dataID);
        if (status === UNKNOWN) {
            this._handleMissing();
        }
        if (status === EXISTENT) {
            var record = this._source.get(dataID);
            var invalidatedAt = RelayModernRecord.getInvalidationEpoch(record);
            if (invalidatedAt != null) {
                this._mostRecentlyInvalidatedAt = this._mostRecentlyInvalidatedAt != null ? Math.max(this._mostRecentlyInvalidatedAt, invalidatedAt) : invalidatedAt;
            }
            this._traverseSelections(node.selections, dataID);
        }
    };
    _proto._traverseSelections = function _traverseSelections(selections, dataID) {
        var _this2 = this;
        selections.forEach(function(selection) {
            switch(selection.kind){
                case SCALAR_FIELD:
                    _this2._checkScalar(selection, dataID);
                    break;
                case LINKED_FIELD:
                    if (selection.plural) {
                        _this2._checkPluralLink(selection, dataID);
                    } else {
                        _this2._checkLink(selection, dataID);
                    }
                    break;
                case ACTOR_CHANGE:
                    _this2._checkActorChange(selection.linkedField, dataID);
                    break;
                case CONDITION:
                    var conditionValue = Boolean(_this2._getVariableValue(selection.condition));
                    if (conditionValue === selection.passingValue) {
                        _this2._traverseSelections(selection.selections, dataID);
                    }
                    break;
                case INLINE_FRAGMENT:
                    {
                        var _abstractKey = selection.abstractKey;
                        if (_abstractKey == null) {
                            var typeName = _this2._mutator.getType(dataID);
                            if (typeName === selection.type) {
                                _this2._traverseSelections(selection.selections, dataID);
                            }
                        } else {
                            var _recordType = _this2._mutator.getType(dataID);
                            !(_recordType != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'DataChecker: Expected record `%s` to have a known type', dataID) : ("TURBOPACK unreachable", undefined) : void 0;
                            var _typeID = generateTypeID(_recordType);
                            var _implementsInterface = _this2._mutator.getValue(_typeID, _abstractKey);
                            if (_implementsInterface === true) {
                                _this2._traverseSelections(selection.selections, dataID);
                            } else if (_implementsInterface == null) {
                                _this2._handleMissing();
                            }
                        }
                        break;
                    }
                case LINKED_HANDLE:
                    {
                        var handleField = cloneRelayHandleSourceField(selection, selections, _this2._variables);
                        if (handleField.plural) {
                            _this2._checkPluralLink(handleField, dataID);
                        } else {
                            _this2._checkLink(handleField, dataID);
                        }
                        break;
                    }
                case SCALAR_HANDLE:
                    {
                        var _handleField = cloneRelayScalarHandleSourceField(selection, selections, _this2._variables);
                        _this2._checkScalar(_handleField, dataID);
                        break;
                    }
                case MODULE_IMPORT:
                    _this2._checkModuleImport(selection, dataID);
                    break;
                case DEFER:
                case STREAM:
                    _this2._traverseSelections(selection.selections, dataID);
                    break;
                case FRAGMENT_SPREAD:
                    var prevVariables = _this2._variables;
                    _this2._variables = getLocalVariables(_this2._variables, selection.fragment.argumentDefinitions, selection.args);
                    _this2._traverseSelections(selection.fragment.selections, dataID);
                    _this2._variables = prevVariables;
                    break;
                case CLIENT_EXTENSION:
                    var recordWasMissing = _this2._recordWasMissing;
                    _this2._traverseSelections(selection.selections, dataID);
                    _this2._recordWasMissing = recordWasMissing;
                    break;
                case TYPE_DISCRIMINATOR:
                    var abstractKey = selection.abstractKey;
                    var recordType = _this2._mutator.getType(dataID);
                    !(recordType != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'DataChecker: Expected record `%s` to have a known type', dataID) : ("TURBOPACK unreachable", undefined) : void 0;
                    var typeID = generateTypeID(recordType);
                    var implementsInterface = _this2._mutator.getValue(typeID, abstractKey);
                    if (implementsInterface == null) {
                        _this2._handleMissing();
                    }
                    break;
                case CLIENT_COMPONENT:
                    if (_this2._shouldProcessClientComponents === false) {
                        break;
                    }
                    _this2._traverseSelections(selection.fragment.selections, dataID);
                    break;
                case RELAY_RESOLVER:
                    _this2._checkResolver(selection, dataID);
                    break;
                case RELAY_LIVE_RESOLVER:
                    _this2._checkResolver(selection, dataID);
                    break;
                case CLIENT_EDGE_TO_CLIENT_OBJECT:
                    _this2._checkResolver(selection.backingField, dataID);
                    break;
                default:
                    selection;
                    ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayAsyncLoader(): Unexpected ast kind `%s`.', selection.kind) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
            }
        });
    };
    _proto._checkResolver = function _checkResolver(resolver, dataID) {
        if (resolver.fragment) {
            this._traverseSelections([
                resolver.fragment
            ], dataID);
        }
    };
    _proto._checkModuleImport = function _checkModuleImport(moduleImport, dataID) {
        var operationLoader = this._operationLoader;
        !(operationLoader !== null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'DataChecker: Expected an operationLoader to be configured when using `@module`.') : ("TURBOPACK unreachable", undefined) : void 0;
        var operationKey = getModuleOperationKey(moduleImport.documentName);
        var operationReference = this._mutator.getValue(dataID, operationKey);
        if (operationReference == null) {
            if (operationReference === undefined) {
                this._handleMissing();
            }
            return;
        }
        var normalizationRootNode = operationLoader.get(operationReference);
        if (normalizationRootNode != null) {
            var operation = getOperation(normalizationRootNode);
            var prevVariables = this._variables;
            this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);
            this._traverse(operation, dataID);
            this._variables = prevVariables;
        } else {
            this._handleMissing();
        }
    };
    _proto._checkScalar = function _checkScalar(field, dataID) {
        var storageKey = getStorageKey(field, this._variables);
        var fieldValue = this._mutator.getValue(dataID, storageKey);
        if (fieldValue === undefined) {
            fieldValue = this._handleMissingScalarField(field, dataID);
            if (fieldValue !== undefined) {
                this._mutator.setValue(dataID, storageKey, fieldValue);
            }
        }
    };
    _proto._checkLink = function _checkLink(field, dataID) {
        var storageKey = getStorageKey(field, this._variables);
        var linkedID = this._mutator.getLinkedRecordID(dataID, storageKey);
        if (linkedID === undefined) {
            linkedID = this._handleMissingLinkField(field, dataID);
            if (linkedID != null) {
                this._mutator.setLinkedRecordID(dataID, storageKey, linkedID);
            } else if (linkedID === null) {
                this._mutator.setValue(dataID, storageKey, null);
            }
        }
        if (linkedID != null) {
            this._traverse(field, linkedID);
        }
    };
    _proto._checkPluralLink = function _checkPluralLink(field, dataID) {
        var _this3 = this;
        var storageKey = getStorageKey(field, this._variables);
        var linkedIDs = this._mutator.getLinkedRecordIDs(dataID, storageKey);
        if (linkedIDs === undefined) {
            linkedIDs = this._handleMissingPluralLinkField(field, dataID);
            if (linkedIDs != null) {
                this._mutator.setLinkedRecordIDs(dataID, storageKey, linkedIDs);
            } else if (linkedIDs === null) {
                this._mutator.setValue(dataID, storageKey, null);
            }
        }
        if (linkedIDs) {
            linkedIDs.forEach(function(linkedID) {
                if (linkedID != null) {
                    _this3._traverse(field, linkedID);
                }
            });
        }
    };
    _proto._checkActorChange = function _checkActorChange(field, dataID) {
        var storageKey = getStorageKey(field, this._variables);
        var record = this._source.get(dataID);
        var tuple = record != null ? RelayModernRecord.getActorLinkedRecordID(record, storageKey) : record;
        if (tuple == null) {
            if (tuple === undefined) {
                this._handleMissing();
            }
        } else {
            var actorIdentifier = tuple[0], linkedID = tuple[1];
            var prevSource = this._source;
            var prevMutator = this._mutator;
            var prevRecordSourceProxy = this._recordSourceProxy;
            var _this$_getMutatorAndR2 = this._getMutatorAndRecordProxyForActor(actorIdentifier), mutator = _this$_getMutatorAndR2[0], recordSourceProxy = _this$_getMutatorAndR2[1];
            this._source = this._getSourceForActor(actorIdentifier);
            this._mutator = mutator;
            this._recordSourceProxy = recordSourceProxy;
            this._assignClientAbstractTypes(field);
            this._traverse(field, linkedID);
            this._source = prevSource;
            this._mutator = prevMutator;
            this._recordSourceProxy = prevRecordSourceProxy;
        }
    };
    _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node) {
        var clientAbstractTypes = node.clientAbstractTypes;
        if (clientAbstractTypes != null) {
            for(var _i = 0, _Object$keys = Object.keys(clientAbstractTypes); _i < _Object$keys.length; _i++){
                var abstractType = _Object$keys[_i];
                var _iterator4 = (0, _createForOfIteratorHelper2["default"])(clientAbstractTypes[abstractType]), _step4;
                try {
                    for(_iterator4.s(); !(_step4 = _iterator4.n()).done;){
                        var concreteType = _step4.value;
                        var typeID = generateTypeID(concreteType);
                        if (this._source.get(typeID) == null) {
                            this._mutator.create(typeID, TYPE_SCHEMA_TYPE);
                        }
                        if (this._mutator.getValue(typeID, abstractType) == null) {
                            this._mutator.setValue(typeID, abstractType, true);
                        }
                    }
                } catch (err) {
                    _iterator4.e(err);
                } finally{
                    _iterator4.f();
                }
            }
        }
    };
    return DataChecker;
}();
module.exports = {
    check: check
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayOptimisticRecordSource.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var RelayRecordSource = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordSource.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var UNPUBLISH_RECORD_SENTINEL = RelayModernRecord.fromObject(Object.freeze({
    __UNPUBLISH_RECORD_SENTINEL: true
}));
var RelayOptimisticRecordSource = /*#__PURE__*/ function() {
    function RelayOptimisticRecordSource(base) {
        this._base = base;
        this._sink = RelayRecordSource.create();
    }
    var _proto = RelayOptimisticRecordSource.prototype;
    _proto.has = function has(dataID) {
        if (this._sink.has(dataID)) {
            var sinkRecord = this._sink.get(dataID);
            return sinkRecord !== UNPUBLISH_RECORD_SENTINEL;
        } else {
            return this._base.has(dataID);
        }
    };
    _proto.get = function get(dataID) {
        if (this._sink.has(dataID)) {
            var sinkRecord = this._sink.get(dataID);
            if (sinkRecord === UNPUBLISH_RECORD_SENTINEL) {
                return undefined;
            } else {
                return sinkRecord;
            }
        } else {
            return this._base.get(dataID);
        }
    };
    _proto.getStatus = function getStatus(dataID) {
        var record = this.get(dataID);
        if (record === undefined) {
            return 'UNKNOWN';
        } else if (record === null) {
            return 'NONEXISTENT';
        } else {
            return 'EXISTENT';
        }
    };
    _proto.clear = function clear() {
        this._base = RelayRecordSource.create();
        this._sink.clear();
    };
    _proto["delete"] = function _delete(dataID) {
        this._sink["delete"](dataID);
    };
    _proto.remove = function remove(dataID) {
        this._sink.set(dataID, UNPUBLISH_RECORD_SENTINEL);
    };
    _proto.set = function set(dataID, record) {
        this._sink.set(dataID, record);
    };
    _proto.getRecordIDs = function getRecordIDs() {
        return Object.keys(this.toJSON());
    };
    _proto.size = function size() {
        return Object.keys(this.toJSON()).length;
    };
    _proto.toJSON = function toJSON() {
        var _this = this;
        var merged = (0, _objectSpread2["default"])({}, this._base.toJSON());
        this._sink.getRecordIDs().forEach(function(dataID) {
            var record = _this.get(dataID);
            if (record === undefined) {
                delete merged[dataID];
            } else {
                merged[dataID] = RelayModernRecord.toJSON(record);
            }
        });
        return merged;
    };
    _proto.getOptimisticRecordIDs = function getOptimisticRecordIDs() {
        return new Set(this._sink.getRecordIDs());
    };
    return RelayOptimisticRecordSource;
}();
function create(base) {
    return new RelayOptimisticRecordSource(base);
}
function getOptimisticRecordIDs(source) {
    !(source instanceof RelayOptimisticRecordSource) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'getOptimisticRecordIDs: Instance of RelayOptimisticRecordSource is expected') : ("TURBOPACK unreachable", undefined) : void 0;
    return source.getOptimisticRecordIDs();
}
module.exports = {
    create: create,
    getOptimisticRecordIDs: getOptimisticRecordIDs
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/experimental-live-resolvers/getOutputTypeRecordIDs.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS = _require.RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function getOutputTypeRecordIDs(record) {
    var maybeOutputTypeRecordIDs = RelayModernRecord.getValue(record, RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS);
    if (maybeOutputTypeRecordIDs == null) {
        return null;
    }
    !(maybeOutputTypeRecordIDs instanceof Set) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'getOutputTypeRecordIDs: Expected the `%s` field on record `%s` to be of type Set. Instead, it is a %s.', RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS, typeof maybeOutputTypeRecordIDs) : ("TURBOPACK unreachable", undefined) : void 0;
    return maybeOutputTypeRecordIDs;
}
module.exports = getOutputTypeRecordIDs;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayReferenceMarker.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var getOperation = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getOperation.js [app-ssr] (ecmascript)");
var RelayConcreteNode = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)");
var cloneRelayHandleSourceField = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js [app-ssr] (ecmascript)");
var getOutputTypeRecordIDs = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/experimental-live-resolvers/getOutputTypeRecordIDs.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js [app-ssr] (ecmascript)"), getLocalVariables = _require.getLocalVariables;
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var RelayStoreUtils = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/TypeID.js [app-ssr] (ecmascript)"), generateTypeID = _require2.generateTypeID;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE, CONDITION = RelayConcreteNode.CONDITION, CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT, CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION, DEFER = RelayConcreteNode.DEFER, FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD, INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT, LINKED_FIELD = RelayConcreteNode.LINKED_FIELD, MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT, LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE, SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD, SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE, STREAM = RelayConcreteNode.STREAM, TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR, RELAY_RESOLVER = RelayConcreteNode.RELAY_RESOLVER, RELAY_LIVE_RESOLVER = RelayConcreteNode.RELAY_LIVE_RESOLVER, CLIENT_EDGE_TO_CLIENT_OBJECT = RelayConcreteNode.CLIENT_EDGE_TO_CLIENT_OBJECT;
var getStorageKey = RelayStoreUtils.getStorageKey, getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;
function mark(recordSource, selector, references, operationLoader, shouldProcessClientComponents) {
    var dataID = selector.dataID, node = selector.node, variables = selector.variables;
    var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents);
    marker.mark(node, dataID);
}
var RelayReferenceMarker = /*#__PURE__*/ function() {
    function RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents) {
        this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;
        this._operationName = null;
        this._recordSource = recordSource;
        this._references = references;
        this._variables = variables;
        this._shouldProcessClientComponents = shouldProcessClientComponents;
    }
    var _proto = RelayReferenceMarker.prototype;
    _proto.mark = function mark(node, dataID) {
        if (node.kind === 'Operation' || node.kind === 'SplitOperation') {
            this._operationName = node.name;
        }
        this._traverse(node, dataID);
    };
    _proto._traverse = function _traverse(node, dataID) {
        this._references.add(dataID);
        var record = this._recordSource.get(dataID);
        if (record == null) {
            return;
        }
        this._traverseSelections(node.selections, record);
    };
    _proto._getVariableValue = function _getVariableValue(name) {
        !this._variables.hasOwnProperty(name) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReferenceMarker(): Undefined variable `%s`.', name) : ("TURBOPACK unreachable", undefined) : void 0;
        return this._variables[name];
    };
    _proto._traverseSelections = function _traverseSelections(selections, record) {
        var _this = this;
        selections.forEach(function(selection) {
            switch(selection.kind){
                case ACTOR_CHANGE:
                    _this._traverseLink(selection.linkedField, record);
                    break;
                case LINKED_FIELD:
                    if (selection.plural) {
                        _this._traversePluralLink(selection, record);
                    } else {
                        _this._traverseLink(selection, record);
                    }
                    break;
                case CONDITION:
                    var conditionValue = Boolean(_this._getVariableValue(selection.condition));
                    if (conditionValue === selection.passingValue) {
                        _this._traverseSelections(selection.selections, record);
                    }
                    break;
                case INLINE_FRAGMENT:
                    if (selection.abstractKey == null) {
                        var typeName = RelayModernRecord.getType(record);
                        if (typeName != null && typeName === selection.type || typeName === RelayStoreUtils.ROOT_TYPE) {
                            _this._traverseSelections(selection.selections, record);
                        }
                    } else {
                        var _typeName = RelayModernRecord.getType(record);
                        var typeID = generateTypeID(_typeName);
                        _this._references.add(typeID);
                        _this._traverseSelections(selection.selections, record);
                    }
                    break;
                case FRAGMENT_SPREAD:
                    var prevVariables = _this._variables;
                    _this._variables = getLocalVariables(_this._variables, selection.fragment.argumentDefinitions, selection.args);
                    _this._traverseSelections(selection.fragment.selections, record);
                    _this._variables = prevVariables;
                    break;
                case LINKED_HANDLE:
                    var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);
                    if (handleField.plural) {
                        _this._traversePluralLink(handleField, record);
                    } else {
                        _this._traverseLink(handleField, record);
                    }
                    break;
                case DEFER:
                case STREAM:
                    _this._traverseSelections(selection.selections, record);
                    break;
                case SCALAR_FIELD:
                case SCALAR_HANDLE:
                    break;
                case TYPE_DISCRIMINATOR:
                    {
                        var _typeName2 = RelayModernRecord.getType(record);
                        var _typeID = generateTypeID(_typeName2);
                        _this._references.add(_typeID);
                        break;
                    }
                case MODULE_IMPORT:
                    _this._traverseModuleImport(selection, record);
                    break;
                case CLIENT_EXTENSION:
                    _this._traverseSelections(selection.selections, record);
                    break;
                case CLIENT_COMPONENT:
                    if (_this._shouldProcessClientComponents === false) {
                        break;
                    }
                    _this._traverseSelections(selection.fragment.selections, record);
                    break;
                case RELAY_RESOLVER:
                    _this._traverseResolverField(selection, record);
                    break;
                case RELAY_LIVE_RESOLVER:
                    _this._traverseResolverField(selection, record);
                    break;
                case CLIENT_EDGE_TO_CLIENT_OBJECT:
                    _this._traverseClientEdgeToClientObject(selection, record);
                    break;
                default:
                    selection;
                    ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReferenceMarker: Unknown AST node `%s`.', selection) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
            }
        });
    };
    _proto._traverseClientEdgeToClientObject = function _traverseClientEdgeToClientObject(field, record) {
        var dataID = this._traverseResolverField(field.backingField, record);
        if (dataID == null) {
            return;
        }
        var resolverRecord = this._recordSource.get(dataID);
        if (resolverRecord == null) {
            return;
        }
        if (field.backingField.isOutputType) {
            var outputTypeRecordIDs = getOutputTypeRecordIDs(resolverRecord);
            if (outputTypeRecordIDs != null) {
                var _iterator = (0, _createForOfIteratorHelper2["default"])(outputTypeRecordIDs), _step;
                try {
                    for(_iterator.s(); !(_step = _iterator.n()).done;){
                        var _dataID = _step.value;
                        this._references.add(_dataID);
                    }
                } catch (err) {
                    _iterator.e(err);
                } finally{
                    _iterator.f();
                }
            }
        } else {
            var linkedField = field.linkedField;
            var concreteType = linkedField.concreteType;
            if (concreteType == null) {
                return;
            }
            if (linkedField.plural) {
                var dataIDs = RelayModernRecord.getResolverLinkedRecordIDs(resolverRecord, concreteType);
                if (dataIDs != null) {
                    var _iterator2 = (0, _createForOfIteratorHelper2["default"])(dataIDs), _step2;
                    try {
                        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                            var _dataID2 = _step2.value;
                            if (_dataID2 != null) {
                                this._traverse(linkedField, _dataID2);
                            }
                        }
                    } catch (err) {
                        _iterator2.e(err);
                    } finally{
                        _iterator2.f();
                    }
                }
            } else {
                var _dataID3 = RelayModernRecord.getResolverLinkedRecordID(resolverRecord, concreteType);
                if (_dataID3 != null) {
                    this._traverse(linkedField, _dataID3);
                }
            }
        }
    };
    _proto._traverseResolverField = function _traverseResolverField(field, record) {
        var storageKey = getStorageKey(field, this._variables);
        var dataID = RelayModernRecord.getLinkedRecordID(record, storageKey);
        if (dataID != null) {
            this._references.add(dataID);
        }
        var fragment = field.fragment;
        if (fragment != null) {
            this._traverseSelections([
                fragment
            ], record);
        }
        return dataID;
    };
    _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {
        var _this$_operationName;
        var operationLoader = this._operationLoader;
        !(operationLoader !== null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`. ' + 'Could not load fragment `%s` in operation `%s`.', moduleImport.fragmentName, (_this$_operationName = this._operationName) !== null && _this$_operationName !== void 0 ? _this$_operationName : '(unknown)') : ("TURBOPACK unreachable", undefined) : void 0;
        var operationKey = getModuleOperationKey(moduleImport.documentName);
        var operationReference = RelayModernRecord.getValue(record, operationKey);
        if (operationReference == null) {
            return;
        }
        var normalizationRootNode = operationLoader.get(operationReference);
        if (normalizationRootNode != null) {
            var operation = getOperation(normalizationRootNode);
            var prevVariables = this._variables;
            this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);
            this._traverseSelections(operation.selections, record);
            this._variables = prevVariables;
        }
    };
    _proto._traverseLink = function _traverseLink(field, record) {
        var storageKey = getStorageKey(field, this._variables);
        var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
        if (linkedID == null) {
            return;
        }
        this._traverse(field, linkedID);
    };
    _proto._traversePluralLink = function _traversePluralLink(field, record) {
        var _this2 = this;
        var storageKey = getStorageKey(field, this._variables);
        var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
        if (linkedIDs == null) {
            return;
        }
        linkedIDs.forEach(function(linkedID) {
            if (linkedID != null) {
                _this2._traverse(field, linkedID);
            }
        });
    };
    return RelayReferenceMarker;
}();
module.exports = {
    mark: mark
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/hasOverlappingIDs.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var ITERATOR_KEY = Symbol.iterator;
function hasOverlappingIDs(seenRecords, updatedRecordIDs) {
    var iterator = seenRecords[ITERATOR_KEY]();
    var next = iterator.next();
    while(!next.done){
        var key = next.value;
        if (updatedRecordIDs.has(key)) {
            return true;
        }
        next = iterator.next();
    }
    return false;
}
module.exports = hasOverlappingIDs;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/hasSignificantOverlappingIDs.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), ROOT_ID = _require.ROOT_ID;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ViewerPattern.js [app-ssr] (ecmascript)"), VIEWER_ID = _require2.VIEWER_ID;
var ITERATOR_KEY = Symbol.iterator;
function hasSignificantOverlappingIDs(seenRecords, updatedRecordIDs) {
    var iterator = seenRecords[ITERATOR_KEY]();
    var next = iterator.next();
    while(!next.done){
        var key = next.value;
        if (updatedRecordIDs.has(key) && key !== ROOT_ID && key !== VIEWER_ID) {
            return true;
        }
        next = iterator.next();
    }
    return false;
}
module.exports = hasSignificantOverlappingIDs;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreSubscriptions.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var deepFreeze = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/deepFreeze.js [app-ssr] (ecmascript)");
var recycleNodesInto = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/recycleNodesInto.js [app-ssr] (ecmascript)");
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var hasOverlappingIDs = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/hasOverlappingIDs.js [app-ssr] (ecmascript)");
var hasSignificantOverlappingIDs = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/hasSignificantOverlappingIDs.js [app-ssr] (ecmascript)");
var RelayReader = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayReader.js [app-ssr] (ecmascript)");
var RelayStoreSubscriptions = /*#__PURE__*/ function() {
    function RelayStoreSubscriptions(log, resolverCache) {
        this._subscriptions = new Set();
        this.__log = log;
        this._resolverCache = resolverCache;
    }
    var _proto = RelayStoreSubscriptions.prototype;
    _proto.subscribe = function subscribe(snapshot, callback) {
        var _this = this;
        var subscription = {
            backup: null,
            callback: callback,
            snapshot: snapshot,
            stale: false
        };
        var dispose = function dispose() {
            _this._subscriptions["delete"](subscription);
        };
        this._subscriptions.add(subscription);
        return {
            dispose: dispose
        };
    };
    _proto.snapshotSubscriptions = function snapshotSubscriptions(source) {
        var _this2 = this;
        this._subscriptions.forEach(function(subscription) {
            if (!subscription.stale) {
                subscription.backup = subscription.snapshot;
                return;
            }
            var snapshot = subscription.snapshot;
            var backup = RelayReader.read(source, snapshot.selector, _this2._resolverCache);
            var nextData = recycleNodesInto(snapshot.data, backup.data);
            backup.data = nextData;
            subscription.backup = backup;
        });
    };
    _proto.restoreSubscriptions = function restoreSubscriptions() {
        this._subscriptions.forEach(function(subscription) {
            var backup = subscription.backup;
            subscription.backup = null;
            if (backup) {
                if (backup.data !== subscription.snapshot.data) {
                    subscription.stale = true;
                }
                subscription.snapshot = {
                    data: subscription.snapshot.data,
                    isMissingData: backup.isMissingData,
                    missingClientEdges: backup.missingClientEdges,
                    missingLiveResolverFields: backup.missingLiveResolverFields,
                    seenRecords: backup.seenRecords,
                    selector: backup.selector,
                    missingRequiredFields: backup.missingRequiredFields,
                    relayResolverErrors: backup.relayResolverErrors,
                    errorResponseFields: backup.errorResponseFields
                };
            } else {
                subscription.stale = true;
            }
        });
    };
    _proto.updateSubscriptions = function updateSubscriptions(source, updatedRecordIDs, updatedOwners, sourceOperation) {
        var _this3 = this;
        var hasUpdatedRecords = updatedRecordIDs.size !== 0;
        this._subscriptions.forEach(function(subscription) {
            var owner = _this3._updateSubscription(source, subscription, updatedRecordIDs, hasUpdatedRecords, sourceOperation);
            if (owner != null) {
                updatedOwners.push(owner);
            }
        });
    };
    _proto._updateSubscription = function _updateSubscription(source, subscription, updatedRecordIDs, hasUpdatedRecords, sourceOperation) {
        var backup = subscription.backup, callback = subscription.callback, snapshot = subscription.snapshot, stale = subscription.stale;
        var hasOverlappingUpdates = hasUpdatedRecords && hasOverlappingIDs(snapshot.seenRecords, updatedRecordIDs);
        if (!stale && !hasOverlappingUpdates) {
            return;
        }
        var nextSnapshot = hasOverlappingUpdates || !backup ? RelayReader.read(source, snapshot.selector, this._resolverCache) : backup;
        var nextData = recycleNodesInto(snapshot.data, nextSnapshot.data);
        nextSnapshot = {
            data: nextData,
            isMissingData: nextSnapshot.isMissingData,
            missingClientEdges: nextSnapshot.missingClientEdges,
            missingLiveResolverFields: nextSnapshot.missingLiveResolverFields,
            seenRecords: nextSnapshot.seenRecords,
            selector: nextSnapshot.selector,
            missingRequiredFields: nextSnapshot.missingRequiredFields,
            relayResolverErrors: nextSnapshot.relayResolverErrors,
            errorResponseFields: nextSnapshot.errorResponseFields
        };
        if ("TURBOPACK compile-time truthy", 1) {
            deepFreeze(nextSnapshot);
        }
        subscription.snapshot = nextSnapshot;
        subscription.stale = false;
        if (nextSnapshot.data !== snapshot.data) {
            if (this.__log && RelayFeatureFlags.ENABLE_NOTIFY_SUBSCRIPTION) {
                this.__log({
                    name: 'store.notify.subscription',
                    sourceOperation: sourceOperation,
                    snapshot: snapshot,
                    nextSnapshot: nextSnapshot
                });
            }
            callback(nextSnapshot);
            return snapshot.selector.owner;
        }
        if (RelayFeatureFlags.ENABLE_LOOSE_SUBSCRIPTION_ATTRIBUTION && (stale || hasSignificantOverlappingIDs(snapshot.seenRecords, updatedRecordIDs))) {
            return snapshot.selector.owner;
        }
    };
    return RelayStoreSubscriptions;
}();
module.exports = RelayStoreSubscriptions;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernStore.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js [app-ssr] (ecmascript)"), INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE, assertInternalActorIdentifier = _require.assertInternalActorIdentifier;
var deepFreeze = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/deepFreeze.js [app-ssr] (ecmascript)");
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var resolveImmediate = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/resolveImmediate.js [app-ssr] (ecmascript)");
var DataChecker = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/DataChecker.js [app-ssr] (ecmascript)");
var defaultGetDataID = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/defaultGetDataID.js [app-ssr] (ecmascript)");
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var RelayOptimisticRecordSource = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayOptimisticRecordSource.js [app-ssr] (ecmascript)");
var RelayReader = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayReader.js [app-ssr] (ecmascript)");
var RelayReferenceMarker = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayReferenceMarker.js [app-ssr] (ecmascript)");
var RelayStoreSubscriptions = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreSubscriptions.js [app-ssr] (ecmascript)");
var RelayStoreUtils = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), ROOT_ID = _require2.ROOT_ID, ROOT_TYPE = _require2.ROOT_TYPE;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ResolverCache.js [app-ssr] (ecmascript)"), RecordResolverCache = _require3.RecordResolverCache;
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var DEFAULT_RELEASE_BUFFER_SIZE = 10;
var RelayModernStore = /*#__PURE__*/ function() {
    function RelayModernStore(source, options) {
        var _this = this;
        var _options$gcReleaseBuf, _options$gcScheduler, _options$getDataID, _options$log, _options$operationLoa;
        (0, _defineProperty2["default"])(this, "_gcStep", function() {
            if (_this._gcRun) {
                if (_this._gcRun.next().done) {
                    _this._gcRun = null;
                } else {
                    _this._gcScheduler(_this._gcStep);
                }
            }
        });
        if ("TURBOPACK compile-time truthy", 1) {
            var storeIDs = source.getRecordIDs();
            for(var ii = 0; ii < storeIDs.length; ii++){
                var record = source.get(storeIDs[ii]);
                if (record) {
                    RelayModernRecord.freeze(record);
                }
            }
        }
        this._currentWriteEpoch = 0;
        this._gcHoldCounter = 0;
        this._gcReleaseBufferSize = (_options$gcReleaseBuf = options === null || options === void 0 ? void 0 : options.gcReleaseBufferSize) !== null && _options$gcReleaseBuf !== void 0 ? _options$gcReleaseBuf : DEFAULT_RELEASE_BUFFER_SIZE;
        this._gcRun = null;
        this._gcScheduler = (_options$gcScheduler = options === null || options === void 0 ? void 0 : options.gcScheduler) !== null && _options$gcScheduler !== void 0 ? _options$gcScheduler : resolveImmediate;
        this._getDataID = (_options$getDataID = options === null || options === void 0 ? void 0 : options.getDataID) !== null && _options$getDataID !== void 0 ? _options$getDataID : defaultGetDataID;
        this._globalInvalidationEpoch = null;
        this._invalidationSubscriptions = new Set();
        this._invalidatedRecordIDs = new Set();
        this.__log = (_options$log = options === null || options === void 0 ? void 0 : options.log) !== null && _options$log !== void 0 ? _options$log : null;
        this._queryCacheExpirationTime = options === null || options === void 0 ? void 0 : options.queryCacheExpirationTime;
        this._operationLoader = (_options$operationLoa = options === null || options === void 0 ? void 0 : options.operationLoader) !== null && _options$operationLoa !== void 0 ? _options$operationLoa : null;
        this._optimisticSource = null;
        this._recordSource = source;
        this._releaseBuffer = [];
        this._roots = new Map();
        this._shouldScheduleGC = false;
        this._resolverCache = new RecordResolverCache(function() {
            return _this._getMutableRecordSource();
        });
        this._storeSubscriptions = new RelayStoreSubscriptions(options === null || options === void 0 ? void 0 : options.log, this._resolverCache);
        this._updatedRecordIDs = new Set();
        this._shouldProcessClientComponents = options === null || options === void 0 ? void 0 : options.shouldProcessClientComponents;
        initializeRecordSource(this._recordSource);
    }
    var _proto = RelayModernStore.prototype;
    _proto.getSource = function getSource() {
        var _this$_optimisticSour;
        return (_this$_optimisticSour = this._optimisticSource) !== null && _this$_optimisticSour !== void 0 ? _this$_optimisticSour : this._recordSource;
    };
    _proto._getMutableRecordSource = function _getMutableRecordSource() {
        var _this$_optimisticSour2;
        return (_this$_optimisticSour2 = this._optimisticSource) !== null && _this$_optimisticSour2 !== void 0 ? _this$_optimisticSour2 : this._recordSource;
    };
    _proto.check = function check(operation, options) {
        var _options$handlers, _options$getSourceFor, _options$getTargetFor, _options$defaultActor;
        var selector = operation.root;
        var source = this._getMutableRecordSource();
        var globalInvalidationEpoch = this._globalInvalidationEpoch;
        var rootEntry = this._roots.get(operation.request.identifier);
        var operationLastWrittenAt = rootEntry != null ? rootEntry.epoch : null;
        if (globalInvalidationEpoch != null) {
            if (operationLastWrittenAt == null || operationLastWrittenAt <= globalInvalidationEpoch) {
                return {
                    status: 'stale'
                };
            }
        }
        var handlers = (_options$handlers = options === null || options === void 0 ? void 0 : options.handlers) !== null && _options$handlers !== void 0 ? _options$handlers : [];
        var getSourceForActor = (_options$getSourceFor = options === null || options === void 0 ? void 0 : options.getSourceForActor) !== null && _options$getSourceFor !== void 0 ? _options$getSourceFor : function(actorIdentifier) {
            assertInternalActorIdentifier(actorIdentifier);
            return source;
        };
        var getTargetForActor = (_options$getTargetFor = options === null || options === void 0 ? void 0 : options.getTargetForActor) !== null && _options$getTargetFor !== void 0 ? _options$getTargetFor : function(actorIdentifier) {
            assertInternalActorIdentifier(actorIdentifier);
            return source;
        };
        var operationAvailability = DataChecker.check(getSourceForActor, getTargetForActor, (_options$defaultActor = options === null || options === void 0 ? void 0 : options.defaultActorIdentifier) !== null && _options$defaultActor !== void 0 ? _options$defaultActor : INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE, selector, handlers, this._operationLoader, this._getDataID, this._shouldProcessClientComponents);
        return getAvailabilityStatus(operationAvailability, operationLastWrittenAt, rootEntry === null || rootEntry === void 0 ? void 0 : rootEntry.fetchTime, this._queryCacheExpirationTime);
    };
    _proto.retain = function retain(operation) {
        var _this2 = this;
        var id = operation.request.identifier;
        var disposed = false;
        var dispose = function dispose() {
            if (disposed) {
                return;
            }
            disposed = true;
            var rootEntry = _this2._roots.get(id);
            if (rootEntry == null) {
                return;
            }
            rootEntry.refCount--;
            if (rootEntry.refCount === 0) {
                var _queryCacheExpirationTime = _this2._queryCacheExpirationTime;
                var rootEntryIsStale = rootEntry.fetchTime != null && _queryCacheExpirationTime != null && rootEntry.fetchTime <= Date.now() - _queryCacheExpirationTime;
                if (rootEntryIsStale) {
                    _this2._roots["delete"](id);
                    _this2.scheduleGC();
                } else {
                    _this2._releaseBuffer.push(id);
                    if (_this2._releaseBuffer.length > _this2._gcReleaseBufferSize) {
                        var _id = _this2._releaseBuffer.shift();
                        _this2._roots["delete"](_id);
                        _this2.scheduleGC();
                    }
                }
            }
        };
        var rootEntry = this._roots.get(id);
        if (rootEntry != null) {
            if (rootEntry.refCount === 0) {
                this._releaseBuffer = this._releaseBuffer.filter(function(_id) {
                    return _id !== id;
                });
            }
            rootEntry.refCount += 1;
        } else {
            this._roots.set(id, {
                operation: operation,
                refCount: 1,
                epoch: null,
                fetchTime: null
            });
        }
        return {
            dispose: dispose
        };
    };
    _proto.lookup = function lookup(selector) {
        var source = this.getSource();
        var snapshot = RelayReader.read(source, selector, this._resolverCache);
        if ("TURBOPACK compile-time truthy", 1) {
            deepFreeze(snapshot);
        }
        return snapshot;
    };
    _proto.notify = function notify(sourceOperation, invalidateStore) {
        var _this3 = this;
        var log = this.__log;
        if (log != null) {
            log({
                name: 'store.notify.start',
                sourceOperation: sourceOperation
            });
        }
        this._currentWriteEpoch++;
        if (invalidateStore === true) {
            this._globalInvalidationEpoch = this._currentWriteEpoch;
        }
        if (RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
            this._resolverCache.invalidateDataIDs(this._updatedRecordIDs);
        }
        var source = this.getSource();
        var updatedOwners = [];
        this._storeSubscriptions.updateSubscriptions(source, this._updatedRecordIDs, updatedOwners, sourceOperation);
        this._invalidationSubscriptions.forEach(function(subscription) {
            _this3._updateInvalidationSubscription(subscription, invalidateStore === true);
        });
        if (log != null) {
            log({
                name: 'store.notify.complete',
                sourceOperation: sourceOperation,
                updatedRecordIDs: this._updatedRecordIDs,
                invalidatedRecordIDs: this._invalidatedRecordIDs
            });
        }
        this._updatedRecordIDs.clear();
        this._invalidatedRecordIDs.clear();
        if (sourceOperation != null) {
            var id = sourceOperation.request.identifier;
            var rootEntry = this._roots.get(id);
            if (rootEntry != null) {
                rootEntry.epoch = this._currentWriteEpoch;
                rootEntry.fetchTime = Date.now();
            } else if (sourceOperation.request.node.params.operationKind === 'query' && this._gcReleaseBufferSize > 0 && this._releaseBuffer.length < this._gcReleaseBufferSize) {
                var temporaryRootEntry = {
                    operation: sourceOperation,
                    refCount: 0,
                    epoch: this._currentWriteEpoch,
                    fetchTime: Date.now()
                };
                this._releaseBuffer.push(id);
                this._roots.set(id, temporaryRootEntry);
            }
        }
        return updatedOwners;
    };
    _proto.publish = function publish(source, idsMarkedForInvalidation) {
        var target = this._getMutableRecordSource();
        updateTargetFromSource(target, source, this._currentWriteEpoch + 1, idsMarkedForInvalidation, this._updatedRecordIDs, this._invalidatedRecordIDs);
        var log = this.__log;
        if (log != null) {
            log({
                name: 'store.publish',
                source: source,
                optimistic: target === this._optimisticSource
            });
        }
    };
    _proto.subscribe = function subscribe(snapshot, callback) {
        return this._storeSubscriptions.subscribe(snapshot, callback);
    };
    _proto.holdGC = function holdGC() {
        var _this4 = this;
        if (this._gcRun) {
            this._gcRun = null;
            this._shouldScheduleGC = true;
        }
        this._gcHoldCounter++;
        var dispose = function dispose() {
            if (_this4._gcHoldCounter > 0) {
                _this4._gcHoldCounter--;
                if (_this4._gcHoldCounter === 0 && _this4._shouldScheduleGC) {
                    _this4.scheduleGC();
                    _this4._shouldScheduleGC = false;
                }
            }
        };
        return {
            dispose: dispose
        };
    };
    _proto.toJSON = function toJSON() {
        return 'RelayModernStore()';
    };
    _proto.getEpoch = function getEpoch() {
        return this._currentWriteEpoch;
    };
    _proto.__getUpdatedRecordIDs = function __getUpdatedRecordIDs() {
        return this._updatedRecordIDs;
    };
    _proto.lookupInvalidationState = function lookupInvalidationState(dataIDs) {
        var _this5 = this;
        var invalidations = new Map();
        dataIDs.forEach(function(dataID) {
            var _RelayModernRecord$ge;
            var record = _this5.getSource().get(dataID);
            invalidations.set(dataID, (_RelayModernRecord$ge = RelayModernRecord.getInvalidationEpoch(record)) !== null && _RelayModernRecord$ge !== void 0 ? _RelayModernRecord$ge : null);
        });
        invalidations.set('global', this._globalInvalidationEpoch);
        return {
            dataIDs: dataIDs,
            invalidations: invalidations
        };
    };
    _proto.checkInvalidationState = function checkInvalidationState(prevInvalidationState) {
        var latestInvalidationState = this.lookupInvalidationState(prevInvalidationState.dataIDs);
        var currentInvalidations = latestInvalidationState.invalidations;
        var prevInvalidations = prevInvalidationState.invalidations;
        if (currentInvalidations.get('global') !== prevInvalidations.get('global')) {
            return true;
        }
        var _iterator = (0, _createForOfIteratorHelper2["default"])(prevInvalidationState.dataIDs), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var dataID = _step.value;
                if (currentInvalidations.get(dataID) !== prevInvalidations.get(dataID)) {
                    return true;
                }
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        return false;
    };
    _proto.subscribeToInvalidationState = function subscribeToInvalidationState(invalidationState, callback) {
        var _this6 = this;
        var subscription = {
            callback: callback,
            invalidationState: invalidationState
        };
        var dispose = function dispose() {
            _this6._invalidationSubscriptions["delete"](subscription);
        };
        this._invalidationSubscriptions.add(subscription);
        return {
            dispose: dispose
        };
    };
    _proto._updateInvalidationSubscription = function _updateInvalidationSubscription(subscription, invalidatedStore) {
        var _this7 = this;
        var callback = subscription.callback, invalidationState = subscription.invalidationState;
        var dataIDs = invalidationState.dataIDs;
        var isSubscribedToInvalidatedIDs = invalidatedStore || dataIDs.some(function(dataID) {
            return _this7._invalidatedRecordIDs.has(dataID);
        });
        if (!isSubscribedToInvalidatedIDs) {
            return;
        }
        callback();
    };
    _proto.snapshot = function snapshot() {
        !(this._optimisticSource == null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernStore: Unexpected call to snapshot() while a previous ' + 'snapshot exists.') : ("TURBOPACK unreachable", undefined) : void 0;
        var log = this.__log;
        if (log != null) {
            log({
                name: 'store.snapshot'
            });
        }
        this._storeSubscriptions.snapshotSubscriptions(this.getSource());
        if (this._gcRun) {
            this._gcRun = null;
            this._shouldScheduleGC = true;
        }
        this._optimisticSource = RelayOptimisticRecordSource.create(this.getSource());
    };
    _proto.restore = function restore() {
        !(this._optimisticSource != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayModernStore: Unexpected call to restore(), expected a snapshot ' + 'to exist (make sure to call snapshot()).') : ("TURBOPACK unreachable", undefined) : void 0;
        var log = this.__log;
        if (log != null) {
            log({
                name: 'store.restore'
            });
        }
        this._optimisticSource = null;
        if (this._shouldScheduleGC) {
            this.scheduleGC();
        }
        this._storeSubscriptions.restoreSubscriptions();
    };
    _proto.scheduleGC = function scheduleGC() {
        if (this._gcHoldCounter > 0) {
            this._shouldScheduleGC = true;
            return;
        }
        if (this._gcRun) {
            return;
        }
        this._gcRun = this._collect();
        this._gcScheduler(this._gcStep);
    };
    _proto.__gc = function __gc() {
        if (this._optimisticSource != null) {
            return;
        }
        var gcRun = this._collect();
        while(!gcRun.next().done){}
    };
    _proto._collect = function* _collect() {
        top: while(true){
            var startEpoch = this._currentWriteEpoch;
            var references = new Set();
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(this._roots.values()), _step2;
            try {
                for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                    var operation = _step2.value.operation;
                    var selector = operation.root;
                    RelayReferenceMarker.mark(this._recordSource, selector, references, this._operationLoader, this._shouldProcessClientComponents);
                    yield;
                    if (startEpoch !== this._currentWriteEpoch) {
                        continue top;
                    }
                }
            } catch (err) {
                _iterator2.e(err);
            } finally{
                _iterator2.f();
            }
            var log = this.__log;
            if (log != null) {
                log({
                    name: 'store.gc',
                    references: references
                });
            }
            if (references.size === 0) {
                this._recordSource.clear();
            } else {
                var storeIDs = this._recordSource.getRecordIDs();
                for(var ii = 0; ii < storeIDs.length; ii++){
                    var dataID = storeIDs[ii];
                    if (!references.has(dataID)) {
                        this._recordSource.remove(dataID);
                    }
                }
            }
            return;
        }
    };
    return RelayModernStore;
}();
function initializeRecordSource(target) {
    if (!target.has(ROOT_ID)) {
        var rootRecord = RelayModernRecord.create(ROOT_ID, ROOT_TYPE);
        target.set(ROOT_ID, rootRecord);
    }
}
function updateTargetFromSource(target, source, currentWriteEpoch, idsMarkedForInvalidation, updatedRecordIDs, invalidatedRecordIDs) {
    if (idsMarkedForInvalidation) {
        idsMarkedForInvalidation.forEach(function(dataID) {
            var targetRecord = target.get(dataID);
            var sourceRecord = source.get(dataID);
            if (sourceRecord === null) {
                return;
            }
            var nextRecord;
            if (targetRecord != null) {
                nextRecord = RelayModernRecord.clone(targetRecord);
            } else {
                nextRecord = sourceRecord != null ? RelayModernRecord.clone(sourceRecord) : null;
            }
            if (!nextRecord) {
                return;
            }
            RelayModernRecord.setValue(nextRecord, RelayStoreUtils.INVALIDATED_AT_KEY, currentWriteEpoch);
            invalidatedRecordIDs.add(dataID);
            target.set(dataID, nextRecord);
        });
    }
    var dataIDs = source.getRecordIDs();
    for(var ii = 0; ii < dataIDs.length; ii++){
        var dataID = dataIDs[ii];
        var sourceRecord = source.get(dataID);
        var targetRecord = target.get(dataID);
        if ("TURBOPACK compile-time truthy", 1) {
            if (sourceRecord) {
                RelayModernRecord.freeze(sourceRecord);
            }
        }
        if (sourceRecord && targetRecord) {
            var nextRecord = RelayModernRecord.update(targetRecord, sourceRecord);
            if (nextRecord !== targetRecord) {
                if ("TURBOPACK compile-time truthy", 1) {
                    RelayModernRecord.freeze(nextRecord);
                }
                updatedRecordIDs.add(dataID);
                target.set(dataID, nextRecord);
            }
        } else if (sourceRecord === null) {
            target["delete"](dataID);
            if (targetRecord !== null) {
                updatedRecordIDs.add(dataID);
            }
        } else if (sourceRecord) {
            target.set(dataID, sourceRecord);
            updatedRecordIDs.add(dataID);
        }
    }
}
function getAvailabilityStatus(operationAvailability, operationLastWrittenAt, operationFetchTime, queryCacheExpirationTime) {
    var mostRecentlyInvalidatedAt = operationAvailability.mostRecentlyInvalidatedAt, status = operationAvailability.status;
    if (typeof mostRecentlyInvalidatedAt === 'number') {
        if (operationLastWrittenAt == null || mostRecentlyInvalidatedAt > operationLastWrittenAt) {
            return {
                status: 'stale'
            };
        }
    }
    if (status === 'missing') {
        return {
            status: 'missing'
        };
    }
    if (operationFetchTime != null && queryCacheExpirationTime != null) {
        var isStale = operationFetchTime <= Date.now() - queryCacheExpirationTime;
        if (isStale) {
            return {
                status: 'stale'
            };
        }
    }
    return {
        status: 'available',
        fetchTime: operationFetchTime !== null && operationFetchTime !== void 0 ? operationFetchTime : null
    };
}
module.exports = RelayModernStore;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/subscription/requestSubscription.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var RelayDeclarativeMutationConfig = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)"), getRequest = _require.getRequest;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js [app-ssr] (ecmascript)"), createOperationDescriptor = _require2.createOperationDescriptor;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernSelector.js [app-ssr] (ecmascript)"), createReaderSelector = _require3.createReaderSelector;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function requestSubscription(environment, config) {
    var subscription = getRequest(config.subscription);
    if (subscription.params.operationKind !== 'subscription') {
        throw new Error('requestSubscription: Must use Subscription operation');
    }
    var configs = config.configs, onCompleted = config.onCompleted, onError = config.onError, onNext = config.onNext, variables = config.variables, cacheConfig = config.cacheConfig;
    var operation = createOperationDescriptor(subscription, variables, cacheConfig);
    ("TURBOPACK compile-time truthy", 1) ? warning(!(config.updater && configs), 'requestSubscription: Expected only one of `updater` and `configs` to be provided') : ("TURBOPACK unreachable", undefined);
    var _ref = configs ? RelayDeclarativeMutationConfig.convert(configs, subscription, null, config.updater) : config, updater = _ref.updater;
    var sub = environment.executeSubscription({
        operation: operation,
        updater: updater
    }).subscribe({
        next: function next(responses) {
            if (onNext != null) {
                var selector = operation.fragment;
                var nextID;
                if (Array.isArray(responses)) {
                    var _responses$, _responses$$extension;
                    nextID = (_responses$ = responses[0]) === null || _responses$ === void 0 ? void 0 : (_responses$$extension = _responses$.extensions) === null || _responses$$extension === void 0 ? void 0 : _responses$$extension.__relay_subscription_root_id;
                } else {
                    var _responses$extensions;
                    nextID = (_responses$extensions = responses.extensions) === null || _responses$extensions === void 0 ? void 0 : _responses$extensions.__relay_subscription_root_id;
                }
                if (typeof nextID === 'string') {
                    selector = createReaderSelector(selector.node, nextID, selector.variables, selector.owner);
                }
                var data = environment.lookup(selector).data;
                onNext(data);
            }
        },
        error: onError,
        complete: onCompleted
    });
    return {
        dispose: sub.unsubscribe
    };
}
module.exports = requestSubscription;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/createPayloadFor3DField.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)"), getModuleComponentKey = _require.getModuleComponentKey, getModuleOperationKey = _require.getModuleOperationKey;
function createPayloadFor3DField(name, operation, component, response) {
    var data = (0, _objectSpread2["default"])({}, response);
    data[getModuleComponentKey(name)] = component;
    data[getModuleOperationKey(name)] = operation;
    return data;
}
module.exports = createPayloadFor3DField;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/isEmptyObject.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var hasOwnProperty = Object.prototype.hasOwnProperty;
function isEmptyObject(obj) {
    for(var _key in obj){
        if (hasOwnProperty.call(obj, _key)) {
            return false;
        }
    }
    return true;
}
module.exports = isEmptyObject;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getFragmentIdentifier.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernSelector.js [app-ssr] (ecmascript)"), getDataIDsFromFragment = _require.getDataIDsFromFragment, getSelector = _require.getSelector, getVariablesFromFragment = _require.getVariablesFromFragment;
var isEmptyObject = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/isEmptyObject.js [app-ssr] (ecmascript)");
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var stableCopy = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/stableCopy.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/StringInterner.js [app-ssr] (ecmascript)"), intern = _require2.intern;
function getFragmentIdentifier(fragmentNode, fragmentRef) {
    var selector = getSelector(fragmentNode, fragmentRef);
    var fragmentOwnerIdentifier = selector == null ? 'null' : selector.kind === 'SingularReaderSelector' ? selector.owner.identifier : '[' + selector.selectors.map(function(sel) {
        return sel.owner.identifier;
    }).join(',') + ']';
    var fragmentVariables = getVariablesFromFragment(fragmentNode, fragmentRef);
    var dataIDs = getDataIDsFromFragment(fragmentNode, fragmentRef);
    if (RelayFeatureFlags.ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION) {
        var ids = typeof dataIDs === 'undefined' ? 'missing' : dataIDs == null ? 'null' : Array.isArray(dataIDs) ? '[' + dataIDs.join(',') + ']' : dataIDs;
        ids = RelayFeatureFlags.STRING_INTERN_LEVEL <= 1 ? ids : intern(ids, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
        return fragmentOwnerIdentifier + '/' + fragmentNode.name + '/' + (fragmentVariables == null || isEmptyObject(fragmentVariables) ? '{}' : JSON.stringify(stableCopy(fragmentVariables))) + '/' + ids;
    } else {
        var _JSON$stringify;
        var _ids = (_JSON$stringify = JSON.stringify(dataIDs)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : 'missing';
        _ids = RelayFeatureFlags.STRING_INTERN_LEVEL <= 1 ? _ids : intern(_ids, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
        return fragmentOwnerIdentifier + '/' + fragmentNode.name + '/' + JSON.stringify(stableCopy(fragmentVariables)) + '/' + _ids;
    }
}
module.exports = getFragmentIdentifier;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getRefetchMetadata.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function getRefetchMetadata(fragmentNode, componentDisplayName) {
    var _fragmentNode$metadat, _fragmentNode$metadat2;
    !(((_fragmentNode$metadat = fragmentNode.metadata) === null || _fragmentNode$metadat === void 0 ? void 0 : _fragmentNode$metadat.plural) !== true) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: getRefetchMetadata(): Expected fragment `%s` not to be plural when using ' + '`%s`. Remove `@relay(plural: true)` from fragment `%s` ' + 'in order to use it with `%s`.', fragmentNode.name, componentDisplayName, fragmentNode.name, componentDisplayName) : ("TURBOPACK unreachable", undefined) : void 0;
    var refetchMetadata = (_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === void 0 ? void 0 : _fragmentNode$metadat2.refetch;
    !(refetchMetadata != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: getRefetchMetadata(): Expected fragment `%s` to be refetchable when using `%s`. ' + 'Did you forget to add a @refetchable directive to the fragment?', componentDisplayName, fragmentNode.name) : ("TURBOPACK unreachable", undefined) : void 0;
    var refetchableRequest = refetchMetadata.operation["default"] ? refetchMetadata.operation["default"] : refetchMetadata.operation;
    var fragmentRefPathInResponse = refetchMetadata.fragmentPathInResult;
    !(typeof refetchableRequest !== 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: getRefetchMetadata(): Expected refetch query to be an ' + "operation and not a string when using `%s`. If you're seeing this, " + 'this is likely a bug in Relay.', componentDisplayName) : ("TURBOPACK unreachable", undefined) : void 0;
    var identifierInfo = refetchMetadata.identifierInfo;
    if (identifierInfo != null) {
        !(identifierInfo.identifierField == null || typeof identifierInfo.identifierField === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: getRefetchMetadata(): Expected `identifierField` to be a string.') : ("TURBOPACK unreachable", undefined) : void 0;
        !(identifierInfo.identifierQueryVariableName == null || typeof identifierInfo.identifierQueryVariableName === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: getRefetchMetadata(): Expected `identifierQueryVariableName` to be a string.') : ("TURBOPACK unreachable", undefined) : void 0;
    }
    return {
        fragmentRefPathInResponse: fragmentRefPathInResponse,
        identifierInfo: identifierInfo,
        refetchableRequest: refetchableRequest,
        refetchMetadata: refetchMetadata
    };
}
module.exports = getRefetchMetadata;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getPaginationMetadata.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var getRefetchMetadata = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getRefetchMetadata.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function getPaginationMetadata(fragmentNode, componentDisplayName) {
    var _fragmentNode$metadat, _fragmentNode$metadat2;
    var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName), paginationRequest = _getRefetchMetadata.refetchableRequest, refetchMetadata = _getRefetchMetadata.refetchMetadata;
    var paginationMetadata = refetchMetadata.connection;
    !(paginationMetadata != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: getPaginationMetadata(): Expected fragment `%s` to include a ' + 'connection when using `%s`. Did you forget to add a @connection ' + 'directive to the connection field in the fragment?', componentDisplayName, fragmentNode.name) : ("TURBOPACK unreachable", undefined) : void 0;
    var connectionPathInFragmentData = paginationMetadata.path;
    var connectionMetadata = ((_fragmentNode$metadat = (_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === void 0 ? void 0 : _fragmentNode$metadat2.connection) !== null && _fragmentNode$metadat !== void 0 ? _fragmentNode$metadat : [])[0];
    !(connectionMetadata != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: getPaginationMetadata(): Expected fragment `%s` to include a ' + 'connection when using `%s`. Did you forget to add a @connection ' + 'directive to the connection field in the fragment?', componentDisplayName, fragmentNode.name) : ("TURBOPACK unreachable", undefined) : void 0;
    var identifierInfo = refetchMetadata.identifierInfo;
    !((identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierField) == null || typeof identifierInfo.identifierField === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: getRefetchMetadata(): Expected `identifierField` to be a string.') : ("TURBOPACK unreachable", undefined) : void 0;
    return {
        connectionPathInFragmentData: connectionPathInFragmentData,
        identifierField: identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierField,
        paginationRequest: paginationRequest,
        paginationMetadata: paginationMetadata,
        stream: connectionMetadata.stream === true
    };
}
module.exports = getPaginationMetadata;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getPaginationVariables.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var _objectSpread4 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function getPaginationVariables(direction, count, cursor, baseVariables, extraVariables, paginationMetadata) {
    var _objectSpread3;
    var backwardMetadata = paginationMetadata.backward, forwardMetadata = paginationMetadata.forward;
    if (direction === 'backward') {
        var _objectSpread2;
        !(backwardMetadata != null && backwardMetadata.count != null && backwardMetadata.cursor != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected backward pagination metadata to be available. ' + "If you're seeing this, this is likely a bug in Relay.") : ("TURBOPACK unreachable", undefined) : void 0;
        ("TURBOPACK compile-time truthy", 1) ? warning(!extraVariables.hasOwnProperty(backwardMetadata.cursor), 'Relay: `UNSTABLE_extraVariables` provided by caller should not ' + 'contain cursor variable `%s`. This variable is automatically ' + 'determined by Relay.', backwardMetadata.cursor) : ("TURBOPACK unreachable", undefined);
        ("TURBOPACK compile-time truthy", 1) ? warning(!extraVariables.hasOwnProperty(backwardMetadata.count), 'Relay: `UNSTABLE_extraVariables` provided by caller should not ' + 'contain count variable `%s`. This variable is automatically ' + 'determined by Relay.', backwardMetadata.count) : ("TURBOPACK unreachable", undefined);
        var _paginationVariables = (0, _objectSpread4["default"])((0, _objectSpread4["default"])((0, _objectSpread4["default"])({}, baseVariables), extraVariables), {}, (_objectSpread2 = {}, (0, _defineProperty2["default"])(_objectSpread2, backwardMetadata.cursor, cursor), (0, _defineProperty2["default"])(_objectSpread2, backwardMetadata.count, count), _objectSpread2));
        if (forwardMetadata && forwardMetadata.cursor) {
            _paginationVariables[forwardMetadata.cursor] = null;
        }
        if (forwardMetadata && forwardMetadata.count) {
            _paginationVariables[forwardMetadata.count] = null;
        }
        return _paginationVariables;
    }
    !(forwardMetadata != null && forwardMetadata.count != null && forwardMetadata.cursor != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected forward pagination metadata to be available. ' + "If you're seeing this, this is likely a bug in Relay.") : ("TURBOPACK unreachable", undefined) : void 0;
    ("TURBOPACK compile-time truthy", 1) ? warning(!extraVariables.hasOwnProperty(forwardMetadata.cursor), 'Relay: `UNSTABLE_extraVariables` provided by caller should not ' + 'contain cursor variable `%s`. This variable is automatically ' + 'determined by Relay.', forwardMetadata.cursor) : ("TURBOPACK unreachable", undefined);
    ("TURBOPACK compile-time truthy", 1) ? warning(!extraVariables.hasOwnProperty(forwardMetadata.count), 'Relay: `UNSTABLE_extraVariables` provided by caller should not ' + 'contain count variable `%s`. This variable is automatically ' + 'determined by Relay.', forwardMetadata.count) : ("TURBOPACK unreachable", undefined);
    var paginationVariables = (0, _objectSpread4["default"])((0, _objectSpread4["default"])((0, _objectSpread4["default"])({}, baseVariables), extraVariables), {}, (_objectSpread3 = {}, (0, _defineProperty2["default"])(_objectSpread3, forwardMetadata.cursor, cursor), (0, _defineProperty2["default"])(_objectSpread3, forwardMetadata.count, count), _objectSpread3));
    if (backwardMetadata && backwardMetadata.cursor) {
        paginationVariables[backwardMetadata.cursor] = null;
    }
    if (backwardMetadata && backwardMetadata.count) {
        paginationVariables[backwardMetadata.count] = null;
    }
    return paginationVariables;
}
module.exports = getPaginationVariables;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getValueAtPath.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function getValueAtPath(data, path) {
    var result = data;
    var _iterator = (0, _createForOfIteratorHelper2["default"])(path), _step;
    try {
        for(_iterator.s(); !(_step = _iterator.n()).done;){
            var key = _step.value;
            if (result == null) {
                return null;
            }
            if (typeof key === 'number') {
                !Array.isArray(result) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected an array when extracting value at path. ' + "If you're seeing this, this is likely a bug in Relay.") : ("TURBOPACK unreachable", undefined) : void 0;
                result = result[key];
            } else {
                !(typeof result === 'object' && !Array.isArray(result)) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected an object when extracting value at path. ' + "If you're seeing this, this is likely a bug in Relay.") : ("TURBOPACK unreachable", undefined) : void 0;
                result = result[key];
            }
        }
    } catch (err) {
        _iterator.e(err);
    } finally{
        _iterator.f();
    }
    return result;
}
module.exports = getValueAtPath;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayProfiler.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var profileHandlersByName = {};
var defaultProfiler = {
    stop: function stop() {}
};
var RelayProfiler = {
    profile: function profile(name, state) {
        var handlers = profileHandlersByName[name];
        if (handlers && handlers.length > 0) {
            var stopHandlers = [];
            for(var ii = handlers.length - 1; ii >= 0; ii--){
                var stopHandler = handlers[ii](name, state);
                stopHandlers.unshift(stopHandler);
            }
            return {
                stop: function stop(error) {
                    stopHandlers.forEach(function(stopHandler) {
                        return stopHandler(error);
                    });
                }
            };
        }
        return defaultProfiler;
    },
    attachProfileHandler: function attachProfileHandler(name, handler) {
        if (!profileHandlersByName.hasOwnProperty(name)) {
            profileHandlersByName[name] = [];
        }
        profileHandlersByName[name].push(handler);
    },
    detachProfileHandler: function detachProfileHandler(name, handler) {
        if (profileHandlersByName.hasOwnProperty(name)) {
            removeFromArray(profileHandlersByName[name], handler);
        }
    }
};
function removeFromArray(array, element) {
    var index = array.indexOf(element);
    if (index !== -1) {
        array.splice(index, 1);
    }
}
module.exports = RelayProfiler;

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/index.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var ConnectionHandler = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js [app-ssr] (ecmascript)");
var ConnectionInterface = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js [app-ssr] (ecmascript)");
var MutationHandlers = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js [app-ssr] (ecmascript)");
var RelayDefaultHandlerProvider = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/handlers/RelayDefaultHandlerProvider.js [app-ssr] (ecmascript)");
var applyOptimisticMutation = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/applyOptimisticMutation.js [app-ssr] (ecmascript)");
var commitLocalUpdate = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/commitLocalUpdate.js [app-ssr] (ecmascript)");
var commitMutation = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/commitMutation.js [app-ssr] (ecmascript)");
var RelayDeclarativeMutationConfig = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js [app-ssr] (ecmascript)");
var RelayNetwork = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayNetwork.js [app-ssr] (ecmascript)");
var RelayObservable = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayObservable.js [app-ssr] (ecmascript)");
var RelayQueryResponseCache = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/network/RelayQueryResponseCache.js [app-ssr] (ecmascript)");
var fetchQuery = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/fetchQuery.js [app-ssr] (ecmascript)");
var fetchQuery_DEPRECATED = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/fetchQuery_DEPRECATED.js [app-ssr] (ecmascript)");
var fetchQueryInternal = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/fetchQueryInternal.js [app-ssr] (ecmascript)");
var GraphQLTag = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/GraphQLTag.js [app-ssr] (ecmascript)");
var PreloadableQueryRegistry = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/query/PreloadableQueryRegistry.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ClientID.js [app-ssr] (ecmascript)"), generateClientID = _require.generateClientID, generateUniqueClientID = _require.generateUniqueClientID, isClientID = _require.isClientID;
var createFragmentSpecResolver = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/createFragmentSpecResolver.js [app-ssr] (ecmascript)");
var createRelayContext = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/createRelayContext.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js [app-ssr] (ecmascript)"), isSuspenseSentinel = _require2.isSuspenseSentinel, suspenseSentinel = _require2.suspenseSentinel;
var isRelayModernEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js [app-ssr] (ecmascript)");
var normalizeResponse = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/normalizeResponse.js [app-ssr] (ecmascript)");
var readInlineData = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/readInlineData.js [app-ssr] (ecmascript)");
var RelayConcreteVariables = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js [app-ssr] (ecmascript)");
var RelayModernEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernEnvironment.js [app-ssr] (ecmascript)");
var RelayModernOperationDescriptor = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js [app-ssr] (ecmascript)");
var RelayModernRecord = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernRecord.js [app-ssr] (ecmascript)");
var RelayModernSelector = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernSelector.js [app-ssr] (ecmascript)");
var RelayModernStore = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayModernStore.js [app-ssr] (ecmascript)");
var RelayOperationTracker = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayOperationTracker.js [app-ssr] (ecmascript)");
var RelayRecordSource = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayRecordSource.js [app-ssr] (ecmascript)");
var RelayStoreUtils = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/RelayStoreUtils.js [app-ssr] (ecmascript)");
var ResolverFragments = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ResolverFragments.js [app-ssr] (ecmascript)");
var ViewerPattern = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/store/ViewerPattern.js [app-ssr] (ecmascript)");
var requestSubscription = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/subscription/requestSubscription.js [app-ssr] (ecmascript)");
var createPayloadFor3DField = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/createPayloadFor3DField.js [app-ssr] (ecmascript)");
var deepFreeze = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/deepFreeze.js [app-ssr] (ecmascript)");
var getFragmentIdentifier = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getFragmentIdentifier.js [app-ssr] (ecmascript)");
var getPaginationMetadata = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getPaginationMetadata.js [app-ssr] (ecmascript)");
var getPaginationVariables = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getPaginationVariables.js [app-ssr] (ecmascript)");
var getPendingOperationsForFragment = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getPendingOperationsForFragment.js [app-ssr] (ecmascript)");
var getRefetchMetadata = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getRefetchMetadata.js [app-ssr] (ecmascript)");
var getRelayHandleKey = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getRelayHandleKey.js [app-ssr] (ecmascript)");
var getRequestIdentifier = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getRequestIdentifier.js [app-ssr] (ecmascript)");
var getValueAtPath = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/getValueAtPath.js [app-ssr] (ecmascript)");
var handlePotentialSnapshotErrors = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js [app-ssr] (ecmascript)");
var isPromise = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/isPromise.js [app-ssr] (ecmascript)");
var isScalarAndEqual = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/isScalarAndEqual.js [app-ssr] (ecmascript)");
var recycleNodesInto = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/recycleNodesInto.js [app-ssr] (ecmascript)");
var RelayConcreteNode = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayConcreteNode.js [app-ssr] (ecmascript)");
var RelayDefaultHandleKey = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayDefaultHandleKey.js [app-ssr] (ecmascript)");
var RelayError = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayError.js [app-ssr] (ecmascript)");
var RelayFeatureFlags = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js [app-ssr] (ecmascript)");
var RelayProfiler = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayProfiler.js [app-ssr] (ecmascript)");
var RelayReplaySubject = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/RelayReplaySubject.js [app-ssr] (ecmascript)");
var stableCopy = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/stableCopy.js [app-ssr] (ecmascript)");
var withProvidedVariables = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/util/withProvidedVariables.js [app-ssr] (ecmascript)");
if ("TURBOPACK compile-time truthy", 1) {
    var mapStr = typeof Map !== 'function' ? 'Map' : null;
    var setStr = typeof Set !== 'function' ? 'Set' : null;
    var promiseStr = typeof Promise !== 'function' ? 'Promise' : null;
    var objStr = typeof Object.assign !== 'function' ? 'Object.assign' : null;
    if (mapStr || setStr || promiseStr || objStr) {
        throw new Error("relay-runtime requires ".concat([
            mapStr,
            setStr,
            promiseStr,
            objStr
        ].filter(Boolean).join(', and '), " to exist. ") + 'Use a polyfill to provide these for older browsers.');
    }
}
module.exports = {
    Environment: RelayModernEnvironment,
    Network: RelayNetwork,
    Observable: RelayObservable,
    QueryResponseCache: RelayQueryResponseCache,
    RecordSource: RelayRecordSource,
    Record: RelayModernRecord,
    ReplaySubject: RelayReplaySubject,
    Store: RelayModernStore,
    areEqualSelectors: RelayModernSelector.areEqualSelectors,
    createFragmentSpecResolver: createFragmentSpecResolver,
    createNormalizationSelector: RelayModernSelector.createNormalizationSelector,
    createOperationDescriptor: RelayModernOperationDescriptor.createOperationDescriptor,
    createReaderSelector: RelayModernSelector.createReaderSelector,
    createRequestDescriptor: RelayModernOperationDescriptor.createRequestDescriptor,
    getArgumentValues: RelayStoreUtils.getArgumentValues,
    getDataIDsFromFragment: RelayModernSelector.getDataIDsFromFragment,
    getDataIDsFromObject: RelayModernSelector.getDataIDsFromObject,
    getNode: GraphQLTag.getNode,
    getFragment: GraphQLTag.getFragment,
    getInlineDataFragment: GraphQLTag.getInlineDataFragment,
    getModuleComponentKey: RelayStoreUtils.getModuleComponentKey,
    getModuleOperationKey: RelayStoreUtils.getModuleOperationKey,
    getPaginationFragment: GraphQLTag.getPaginationFragment,
    getPluralSelector: RelayModernSelector.getPluralSelector,
    getRefetchableFragment: GraphQLTag.getRefetchableFragment,
    getRequest: GraphQLTag.getRequest,
    getRequestIdentifier: getRequestIdentifier,
    getSelector: RelayModernSelector.getSelector,
    getSelectorsFromObject: RelayModernSelector.getSelectorsFromObject,
    getSingularSelector: RelayModernSelector.getSingularSelector,
    getStorageKey: RelayStoreUtils.getStorageKey,
    getVariablesFromFragment: RelayModernSelector.getVariablesFromFragment,
    getVariablesFromObject: RelayModernSelector.getVariablesFromObject,
    getVariablesFromPluralFragment: RelayModernSelector.getVariablesFromPluralFragment,
    getVariablesFromSingularFragment: RelayModernSelector.getVariablesFromSingularFragment,
    handlePotentialSnapshotErrors: handlePotentialSnapshotErrors,
    graphql: GraphQLTag.graphql,
    isFragment: GraphQLTag.isFragment,
    isInlineDataFragment: GraphQLTag.isInlineDataFragment,
    isSuspenseSentinel: isSuspenseSentinel,
    suspenseSentinel: suspenseSentinel,
    isRequest: GraphQLTag.isRequest,
    readInlineData: readInlineData,
    MutationTypes: RelayDeclarativeMutationConfig.MutationTypes,
    RangeOperations: RelayDeclarativeMutationConfig.RangeOperations,
    DefaultHandlerProvider: RelayDefaultHandlerProvider,
    ConnectionHandler: ConnectionHandler,
    MutationHandlers: MutationHandlers,
    VIEWER_ID: ViewerPattern.VIEWER_ID,
    VIEWER_TYPE: ViewerPattern.VIEWER_TYPE,
    applyOptimisticMutation: applyOptimisticMutation,
    commitLocalUpdate: commitLocalUpdate,
    commitMutation: commitMutation,
    fetchQuery: fetchQuery,
    fetchQuery_DEPRECATED: fetchQuery_DEPRECATED,
    isRelayModernEnvironment: isRelayModernEnvironment,
    requestSubscription: requestSubscription,
    ConnectionInterface: ConnectionInterface,
    PreloadableQueryRegistry: PreloadableQueryRegistry,
    RelayProfiler: RelayProfiler,
    createPayloadFor3DField: createPayloadFor3DField,
    RelayConcreteNode: RelayConcreteNode,
    RelayError: RelayError,
    RelayFeatureFlags: RelayFeatureFlags,
    DEFAULT_HANDLE_KEY: RelayDefaultHandleKey.DEFAULT_HANDLE_KEY,
    FRAGMENTS_KEY: RelayStoreUtils.FRAGMENTS_KEY,
    FRAGMENT_OWNER_KEY: RelayStoreUtils.FRAGMENT_OWNER_KEY,
    ID_KEY: RelayStoreUtils.ID_KEY,
    REF_KEY: RelayStoreUtils.REF_KEY,
    REFS_KEY: RelayStoreUtils.REFS_KEY,
    ROOT_ID: RelayStoreUtils.ROOT_ID,
    ROOT_TYPE: RelayStoreUtils.ROOT_TYPE,
    TYPENAME_KEY: RelayStoreUtils.TYPENAME_KEY,
    deepFreeze: deepFreeze,
    generateClientID: generateClientID,
    generateUniqueClientID: generateUniqueClientID,
    getRelayHandleKey: getRelayHandleKey,
    isClientID: isClientID,
    isPromise: isPromise,
    isScalarAndEqual: isScalarAndEqual,
    recycleNodesInto: recycleNodesInto,
    stableCopy: stableCopy,
    getFragmentIdentifier: getFragmentIdentifier,
    getRefetchMetadata: getRefetchMetadata,
    getPaginationMetadata: getPaginationMetadata,
    getPaginationVariables: getPaginationVariables,
    getPendingOperationsForFragment: getPendingOperationsForFragment,
    getValueAtPath: getValueAtPath,
    __internal: {
        ResolverFragments: ResolverFragments,
        OperationTracker: RelayOperationTracker,
        createRelayContext: createRelayContext,
        getOperationVariables: RelayConcreteVariables.getOperationVariables,
        getLocalVariables: RelayConcreteVariables.getLocalVariables,
        fetchQuery: fetchQueryInternal.fetchQuery,
        fetchQueryDeduped: fetchQueryInternal.fetchQueryDeduped,
        getPromiseForActiveRequest: fetchQueryInternal.getPromiseForActiveRequest,
        getObservableForActiveRequest: fetchQueryInternal.getObservableForActiveRequest,
        normalizeResponse: normalizeResponse,
        withProvidedVariables: withProvidedVariables
    }
};

}.call(this) }),
"[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/**
 * Relay v16.2.0
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ module.exports = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/lib/index.js [app-ssr] (ecmascript)");

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContext.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), createRelayContext = _require.__internal.createRelayContext;
module.exports = createRelayContext(React);

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/assertThisInitialized.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/extends.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

function _extends() {
    module.exports = _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined), module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _extends.apply(this, arguments);
}
module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/assertFragmentMap.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function assertFragmentMap(componentName, fragmentSpec) {
    !(fragmentSpec && typeof fragmentSpec === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Could not create Relay Container for `%s`. ' + 'Expected a set of GraphQL fragments, got `%s` instead.', componentName, fragmentSpec) : ("TURBOPACK unreachable", undefined) : void 0;
    for(var key in fragmentSpec){
        if (fragmentSpec.hasOwnProperty(key)) {
            var fragment = fragmentSpec[key];
            !(fragment && (typeof fragment === 'object' || typeof fragment === 'function')) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Could not create Relay Container for `%s`. ' + 'The value of fragment `%s` was expected to be a fragment, got `%s` instead.', componentName, key, fragment) : ("TURBOPACK unreachable", undefined) : void 0;
        }
    }
}
module.exports = assertFragmentMap;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContainerUtils.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function getComponentName(component) {
    return component.displayName || component.name || 'Component';
}
function getContainerName(Component) {
    return 'Relay(' + getComponentName(Component) + ')';
}
module.exports = {
    getComponentName: getComponentName,
    getContainerName: getContainerName
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayQueryRendererContext.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
module.exports = React.createContext({
    rootIsQueryRenderer: false
});

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/buildReactRelayContainer.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _extends2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/extends.js [app-ssr] (ecmascript)"));
var assertFragmentMap = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/assertFragmentMap.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContainerUtils.js [app-ssr] (ecmascript)"), getComponentName = _require.getComponentName, getContainerName = _require.getContainerName;
var ReactRelayContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContext.js [app-ssr] (ecmascript)");
var ReactRelayQueryRendererContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayQueryRendererContext.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), getFragment = _require2.getFragment;
var useContext = React.useContext;
function buildReactRelayContainer(ComponentClass, fragmentSpec, createContainerWithFragments) {
    var containerName = getContainerName(ComponentClass);
    assertFragmentMap(getComponentName(ComponentClass), fragmentSpec);
    var fragments = {};
    for(var key in fragmentSpec){
        fragments[key] = getFragment(fragmentSpec[key]);
    }
    var Container = createContainerWithFragments(ComponentClass, fragments);
    Container.displayName = containerName;
    function forwardRef(props, ref) {
        var _queryRendererContext;
        var context = useContext(ReactRelayContext);
        !(context != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, '`%s` tried to render a context that was not valid this means that ' + '`%s` was rendered outside of a query renderer.', containerName, containerName) : ("TURBOPACK unreachable", undefined) : void 0;
        var queryRendererContext = useContext(ReactRelayQueryRendererContext);
        return /*#__PURE__*/ React.createElement(Container, (0, _extends2["default"])({}, props, {
            __relayContext: context,
            __rootIsQueryRenderer: (_queryRendererContext = queryRendererContext === null || queryRendererContext === void 0 ? void 0 : queryRendererContext.rootIsQueryRenderer) !== null && _queryRendererContext !== void 0 ? _queryRendererContext : false,
            componentRef: props.componentRef || ref
        }));
    }
    forwardRef.displayName = containerName;
    var ForwardContainer = React.forwardRef(forwardRef);
    if ("TURBOPACK compile-time truthy", 1) {
        ForwardContainer.__ComponentClass = ComponentClass;
        ForwardContainer.displayName = containerName;
    }
    return ForwardContainer;
}
module.exports = buildReactRelayContainer;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/isRelayEnvironment.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
function isRelayEnvironment(environment) {
    return typeof environment === 'object' && environment !== null && typeof environment.check === 'function' && typeof environment.lookup === 'function' && typeof environment.retain === 'function' && typeof environment.execute === 'function' && typeof environment.subscribe === 'function';
}
module.exports = isRelayEnvironment;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/RelayContext.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var isRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/isRelayEnvironment.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
function assertRelayContext(relay) {
    !isRelayContext(relay) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'RelayContext: Expected `context.relay` to be an object conforming to ' + 'the `RelayContext` interface, got `%s`.', relay) : ("TURBOPACK unreachable", undefined) : void 0;
    return relay;
}
function isRelayContext(context) {
    return typeof context === 'object' && context !== null && !Array.isArray(context) && isRelayEnvironment(context.environment);
}
module.exports = {
    assertRelayContext: assertRelayContext,
    isRelayContext: isRelayContext
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayFragmentContainer.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js [app-ssr] (ecmascript)"));
var _assertThisInitialized2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/assertThisInitialized.js [app-ssr] (ecmascript)"));
var _inheritsLoose2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/inheritsLoose.js [app-ssr] (ecmascript)"));
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var _excluded = [
    "componentRef",
    "__relayContext",
    "__rootIsQueryRenderer"
];
var buildReactRelayContainer = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/buildReactRelayContainer.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContainerUtils.js [app-ssr] (ecmascript)"), getContainerName = _require.getContainerName;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/RelayContext.js [app-ssr] (ecmascript)"), assertRelayContext = _require2.assertRelayContext;
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), createFragmentSpecResolver = _require3.createFragmentSpecResolver, getDataIDsFromObject = _require3.getDataIDsFromObject, isScalarAndEqual = _require3.isScalarAndEqual;
function createContainerWithFragments(Component, fragments) {
    var _class;
    var containerName = getContainerName(Component);
    return _class = /*#__PURE__*/ function(_React$Component) {
        (0, _inheritsLoose2["default"])(_class, _React$Component);
        function _class(props) {
            var _props$__rootIsQueryR, _this;
            _this = _React$Component.call(this, props) || this;
            (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleFragmentDataUpdate", function() {
                var resolverFromThisUpdate = _this.state.resolver;
                _this.setState(function(updatedState) {
                    return resolverFromThisUpdate === updatedState.resolver ? {
                        data: updatedState.resolver.resolve(),
                        relayProp: getRelayProp(updatedState.relayProp.environment)
                    } : null;
                });
            });
            var relayContext = assertRelayContext(props.__relayContext);
            var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;
            var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
            _this.state = {
                data: resolver.resolve(),
                prevProps: props,
                prevPropsContext: relayContext,
                relayProp: getRelayProp(relayContext.environment),
                resolver: resolver
            };
            return _this;
        }
        _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
            var _nextProps$__rootIsQu;
            var prevProps = prevState.prevProps;
            var relayContext = assertRelayContext(nextProps.__relayContext);
            var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;
            var prevIDs = getDataIDsFromObject(fragments, prevProps);
            var nextIDs = getDataIDsFromObject(fragments, nextProps);
            var resolver = prevState.resolver;
            if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevIDs, nextIDs)) {
                resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
                return {
                    data: resolver.resolve(),
                    prevPropsContext: relayContext,
                    prevProps: nextProps,
                    relayProp: getRelayProp(relayContext.environment),
                    resolver: resolver
                };
            } else {
                resolver.setProps(nextProps);
                var data = resolver.resolve();
                if (data !== prevState.data) {
                    return {
                        data: data,
                        prevProps: nextProps,
                        prevPropsContext: relayContext,
                        relayProp: getRelayProp(relayContext.environment)
                    };
                }
            }
            return null;
        };
        var _proto = _class.prototype;
        _proto.componentDidMount = function componentDidMount() {
            this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
            if (this.state.resolver !== prevState.resolver) {
                prevState.resolver.dispose();
                this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
            } else {
                this._rerenderIfStoreHasChanged();
            }
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            this.state.resolver.dispose();
        };
        _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
            if (nextState.data !== this.state.data) {
                return true;
            }
            var keys = Object.keys(nextProps);
            for(var ii = 0; ii < keys.length; ii++){
                var key = keys[ii];
                if (key === '__relayContext') {
                    if (nextState.prevPropsContext.environment !== this.state.prevPropsContext.environment) {
                        return true;
                    }
                } else {
                    if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
                        return true;
                    }
                }
            }
            return false;
        };
        _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
            var _this$state = this.state, data = _this$state.data, resolver = _this$state.resolver;
            var maybeNewData = resolver.resolve();
            if (data !== maybeNewData) {
                this.setState({
                    data: maybeNewData
                });
            }
        };
        _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
            var _this$state2 = this.state, data = _this$state2.data, resolver = _this$state2.resolver;
            var maybeNewData = resolver.resolve();
            resolver.setCallback(this.props, this._handleFragmentDataUpdate);
            if (data !== maybeNewData) {
                this.setState({
                    data: maybeNewData
                });
            }
        };
        _proto.render = function render() {
            var _this$props = this.props, componentRef = _this$props.componentRef, __relayContext = _this$props.__relayContext, __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer, props = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, _excluded);
            return React.createElement(Component, (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, props), this.state.data), {}, {
                ref: componentRef,
                relay: this.state.relayProp
            }));
        };
        return _class;
    }(React.Component), (0, _defineProperty2["default"])(_class, "displayName", containerName), _class;
}
function getRelayProp(environment) {
    return {
        environment: environment
    };
}
function createContainer(Component, fragmentSpec) {
    return buildReactRelayContainer(Component, fragmentSpec, createContainerWithFragments);
}
module.exports = {
    createContainer: createContainer
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayLocalQueryRenderer.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var ReactRelayContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContext.js [app-ssr] (ecmascript)");
var ReactRelayQueryRendererContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayQueryRendererContext.js [app-ssr] (ecmascript)");
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), createOperationDescriptor = _require.createOperationDescriptor, deepFreeze = _require.deepFreeze, getRequest = _require.getRequest;
var useLayoutEffect = React.useLayoutEffect, useState = React.useState, useRef = React.useRef, useMemo = React.useMemo;
var queryRendererContext = {
    rootIsQueryRenderer: true
};
function useDeepCompare(value) {
    var latestValue = React.useRef(value);
    if (!areEqual(latestValue.current, value)) {
        if ("TURBOPACK compile-time truthy", 1) {
            deepFreeze(value);
        }
        latestValue.current = value;
    }
    return latestValue.current;
}
function ReactRelayLocalQueryRenderer(props) {
    var environment = props.environment, query = props.query, variables = props.variables, render = props.render;
    var latestVariables = useDeepCompare(variables);
    var operation = useMemo(function() {
        var request = getRequest(query);
        return createOperationDescriptor(request, latestVariables);
    }, [
        query,
        latestVariables
    ]);
    var relayContext = useMemo(function() {
        return {
            environment: environment
        };
    }, [
        environment
    ]);
    var dataRef = useRef(null);
    var _useState = useState(null), forceUpdate = _useState[1];
    var cleanupFnRef = useRef(null);
    var snapshot = useMemo(function() {
        environment.check(operation);
        var res = environment.lookup(operation.fragment);
        dataRef.current = res.data;
        var retainDisposable = environment.retain(operation);
        var subscribeDisposable = environment.subscribe(res, function(newSnapshot) {
            dataRef.current = newSnapshot.data;
            forceUpdate(dataRef.current);
        });
        var disposed = false;
        function nextCleanupFn() {
            if (!disposed) {
                disposed = true;
                cleanupFnRef.current = null;
                retainDisposable.dispose();
                subscribeDisposable.dispose();
            }
        }
        if (cleanupFnRef.current) {
            cleanupFnRef.current();
        }
        cleanupFnRef.current = nextCleanupFn;
        return res;
    }, [
        environment,
        operation
    ]);
    useLayoutEffect(function() {
        var cleanupFn = cleanupFnRef.current;
        return function() {
            cleanupFn && cleanupFn();
        };
    }, [
        snapshot
    ]);
    return /*#__PURE__*/ React.createElement(ReactRelayContext.Provider, {
        value: relayContext
    }, /*#__PURE__*/ React.createElement(ReactRelayQueryRendererContext.Provider, {
        value: queryRendererContext
    }, render({
        props: dataRef.current
    })));
}
module.exports = ReactRelayLocalQueryRenderer;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/getRootVariablesForFragments.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), getSelector = _require.getSelector;
function getRootVariablesForFragments(fragments, props) {
    var rootVariables = {};
    Object.keys(fragments).forEach(function(key) {
        var _selector$selectors$, _selector$selectors$2, _selector$owner$varia;
        var fragmentNode = fragments[key];
        var fragmentRef = props[key];
        var selector = getSelector(fragmentNode, fragmentRef);
        var fragmentOwnerVariables = selector != null && selector.kind === 'PluralReaderSelector' ? (_selector$selectors$ = (_selector$selectors$2 = selector.selectors[0]) === null || _selector$selectors$2 === void 0 ? void 0 : _selector$selectors$2.owner.variables) !== null && _selector$selectors$ !== void 0 ? _selector$selectors$ : {} : (_selector$owner$varia = selector === null || selector === void 0 ? void 0 : selector.owner.variables) !== null && _selector$owner$varia !== void 0 ? _selector$owner$varia : {};
        rootVariables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, rootVariables), fragmentOwnerVariables);
    });
    return rootVariables;
}
module.exports = getRootVariablesForFragments;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayQueryFetcher.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), fetchQuery = _require.__internal.fetchQuery, createOperationDescriptor = _require.createOperationDescriptor, isRelayModernEnvironment = _require.isRelayModernEnvironment;
var ReactRelayQueryFetcher = /*#__PURE__*/ function() {
    function ReactRelayQueryFetcher(args) {
        (0, _defineProperty2["default"])(this, "_selectionReferences", []);
        (0, _defineProperty2["default"])(this, "_didFetchFinish", false);
        if (args != null) {
            this._cacheSelectionReference = args.cacheSelectionReference;
            this._selectionReferences = args.selectionReferences;
        }
    }
    var _proto = ReactRelayQueryFetcher.prototype;
    _proto.getSelectionReferences = function getSelectionReferences() {
        return {
            cacheSelectionReference: this._cacheSelectionReference,
            selectionReferences: this._selectionReferences
        };
    };
    _proto.lookupInStore = function lookupInStore(environment, operation, fetchPolicy) {
        if (fetchPolicy === 'store-and-network' || fetchPolicy === 'store-or-network') {
            if (environment.check(operation).status === 'available') {
                this._retainCachedOperation(environment, operation);
                return environment.lookup(operation.fragment);
            }
        }
        return null;
    };
    _proto.getFetchResult = function getFetchResult() {
        if (this._didFetchFinish) {
            if (this._error != null) {
                return {
                    error: this._error
                };
            } else if (this._snapshot != null) {
                return {
                    snapshot: this._snapshot
                };
            }
        } else {
            return null;
        }
    };
    _proto.execute = function execute(_ref) {
        var _this = this;
        var environment = _ref.environment, operation = _ref.operation, _ref$preservePrevious = _ref.preservePreviousReferences, preservePreviousReferences = _ref$preservePrevious === void 0 ? false : _ref$preservePrevious;
        var reference = environment.retain(operation);
        var error = function error() {
            _this._selectionReferences = _this._selectionReferences.concat(reference);
        };
        var complete = function complete() {
            if (!preservePreviousReferences) {
                _this.disposeSelectionReferences();
            }
            _this._selectionReferences = _this._selectionReferences.concat(reference);
        };
        var unsubscribe = function unsubscribe() {
            _this._selectionReferences = _this._selectionReferences.concat(reference);
        };
        if (!isRelayModernEnvironment(environment)) {
            return environment.execute({
                operation: operation
            })["do"]({
                error: error,
                complete: complete,
                unsubscribe: unsubscribe
            });
        }
        return fetchQuery(environment, operation)["do"]({
            error: error,
            complete: complete,
            unsubscribe: unsubscribe
        });
    };
    _proto.setOnDataChange = function setOnDataChange(onDataChange) {
        !this._fetchOptions ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayQueryFetcher: `setOnDataChange` should have been called after having called `fetch`') : ("TURBOPACK unreachable", undefined) : void 0;
        if (typeof onDataChange === 'function') {
            this._fetchOptions.onDataChangeCallbacks = this._fetchOptions.onDataChangeCallbacks || [];
            this._fetchOptions.onDataChangeCallbacks.push(onDataChange);
            if (this._didFetchFinish) {
                if (this._error != null) {
                    onDataChange({
                        error: this._error
                    });
                } else if (this._snapshot != null) {
                    onDataChange({
                        snapshot: this._snapshot
                    });
                }
            }
        }
    };
    _proto.fetch = function fetch(fetchOptions, cacheConfigOverride) {
        var _this2 = this;
        var environment = fetchOptions.environment, operation = fetchOptions.operation, onDataChange = fetchOptions.onDataChange;
        var fetchHasReturned = false;
        var _error;
        this.disposeRequest();
        var oldOnDataChangeCallbacks = this._fetchOptions && this._fetchOptions.onDataChangeCallbacks;
        this._fetchOptions = {
            environment: environment,
            onDataChangeCallbacks: oldOnDataChangeCallbacks || [],
            operation: operation
        };
        if (onDataChange && this._fetchOptions.onDataChangeCallbacks.indexOf(onDataChange) === -1) {
            this._fetchOptions.onDataChangeCallbacks.push(onDataChange);
        }
        var operationOverride = cacheConfigOverride ? createOperationDescriptor(operation.request.node, operation.request.variables, cacheConfigOverride) : operation;
        var request = this.execute({
            environment: environment,
            operation: operationOverride
        })["finally"](function() {
            _this2._pendingRequest = null;
        }).subscribe({
            next: function next() {
                _this2._didFetchFinish = true;
                _this2._error = null;
                _this2._onQueryDataAvailable({
                    notifyFirstResult: fetchHasReturned
                });
            },
            error: function error(err) {
                _this2._didFetchFinish = true;
                _this2._error = err;
                _this2._snapshot = null;
                var onDataChangeCallbacks = _this2._fetchOptions && _this2._fetchOptions.onDataChangeCallbacks;
                if (fetchHasReturned) {
                    if (onDataChangeCallbacks) {
                        onDataChangeCallbacks.forEach(function(onDataChange) {
                            onDataChange({
                                error: err
                            });
                        });
                    }
                } else {
                    _error = err;
                }
            }
        });
        this._pendingRequest = {
            dispose: function dispose() {
                request.unsubscribe();
            }
        };
        fetchHasReturned = true;
        if (_error) {
            throw _error;
        }
        return this._snapshot;
    };
    _proto.retry = function retry(cacheConfigOverride) {
        !this._fetchOptions ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayQueryFetcher: `retry` should be called after having called `fetch`') : ("TURBOPACK unreachable", undefined) : void 0;
        return this.fetch({
            environment: this._fetchOptions.environment,
            operation: this._fetchOptions.operation,
            onDataChange: null
        }, cacheConfigOverride);
    };
    _proto.dispose = function dispose() {
        this.disposeRequest();
        this.disposeSelectionReferences();
    };
    _proto.disposeRequest = function disposeRequest() {
        this._error = null;
        this._snapshot = null;
        if (this._pendingRequest) {
            this._pendingRequest.dispose();
        }
        if (this._rootSubscription) {
            this._rootSubscription.dispose();
            this._rootSubscription = null;
        }
    };
    _proto._retainCachedOperation = function _retainCachedOperation(environment, operation) {
        this._disposeCacheSelectionReference();
        this._cacheSelectionReference = environment.retain(operation);
    };
    _proto._disposeCacheSelectionReference = function _disposeCacheSelectionReference() {
        this._cacheSelectionReference && this._cacheSelectionReference.dispose();
        this._cacheSelectionReference = null;
    };
    _proto.disposeSelectionReferences = function disposeSelectionReferences() {
        this._disposeCacheSelectionReference();
        this._selectionReferences.forEach(function(r) {
            return r.dispose();
        });
        this._selectionReferences = [];
    };
    _proto._onQueryDataAvailable = function _onQueryDataAvailable(_ref2) {
        var _this3 = this;
        var notifyFirstResult = _ref2.notifyFirstResult;
        !this._fetchOptions ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayQueryFetcher: `_onQueryDataAvailable` should have been called after having called `fetch`') : ("TURBOPACK unreachable", undefined) : void 0;
        var _this$_fetchOptions = this._fetchOptions, environment = _this$_fetchOptions.environment, onDataChangeCallbacks = _this$_fetchOptions.onDataChangeCallbacks, operation = _this$_fetchOptions.operation;
        if (this._snapshot) {
            return;
        }
        this._snapshot = environment.lookup(operation.fragment);
        this._rootSubscription = environment.subscribe(this._snapshot, function(snapshot) {
            if (_this3._fetchOptions != null) {
                var maybeNewOnDataChangeCallbacks = _this3._fetchOptions.onDataChangeCallbacks;
                if (Array.isArray(maybeNewOnDataChangeCallbacks)) {
                    maybeNewOnDataChangeCallbacks.forEach(function(onDataChange) {
                        return onDataChange({
                            snapshot: snapshot
                        });
                    });
                }
            }
        });
        if (this._snapshot && notifyFirstResult && Array.isArray(onDataChangeCallbacks)) {
            var snapshot = this._snapshot;
            onDataChangeCallbacks.forEach(function(onDataChange) {
                return onDataChange({
                    snapshot: snapshot
                });
            });
        }
    };
    return ReactRelayQueryFetcher;
}();
module.exports = ReactRelayQueryFetcher;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayPaginationContainer.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _extends2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/extends.js [app-ssr] (ecmascript)"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js [app-ssr] (ecmascript)"));
var _assertThisInitialized2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/assertThisInitialized.js [app-ssr] (ecmascript)"));
var _inheritsLoose2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/inheritsLoose.js [app-ssr] (ecmascript)"));
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var _objectSpread3 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _excluded = [
    "componentRef"
], _excluded2 = [
    "componentRef",
    "__relayContext",
    "__rootIsQueryRenderer"
], _excluded3 = [
    "componentRef",
    "__relayContext",
    "__rootIsQueryRenderer"
];
var buildReactRelayContainer = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/buildReactRelayContainer.js [app-ssr] (ecmascript)");
var getRootVariablesForFragments = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/getRootVariablesForFragments.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContainerUtils.js [app-ssr] (ecmascript)"), getComponentName = _require.getComponentName, getContainerName = _require.getContainerName;
var ReactRelayContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContext.js [app-ssr] (ecmascript)");
var ReactRelayQueryFetcher = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayQueryFetcher.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/RelayContext.js [app-ssr] (ecmascript)"), assertRelayContext = _require2.assertRelayContext;
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), ConnectionInterface = _require3.ConnectionInterface, Observable = _require3.Observable, RelayFeatureFlags = _require3.RelayFeatureFlags, createFragmentSpecResolver = _require3.createFragmentSpecResolver, createOperationDescriptor = _require3.createOperationDescriptor, getDataIDsFromObject = _require3.getDataIDsFromObject, getRequest = _require3.getRequest, getVariablesFromObject = _require3.getVariablesFromObject, isScalarAndEqual = _require3.isScalarAndEqual;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var FORWARD = 'forward';
function createGetConnectionFromProps(metadata) {
    var path = metadata.path;
    !path ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getConnectionFromProps function.') : ("TURBOPACK unreachable", undefined) : void 0;
    return function(props) {
        var data = props[metadata.fragmentName];
        for(var i = 0; i < path.length; i++){
            if (!data || typeof data !== 'object') {
                return null;
            }
            data = data[path[i]];
        }
        return data;
    };
}
function createGetFragmentVariables(metadata) {
    var countVariable = metadata.count;
    !countVariable ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getFragmentVariables function.') : ("TURBOPACK unreachable", undefined) : void 0;
    return function(prevVars, totalCount) {
        return (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, prevVars), {}, (0, _defineProperty2["default"])({}, countVariable, totalCount));
    };
}
function findConnectionMetadata(fragments) {
    var foundConnectionMetadata = null;
    var isRelayModern = false;
    for(var fragmentName in fragments){
        var fragment = fragments[fragmentName];
        var connectionMetadata = fragment.metadata && fragment.metadata.connection;
        if (fragment.metadata !== undefined) {
            isRelayModern = true;
        }
        if (connectionMetadata) {
            !(connectionMetadata.length === 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayPaginationContainer: Only a single @connection is ' + 'supported, `%s` has %s.', fragmentName, connectionMetadata.length) : ("TURBOPACK unreachable", undefined) : void 0;
            !!foundConnectionMetadata ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayPaginationContainer: Only a single fragment with ' + '@connection is supported.') : ("TURBOPACK unreachable", undefined) : void 0;
            foundConnectionMetadata = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, connectionMetadata[0]), {}, {
                fragmentName: fragmentName
            });
        }
    }
    !(!isRelayModern || foundConnectionMetadata !== null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayPaginationContainer: A @connection directive must be present.') : ("TURBOPACK unreachable", undefined) : void 0;
    return foundConnectionMetadata || {};
}
function toObserver(observerOrCallback) {
    return typeof observerOrCallback === 'function' ? {
        error: observerOrCallback,
        complete: observerOrCallback,
        unsubscribe: function unsubscribe(subscription) {
            typeof observerOrCallback === 'function' && observerOrCallback();
        }
    } : observerOrCallback || {};
}
function createContainerWithFragments(Component, fragments, connectionConfig) {
    var _class;
    var componentName = getComponentName(Component);
    var containerName = getContainerName(Component);
    var metadata = findConnectionMetadata(fragments);
    var getConnectionFromProps = connectionConfig.getConnectionFromProps || createGetConnectionFromProps(metadata);
    var direction = connectionConfig.direction || metadata.direction;
    !direction ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayPaginationContainer: Unable to infer direction of the ' + 'connection, possibly because both first and last are provided.') : ("TURBOPACK unreachable", undefined) : void 0;
    var getFragmentVariables = connectionConfig.getFragmentVariables || createGetFragmentVariables(metadata);
    return _class = /*#__PURE__*/ function(_React$Component) {
        (0, _inheritsLoose2["default"])(_class, _React$Component);
        function _class(props) {
            var _props$__rootIsQueryR, _this;
            _this = _React$Component.call(this, props) || this;
            (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleFragmentDataUpdate", function() {
                _this.setState({
                    data: _this._resolver.resolve()
                });
            });
            (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_hasMore", function() {
                var connectionData = _this._getConnectionData();
                return !!(connectionData && connectionData.hasMore && connectionData.cursor);
            });
            (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_isLoading", function() {
                return !!_this._refetchSubscription;
            });
            (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_refetchConnection", function(totalCount, observerOrCallback, refetchVariables) {
                if (!_this._canFetchPage('refetchConnection')) {
                    return {
                        dispose: function dispose() {}
                    };
                }
                _this._refetchVariables = refetchVariables;
                var paginatingVariables = {
                    count: totalCount,
                    cursor: null,
                    totalCount: totalCount
                };
                var fetch = _this._fetchPage(paginatingVariables, toObserver(observerOrCallback), {
                    force: true
                });
                return {
                    dispose: fetch.unsubscribe
                };
            });
            (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_loadMore", function(pageSize, observerOrCallback, options) {
                if (!_this._canFetchPage('loadMore')) {
                    return {
                        dispose: function dispose() {}
                    };
                }
                var observer = toObserver(observerOrCallback);
                var connectionData = _this._getConnectionData();
                if (!connectionData) {
                    Observable.create(function(sink) {
                        return sink.complete();
                    }).subscribe(observer);
                    return null;
                }
                var totalCount = connectionData.edgeCount + pageSize;
                if (options && options.force) {
                    return _this._refetchConnection(totalCount, observerOrCallback);
                }
                var _ConnectionInterface$ = ConnectionInterface.get(), END_CURSOR = _ConnectionInterface$.END_CURSOR, START_CURSOR = _ConnectionInterface$.START_CURSOR;
                var cursor = connectionData.cursor;
                ("TURBOPACK compile-time truthy", 1) ? warning(cursor != null && cursor !== '', 'ReactRelayPaginationContainer: Cannot `loadMore` without valid `%s` (got `%s`)', direction === FORWARD ? END_CURSOR : START_CURSOR, cursor) : ("TURBOPACK unreachable", undefined);
                var paginatingVariables = {
                    count: pageSize,
                    cursor: cursor,
                    totalCount: totalCount
                };
                var fetch = _this._fetchPage(paginatingVariables, observer, options);
                return {
                    dispose: fetch.unsubscribe
                };
            });
            var relayContext = assertRelayContext(props.__relayContext);
            var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;
            _this._isARequestInFlight = false;
            _this._refetchSubscription = null;
            _this._refetchVariables = null;
            if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
                _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
            } else {
                _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer, _this._handleFragmentDataUpdate);
            }
            _this.state = {
                data: _this._resolver.resolve(),
                prevContext: relayContext,
                contextForChildren: relayContext,
                relayProp: _this._buildRelayProp(relayContext),
                resolverGeneration: 0
            };
            _this._isUnmounted = false;
            _this._hasFetched = false;
            return _this;
        }
        var _proto = _class.prototype;
        _proto.componentDidMount = function componentDidMount() {
            this._isUnmounted = false;
            if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
                this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
            }
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
            if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
                if (prevState.resolverGeneration !== this.state.resolverGeneration) {
                    this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
                } else {
                    this._rerenderIfStoreHasChanged();
                }
            }
        };
        _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
            var _this2 = this;
            var _nextProps$__rootIsQu;
            var relayContext = assertRelayContext(nextProps.__relayContext);
            var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;
            var prevIDs = getDataIDsFromObject(fragments, this.props);
            var nextIDs = getDataIDsFromObject(fragments, nextProps);
            var prevRootVariables = getRootVariablesForFragments(fragments, this.props);
            var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);
            if (relayContext.environment !== this.state.prevContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {
                this._cleanup();
                if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
                    this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
                } else {
                    this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer, this._handleFragmentDataUpdate);
                }
                this.setState(function(prevState) {
                    return {
                        prevContext: relayContext,
                        contextForChildren: relayContext,
                        relayProp: _this2._buildRelayProp(relayContext),
                        resolverGeneration: prevState.resolverGeneration + 1
                    };
                });
            } else if (!this._hasFetched) {
                this._resolver.setProps(nextProps);
            }
            var data = this._resolver.resolve();
            if (data !== this.state.data) {
                this.setState({
                    data: data
                });
            }
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            this._isUnmounted = true;
            this._cleanup();
        };
        _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
            if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp || nextState.resolverGeneration !== this.state.resolverGeneration) {
                return true;
            }
            var keys = Object.keys(nextProps);
            for(var ii = 0; ii < keys.length; ii++){
                var key = keys[ii];
                if (key === '__relayContext') {
                    if (nextState.prevContext.environment !== this.state.prevContext.environment) {
                        return true;
                    }
                } else {
                    if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
                        return true;
                    }
                }
            }
            return false;
        };
        _proto._buildRelayProp = function _buildRelayProp(relayContext) {
            return {
                hasMore: this._hasMore,
                isLoading: this._isLoading,
                loadMore: this._loadMore,
                refetchConnection: this._refetchConnection,
                environment: relayContext.environment
            };
        };
        _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
            var data = this.state.data;
            var maybeNewData = this._resolver.resolve();
            if (data !== maybeNewData) {
                this.setState({
                    data: maybeNewData
                });
            }
        };
        _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
            var data = this.state.data;
            var maybeNewData = this._resolver.resolve();
            this._resolver.setCallback(this.props, this._handleFragmentDataUpdate);
            if (data !== maybeNewData) {
                this.setState({
                    data: maybeNewData
                });
            }
        };
        _proto._getConnectionData = function _getConnectionData() {
            var _this$props = this.props, _ = _this$props.componentRef, restProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, _excluded);
            var props = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, restProps), this.state.data);
            var connectionData = getConnectionFromProps(props);
            if (connectionData == null) {
                return null;
            }
            var _ConnectionInterface$2 = ConnectionInterface.get(), EDGES = _ConnectionInterface$2.EDGES, PAGE_INFO = _ConnectionInterface$2.PAGE_INFO, HAS_NEXT_PAGE = _ConnectionInterface$2.HAS_NEXT_PAGE, HAS_PREV_PAGE = _ConnectionInterface$2.HAS_PREV_PAGE, END_CURSOR = _ConnectionInterface$2.END_CURSOR, START_CURSOR = _ConnectionInterface$2.START_CURSOR;
            !(typeof connectionData === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return `null` or a plain object with %s and %s properties, got `%s`.', componentName, EDGES, PAGE_INFO, connectionData) : ("TURBOPACK unreachable", undefined) : void 0;
            var edges = connectionData[EDGES];
            var pageInfo = connectionData[PAGE_INFO];
            if (edges == null || pageInfo == null) {
                return null;
            }
            !Array.isArray(edges) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return an object with %s: Array, got `%s`.', componentName, EDGES, edges) : ("TURBOPACK unreachable", undefined) : void 0;
            !(typeof pageInfo === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return an object with %s: Object, got `%s`.', componentName, PAGE_INFO, pageInfo) : ("TURBOPACK unreachable", undefined) : void 0;
            var hasMore = direction === FORWARD ? pageInfo[HAS_NEXT_PAGE] : pageInfo[HAS_PREV_PAGE];
            var cursor = direction === FORWARD ? pageInfo[END_CURSOR] : pageInfo[START_CURSOR];
            if (typeof hasMore !== 'boolean' || edges.length !== 0 && typeof cursor === 'undefined') {
                ("TURBOPACK compile-time truthy", 1) ? warning(false, 'ReactRelayPaginationContainer: Cannot paginate without %s fields in `%s`. ' + 'Be sure to fetch %s (got `%s`) and %s (got `%s`).', PAGE_INFO, componentName, direction === FORWARD ? HAS_NEXT_PAGE : HAS_PREV_PAGE, hasMore, direction === FORWARD ? END_CURSOR : START_CURSOR, cursor) : ("TURBOPACK unreachable", undefined);
                return null;
            }
            return {
                cursor: cursor,
                edgeCount: edges.length,
                hasMore: hasMore
            };
        };
        _proto._getQueryFetcher = function _getQueryFetcher() {
            if (!this._queryFetcher) {
                this._queryFetcher = new ReactRelayQueryFetcher();
            }
            return this._queryFetcher;
        };
        _proto._canFetchPage = function _canFetchPage(method) {
            if (this._isUnmounted) {
                ("TURBOPACK compile-time truthy", 1) ? warning(false, 'ReactRelayPaginationContainer: Unexpected call of `%s` ' + 'on unmounted container `%s`. It looks like some instances ' + 'of your container still trying to fetch data but they already ' + 'unmounted. Please make sure you clear all timers, intervals, async ' + 'calls, etc that may trigger `%s` call.', method, containerName, method) : ("TURBOPACK unreachable", undefined);
                return false;
            }
            return true;
        };
        _proto._fetchPage = function _fetchPage(paginatingVariables, observer, options) {
            var _this3 = this;
            var _assertRelayContext = assertRelayContext(this.props.__relayContext), environment = _assertRelayContext.environment;
            var _this$props2 = this.props, _ = _this$props2.componentRef, __relayContext = _this$props2.__relayContext, __rootIsQueryRenderer = _this$props2.__rootIsQueryRenderer, restProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props2, _excluded2);
            var props = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, restProps), this.state.data);
            var fragmentVariables;
            var rootVariables = getRootVariablesForFragments(fragments, restProps);
            fragmentVariables = getVariablesFromObject(fragments, restProps);
            fragmentVariables = (0, _objectSpread3["default"])((0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, rootVariables), fragmentVariables), this._refetchVariables);
            var fetchVariables = connectionConfig.getVariables(props, {
                count: paginatingVariables.count,
                cursor: paginatingVariables.cursor
            }, fragmentVariables);
            !(typeof fetchVariables === 'object' && fetchVariables !== null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'ReactRelayPaginationContainer: Expected `getVariables()` to ' + 'return an object, got `%s` in `%s`.', fetchVariables, componentName) : ("TURBOPACK unreachable", undefined) : void 0;
            fetchVariables = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, fetchVariables), this._refetchVariables);
            fragmentVariables = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, fetchVariables), fragmentVariables);
            var cacheConfig = options ? {
                force: !!options.force
            } : undefined;
            if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {
                cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;
            }
            var request = getRequest(connectionConfig.query);
            var operation = createOperationDescriptor(request, fetchVariables, cacheConfig);
            var refetchSubscription = null;
            if (this._refetchSubscription) {
                this._refetchSubscription.unsubscribe();
            }
            this._hasFetched = true;
            var onNext = function onNext(payload, complete) {
                var prevData = _this3._resolver.resolve();
                _this3._resolver.setVariables(getFragmentVariables(fragmentVariables, paginatingVariables.totalCount), operation.request.node);
                var nextData = _this3._resolver.resolve();
                if (!areEqual(prevData, nextData)) {
                    _this3.setState({
                        data: nextData,
                        contextForChildren: {
                            environment: _this3.props.__relayContext.environment
                        }
                    }, complete);
                } else {
                    complete();
                }
            };
            var cleanup = function cleanup() {
                if (_this3._refetchSubscription === refetchSubscription) {
                    _this3._refetchSubscription = null;
                    _this3._isARequestInFlight = false;
                }
            };
            this._isARequestInFlight = true;
            refetchSubscription = this._getQueryFetcher().execute({
                environment: environment,
                operation: operation,
                preservePreviousReferences: true
            }).mergeMap(function(payload) {
                return Observable.create(function(sink) {
                    onNext(payload, function() {
                        sink.next();
                        sink.complete();
                    });
                });
            })["do"]({
                error: cleanup,
                complete: cleanup,
                unsubscribe: cleanup
            }).subscribe(observer || {});
            this._refetchSubscription = this._isARequestInFlight ? refetchSubscription : null;
            return refetchSubscription;
        };
        _proto._cleanup = function _cleanup() {
            this._resolver.dispose();
            this._refetchVariables = null;
            this._hasFetched = false;
            if (this._refetchSubscription) {
                this._refetchSubscription.unsubscribe();
                this._refetchSubscription = null;
                this._isARequestInFlight = false;
            }
            if (this._queryFetcher) {
                this._queryFetcher.dispose();
            }
        };
        _proto.render = function render() {
            var _this$props3 = this.props, componentRef = _this$props3.componentRef, __relayContext = _this$props3.__relayContext, __rootIsQueryRenderer = _this$props3.__rootIsQueryRenderer, props = (0, _objectWithoutPropertiesLoose2["default"])(_this$props3, _excluded3);
            return /*#__PURE__*/ React.createElement(ReactRelayContext.Provider, {
                value: this.state.contextForChildren
            }, /*#__PURE__*/ React.createElement(Component, (0, _extends2["default"])({}, props, this.state.data, {
                ref: componentRef,
                relay: this.state.relayProp
            })));
        };
        return _class;
    }(React.Component), (0, _defineProperty2["default"])(_class, "displayName", containerName), _class;
}
function createContainer(Component, fragmentSpec, connectionConfig) {
    return buildReactRelayContainer(Component, fragmentSpec, function(ComponentClass, fragments) {
        return createContainerWithFragments(ComponentClass, fragments, connectionConfig);
    });
}
module.exports = {
    createContainer: createContainer
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayQueryRenderer.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _assertThisInitialized2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/assertThisInitialized.js [app-ssr] (ecmascript)"));
var _inheritsLoose2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/inheritsLoose.js [app-ssr] (ecmascript)"));
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var ReactRelayContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContext.js [app-ssr] (ecmascript)");
var ReactRelayQueryFetcher = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayQueryFetcher.js [app-ssr] (ecmascript)");
var ReactRelayQueryRendererContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayQueryRendererContext.js [app-ssr] (ecmascript)");
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), createOperationDescriptor = _require.createOperationDescriptor, deepFreeze = _require.deepFreeze, getRequest = _require.getRequest;
var requestCache = {};
var queryRendererContext = {
    rootIsQueryRenderer: true
};
var ReactRelayQueryRenderer = /*#__PURE__*/ function(_React$Component) {
    (0, _inheritsLoose2["default"])(ReactRelayQueryRenderer, _React$Component);
    function ReactRelayQueryRenderer(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleDataChange", function(params) {
            var error = params.error == null ? null : params.error;
            var snapshot = params.snapshot == null ? null : params.snapshot;
            _this.setState(function(prevState) {
                var prevRequestCacheKey = prevState.requestCacheKey;
                if (prevRequestCacheKey) {
                    delete requestCache[prevRequestCacheKey];
                }
                if (snapshot === prevState.snapshot && error === prevState.error) {
                    return null;
                }
                return {
                    renderProps: getRenderProps(error, snapshot, prevState.queryFetcher, prevState.retryCallbacks),
                    snapshot: snapshot,
                    requestCacheKey: null
                };
            });
        });
        var retryCallbacks = {
            handleDataChange: null,
            handleRetryAfterError: null
        };
        var queryFetcher;
        var requestCacheKey;
        if (props.query) {
            var query = props.query;
            var request = getRequest(query);
            requestCacheKey = getRequestCacheKey(request.params, props.variables);
            queryFetcher = requestCache[requestCacheKey] ? requestCache[requestCacheKey].queryFetcher : new ReactRelayQueryFetcher();
        } else {
            queryFetcher = new ReactRelayQueryFetcher();
        }
        _this._maybeHiddenOrFastRefresh = false;
        _this.state = (0, _objectSpread2["default"])({
            prevPropsEnvironment: props.environment,
            prevPropsVariables: props.variables,
            prevQuery: props.query,
            queryFetcher: queryFetcher,
            retryCallbacks: retryCallbacks
        }, fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks, requestCacheKey));
        return _this;
    }
    ReactRelayQueryRenderer.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
        if (prevState.prevQuery !== nextProps.query || prevState.prevPropsEnvironment !== nextProps.environment || !areEqual(prevState.prevPropsVariables, nextProps.variables)) {
            return resetQueryStateForUpdate(nextProps, prevState);
        }
        return null;
    };
    var _proto = ReactRelayQueryRenderer.prototype;
    _proto.componentDidMount = function componentDidMount() {
        var _this2 = this;
        if (this._maybeHiddenOrFastRefresh === true) {
            this._maybeHiddenOrFastRefresh = false;
            this.setState(function(prevState) {
                var newState = resetQueryStateForUpdate(_this2.props, prevState);
                var requestCacheKey = newState.requestCacheKey, queryFetcher = newState.queryFetcher;
                if (requestCacheKey != null && requestCache[requestCacheKey] != null) {
                    queryFetcher.setOnDataChange(_this2._handleDataChange);
                }
                return newState;
            });
            return;
        }
        var _this$state = this.state, retryCallbacks = _this$state.retryCallbacks, queryFetcher = _this$state.queryFetcher, requestCacheKey = _this$state.requestCacheKey;
        if (requestCacheKey) {
            delete requestCache[requestCacheKey];
        }
        retryCallbacks.handleDataChange = this._handleDataChange;
        retryCallbacks.handleRetryAfterError = function(error) {
            return _this2.setState(function(prevState) {
                var prevRequestCacheKey = prevState.requestCacheKey;
                if (prevRequestCacheKey) {
                    delete requestCache[prevRequestCacheKey];
                }
                return {
                    renderProps: getLoadingRenderProps(),
                    requestCacheKey: null
                };
            });
        };
        if (this.props.query) {
            queryFetcher.setOnDataChange(this._handleDataChange);
        }
    };
    _proto.componentDidUpdate = function componentDidUpdate(_prevProps, prevState) {
        var _this$state2 = this.state, queryFetcher = _this$state2.queryFetcher, requestCacheKey = _this$state2.requestCacheKey;
        if (requestCacheKey) {
            delete requestCache[requestCacheKey];
            delete this.state.requestCacheKey;
        }
        if (this.props.query && queryFetcher !== prevState.queryFetcher) {
            queryFetcher.setOnDataChange(this._handleDataChange);
        }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.state.queryFetcher.dispose();
        this._maybeHiddenOrFastRefresh = true;
    };
    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        return nextProps.render !== this.props.render || nextState.renderProps !== this.state.renderProps;
    };
    _proto.render = function render() {
        var _this$state3 = this.state, renderProps = _this$state3.renderProps, relayContext = _this$state3.relayContext;
        if ("TURBOPACK compile-time truthy", 1) {
            deepFreeze(renderProps);
        }
        return /*#__PURE__*/ React.createElement(ReactRelayContext.Provider, {
            value: relayContext
        }, /*#__PURE__*/ React.createElement(ReactRelayQueryRendererContext.Provider, {
            value: queryRendererContext
        }, this.props.render(renderProps)));
    };
    return ReactRelayQueryRenderer;
}(React.Component);
function getLoadingRenderProps() {
    return {
        error: null,
        props: null,
        retry: null
    };
}
function getEmptyRenderProps() {
    return {
        error: null,
        props: {},
        retry: null
    };
}
function getRenderProps(error, snapshot, queryFetcher, retryCallbacks) {
    return {
        error: error ? error : null,
        props: snapshot ? snapshot.data : null,
        retry: function retry(cacheConfigOverride) {
            var syncSnapshot = queryFetcher.retry(cacheConfigOverride);
            if (syncSnapshot && typeof retryCallbacks.handleDataChange === 'function') {
                retryCallbacks.handleDataChange({
                    snapshot: syncSnapshot
                });
            } else if (error && typeof retryCallbacks.handleRetryAfterError === 'function') {
                retryCallbacks.handleRetryAfterError(error);
            }
        }
    };
}
function getRequestCacheKey(request, variables) {
    return JSON.stringify({
        id: request.cacheID ? request.cacheID : request.id,
        variables: variables
    });
}
function resetQueryStateForUpdate(props, prevState) {
    var query = props.query;
    var prevSelectionReferences = prevState.queryFetcher.getSelectionReferences();
    prevState.queryFetcher.disposeRequest();
    var queryFetcher;
    if (query) {
        var request = getRequest(query);
        var requestCacheKey = getRequestCacheKey(request.params, props.variables);
        queryFetcher = requestCache[requestCacheKey] ? requestCache[requestCacheKey].queryFetcher : new ReactRelayQueryFetcher(prevSelectionReferences);
    } else {
        queryFetcher = new ReactRelayQueryFetcher(prevSelectionReferences);
    }
    return (0, _objectSpread2["default"])({
        prevQuery: props.query,
        prevPropsEnvironment: props.environment,
        prevPropsVariables: props.variables,
        queryFetcher: queryFetcher
    }, fetchQueryAndComputeStateFromProps(props, queryFetcher, prevState.retryCallbacks));
}
function fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks, requestCacheKey) {
    var environment = props.environment, query = props.query, variables = props.variables, cacheConfig = props.cacheConfig;
    var genericEnvironment = environment;
    if (query) {
        var request = getRequest(query);
        var operation = createOperationDescriptor(request, variables, cacheConfig);
        var relayContext = {
            environment: genericEnvironment
        };
        if (typeof requestCacheKey === 'string' && requestCache[requestCacheKey]) {
            var snapshot = requestCache[requestCacheKey].snapshot;
            if (snapshot) {
                return {
                    error: null,
                    relayContext: relayContext,
                    renderProps: getRenderProps(null, snapshot, queryFetcher, retryCallbacks),
                    snapshot: snapshot,
                    requestCacheKey: requestCacheKey
                };
            } else {
                return {
                    error: null,
                    relayContext: relayContext,
                    renderProps: getLoadingRenderProps(),
                    snapshot: null,
                    requestCacheKey: requestCacheKey
                };
            }
        }
        try {
            var storeSnapshot = queryFetcher.lookupInStore(genericEnvironment, operation, props.fetchPolicy);
            var querySnapshot = queryFetcher.fetch({
                environment: genericEnvironment,
                onDataChange: null,
                operation: operation
            });
            var _snapshot = querySnapshot || storeSnapshot;
            requestCacheKey = requestCacheKey || getRequestCacheKey(request.params, props.variables);
            requestCache[requestCacheKey] = {
                queryFetcher: queryFetcher,
                snapshot: _snapshot
            };
            if (!_snapshot) {
                return {
                    error: null,
                    relayContext: relayContext,
                    renderProps: getLoadingRenderProps(),
                    snapshot: null,
                    requestCacheKey: requestCacheKey
                };
            }
            return {
                error: null,
                relayContext: relayContext,
                renderProps: getRenderProps(null, _snapshot, queryFetcher, retryCallbacks),
                snapshot: _snapshot,
                requestCacheKey: requestCacheKey
            };
        } catch (error) {
            return {
                error: error,
                relayContext: relayContext,
                renderProps: getRenderProps(error, null, queryFetcher, retryCallbacks),
                snapshot: null,
                requestCacheKey: requestCacheKey
            };
        }
    } else {
        queryFetcher.dispose();
        var _relayContext = {
            environment: genericEnvironment
        };
        return {
            error: null,
            relayContext: _relayContext,
            renderProps: getEmptyRenderProps(),
            requestCacheKey: null
        };
    }
}
module.exports = ReactRelayQueryRenderer;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayRefetchContainer.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _extends2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/extends.js [app-ssr] (ecmascript)"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js [app-ssr] (ecmascript)"));
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _assertThisInitialized2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/assertThisInitialized.js [app-ssr] (ecmascript)"));
var _inheritsLoose2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/inheritsLoose.js [app-ssr] (ecmascript)"));
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var _excluded = [
    "componentRef",
    "__relayContext",
    "__rootIsQueryRenderer"
];
var buildReactRelayContainer = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/buildReactRelayContainer.js [app-ssr] (ecmascript)");
var getRootVariablesForFragments = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/getRootVariablesForFragments.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContainerUtils.js [app-ssr] (ecmascript)"), getContainerName = _require.getContainerName;
var ReactRelayContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContext.js [app-ssr] (ecmascript)");
var ReactRelayQueryFetcher = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayQueryFetcher.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/RelayContext.js [app-ssr] (ecmascript)"), assertRelayContext = _require2.assertRelayContext;
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), Observable = _require3.Observable, createFragmentSpecResolver = _require3.createFragmentSpecResolver, createOperationDescriptor = _require3.createOperationDescriptor, getDataIDsFromObject = _require3.getDataIDsFromObject, getRequest = _require3.getRequest, getVariablesFromObject = _require3.getVariablesFromObject, isScalarAndEqual = _require3.isScalarAndEqual;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function createContainerWithFragments(Component, fragments, taggedNode) {
    var _class;
    var containerName = getContainerName(Component);
    return _class = /*#__PURE__*/ function(_React$Component) {
        (0, _inheritsLoose2["default"])(_class, _React$Component);
        function _class(props) {
            var _props$__rootIsQueryR, _this;
            _this = _React$Component.call(this, props) || this;
            (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleFragmentDataUpdate", function() {
                var resolverFromThisUpdate = _this.state.resolver;
                _this.setState(function(updatedState) {
                    return resolverFromThisUpdate === updatedState.resolver ? {
                        data: updatedState.resolver.resolve()
                    } : null;
                });
            });
            (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_refetch", function(refetchVariables, renderVariables, observerOrCallback, options) {
                if (_this._isUnmounted) {
                    ("TURBOPACK compile-time truthy", 1) ? warning(false, 'ReactRelayRefetchContainer: Unexpected call of `refetch` ' + 'on unmounted container `%s`. It looks like some instances ' + 'of your container still trying to refetch the data but they already ' + 'unmounted. Please make sure you clear all timers, intervals, async ' + 'calls, etc that may trigger `refetch`.', containerName) : ("TURBOPACK unreachable", undefined);
                    return {
                        dispose: function dispose() {}
                    };
                }
                var _assertRelayContext = assertRelayContext(_this.props.__relayContext), environment = _assertRelayContext.environment;
                var rootVariables = getRootVariablesForFragments(fragments, _this.props);
                var fetchVariables = typeof refetchVariables === 'function' ? refetchVariables(_this._getFragmentVariables()) : refetchVariables;
                fetchVariables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, rootVariables), fetchVariables);
                var fragmentVariables = renderVariables ? (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, fetchVariables), renderVariables) : fetchVariables;
                var cacheConfig = options ? {
                    force: !!options.force
                } : undefined;
                if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {
                    cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;
                }
                var observer = typeof observerOrCallback === 'function' ? {
                    next: observerOrCallback,
                    error: observerOrCallback
                } : observerOrCallback || {};
                var query = getRequest(taggedNode);
                var operation = createOperationDescriptor(query, fetchVariables, cacheConfig);
                _this.state.localVariables = fetchVariables;
                _this._refetchSubscription && _this._refetchSubscription.unsubscribe();
                var refetchSubscription;
                var storeSnapshot = _this._getQueryFetcher().lookupInStore(environment, operation, options === null || options === void 0 ? void 0 : options.fetchPolicy);
                if (storeSnapshot != null) {
                    _this.state.resolver.setVariables(fragmentVariables, operation.request.node);
                    _this.setState(function(latestState) {
                        return {
                            data: latestState.resolver.resolve(),
                            contextForChildren: {
                                environment: _this.props.__relayContext.environment
                            }
                        };
                    }, function() {
                        observer.next && observer.next();
                        observer.complete && observer.complete();
                    });
                    return {
                        dispose: function dispose() {}
                    };
                }
                _this._getQueryFetcher().execute({
                    environment: environment,
                    operation: operation,
                    preservePreviousReferences: true
                }).mergeMap(function(response) {
                    _this.state.resolver.setVariables(fragmentVariables, operation.request.node);
                    return Observable.create(function(sink) {
                        return _this.setState(function(latestState) {
                            return {
                                data: latestState.resolver.resolve(),
                                contextForChildren: {
                                    environment: _this.props.__relayContext.environment
                                }
                            };
                        }, function() {
                            sink.next();
                            sink.complete();
                        });
                    });
                })["finally"](function() {
                    if (_this._refetchSubscription === refetchSubscription) {
                        _this._refetchSubscription = null;
                    }
                }).subscribe((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, observer), {}, {
                    start: function start(subscription) {
                        _this._refetchSubscription = refetchSubscription = subscription;
                        observer.start && observer.start(subscription);
                    }
                }));
                return {
                    dispose: function dispose() {
                        refetchSubscription && refetchSubscription.unsubscribe();
                    }
                };
            });
            var relayContext = assertRelayContext(props.__relayContext);
            var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;
            _this._refetchSubscription = null;
            var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
            _this.state = {
                data: resolver.resolve(),
                localVariables: null,
                prevProps: props,
                prevPropsContext: relayContext,
                contextForChildren: relayContext,
                relayProp: getRelayProp(relayContext.environment, _this._refetch),
                resolver: resolver
            };
            _this._isUnmounted = false;
            return _this;
        }
        var _proto = _class.prototype;
        _proto.componentDidMount = function componentDidMount() {
            this._isUnmounted = false;
            this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
            if (this.state.resolver !== prevState.resolver) {
                prevState.resolver.dispose();
                this._queryFetcher && this._queryFetcher.dispose();
                this._refetchSubscription && this._refetchSubscription.unsubscribe();
                this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
            } else {
                this._rerenderIfStoreHasChanged();
            }
        };
        _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
            var _nextProps$__rootIsQu;
            var prevProps = prevState.prevProps;
            var relayContext = assertRelayContext(nextProps.__relayContext);
            var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;
            var prevIDs = getDataIDsFromObject(fragments, prevProps);
            var nextIDs = getDataIDsFromObject(fragments, nextProps);
            var prevRootVariables = getRootVariablesForFragments(fragments, prevProps);
            var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);
            var resolver = prevState.resolver;
            if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {
                resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
                return {
                    data: resolver.resolve(),
                    localVariables: null,
                    prevProps: nextProps,
                    prevPropsContext: relayContext,
                    contextForChildren: relayContext,
                    relayProp: getRelayProp(relayContext.environment, prevState.relayProp.refetch),
                    resolver: resolver
                };
            } else if (!prevState.localVariables) {
                resolver.setProps(nextProps);
            }
            var data = resolver.resolve();
            if (data !== prevState.data) {
                return {
                    data: data,
                    prevProps: nextProps
                };
            }
            return null;
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            this._isUnmounted = true;
            this.state.resolver.dispose();
            this._queryFetcher && this._queryFetcher.dispose();
            this._refetchSubscription && this._refetchSubscription.unsubscribe();
        };
        _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
            if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp) {
                return true;
            }
            var keys = Object.keys(nextProps);
            for(var ii = 0; ii < keys.length; ii++){
                var key = keys[ii];
                if (key === '__relayContext') {
                    if (this.state.prevPropsContext.environment !== nextState.prevPropsContext.environment) {
                        return true;
                    }
                } else {
                    if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
                        return true;
                    }
                }
            }
            return false;
        };
        _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
            var _this$state = this.state, data = _this$state.data, resolver = _this$state.resolver;
            var maybeNewData = resolver.resolve();
            if (data !== maybeNewData) {
                this.setState({
                    data: maybeNewData
                });
            }
        };
        _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
            var _this$state2 = this.state, data = _this$state2.data, resolver = _this$state2.resolver;
            var maybeNewData = resolver.resolve();
            resolver.setCallback(this.props, this._handleFragmentDataUpdate);
            if (data !== maybeNewData) {
                this.setState({
                    data: maybeNewData
                });
            }
        };
        _proto._getFragmentVariables = function _getFragmentVariables() {
            return getVariablesFromObject(fragments, this.props);
        };
        _proto._getQueryFetcher = function _getQueryFetcher() {
            if (!this._queryFetcher) {
                this._queryFetcher = new ReactRelayQueryFetcher();
            }
            return this._queryFetcher;
        };
        _proto.render = function render() {
            var _this$props = this.props, componentRef = _this$props.componentRef, __relayContext = _this$props.__relayContext, __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer, props = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, _excluded);
            var _this$state3 = this.state, relayProp = _this$state3.relayProp, contextForChildren = _this$state3.contextForChildren;
            return /*#__PURE__*/ React.createElement(ReactRelayContext.Provider, {
                value: contextForChildren
            }, /*#__PURE__*/ React.createElement(Component, (0, _extends2["default"])({}, props, this.state.data, {
                ref: componentRef,
                relay: relayProp
            })));
        };
        return _class;
    }(React.Component), (0, _defineProperty2["default"])(_class, "displayName", containerName), _class;
}
function getRelayProp(environment, refetch) {
    return {
        environment: environment,
        refetch: refetch
    };
}
function createContainer(Component, fragmentSpec, taggedNode) {
    return buildReactRelayContainer(Component, fragmentSpec, function(ComponentClass, fragments) {
        return createContainerWithFragments(ComponentClass, fragments, taggedNode);
    });
}
module.exports = {
    createContainer: createContainer
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/ProfilerContext.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var ProfilerContext = React.createContext({
    wrapPrepareQueryResource: function wrapPrepareQueryResource(cb) {
        return cb();
    }
});
module.exports = ProfilerContext;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var ReactRelayContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContext.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useContext = _require.useContext;
function useRelayEnvironment() {
    var context = useContext(ReactRelayContext);
    !(context != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'useRelayEnvironment: Expected to have found a Relay environment provided by ' + 'a `RelayEnvironmentProvider` component. ' + 'This usually means that useRelayEnvironment was used in a ' + 'component that is not a descendant of a `RelayEnvironmentProvider`. ' + 'Please make sure a `RelayEnvironmentProvider` has been rendered somewhere ' + 'as a parent or ancestor of your component.') : ("TURBOPACK unreachable", undefined) : void 0;
    return context.environment;
}
module.exports = useRelayEnvironment;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/EntryPointContainer.react.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var ProfilerContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/ProfilerContext.js [app-ssr] (ecmascript)");
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useContext = _require.useContext, useEffect = _require.useEffect;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function EntryPointContainer(_ref) {
    var entryPointReference = _ref.entryPointReference, props = _ref.props;
    ("TURBOPACK compile-time truthy", 1) ? warning(entryPointReference.isDisposed === false, '<EntryPointContainer>: Expected entryPointReference to not be disposed ' + 'yet. This is because disposing the entrypoint marks it for future garbage ' + 'collection, and as such may no longer be present in the Relay store. ' + 'In the future, this will become a hard error.') : ("TURBOPACK unreachable", undefined);
    var getComponent = entryPointReference.getComponent, queries = entryPointReference.queries, entryPoints = entryPointReference.entryPoints, extraProps = entryPointReference.extraProps, rootModuleID = entryPointReference.rootModuleID;
    var Component = getComponent();
    var profilerContext = useContext(ProfilerContext);
    var environment = useRelayEnvironment();
    useEffect(function() {
        environment.__log({
            name: 'entrypoint.root.consume',
            profilerContext: profilerContext,
            rootModuleID: rootModuleID
        });
    }, [
        environment,
        profilerContext,
        rootModuleID
    ]);
    return /*#__PURE__*/ React.createElement(Component, {
        entryPoints: entryPoints,
        extraProps: extraProps,
        props: props,
        queries: queries
    });
}
module.exports = EntryPointContainer;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadQuery.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), fetchQueryDeduped = _require.__internal.fetchQueryDeduped, Observable = _require.Observable, PreloadableQueryRegistry = _require.PreloadableQueryRegistry, RelayFeatureFlags = _require.RelayFeatureFlags, ReplaySubject = _require.ReplaySubject, createOperationDescriptor = _require.createOperationDescriptor, getRequest = _require.getRequest, getRequestIdentifier = _require.getRequestIdentifier;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var RenderDispatcher = null;
var fetchKey = 100001;
function useTrackLoadQueryInRender() {
    if (RenderDispatcher === null) {
        var _React$__SECRET_INTER, _React$__SECRET_INTER2;
        RenderDispatcher = (_React$__SECRET_INTER = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React$__SECRET_INTER === void 0 ? void 0 : (_React$__SECRET_INTER2 = _React$__SECRET_INTER.ReactCurrentDispatcher) === null || _React$__SECRET_INTER2 === void 0 ? void 0 : _React$__SECRET_INTER2.current;
    }
}
function loadQuery(environment, preloadableRequest, variables, options, environmentProviderOptions) {
    var _React$__SECRET_INTER3, _React$__SECRET_INTER4, _options$__nameForWar, _options$fetchPolicy;
    var CurrentDispatcher = (_React$__SECRET_INTER3 = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React$__SECRET_INTER3 === void 0 ? void 0 : (_React$__SECRET_INTER4 = _React$__SECRET_INTER3.ReactCurrentDispatcher) === null || _React$__SECRET_INTER4 === void 0 ? void 0 : _React$__SECRET_INTER4.current;
    ("TURBOPACK compile-time truthy", 1) ? warning(RenderDispatcher == null || CurrentDispatcher !== RenderDispatcher, 'Relay: `%s` should not be called inside a React render function.', (_options$__nameForWar = options === null || options === void 0 ? void 0 : options.__nameForWarning) !== null && _options$__nameForWar !== void 0 ? _options$__nameForWar : 'loadQuery') : ("TURBOPACK unreachable", undefined);
    fetchKey++;
    var fetchPolicy = (_options$fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy) !== null && _options$fetchPolicy !== void 0 ? _options$fetchPolicy : 'store-or-network';
    var networkCacheConfig = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, options === null || options === void 0 ? void 0 : options.networkCacheConfig), {}, {
        force: true
    });
    var retainReference;
    var didExecuteNetworkSource = false;
    var executeWithNetworkSource = function executeWithNetworkSource(operation, networkObservable) {
        didExecuteNetworkSource = true;
        return environment.executeWithSource({
            operation: operation,
            source: networkObservable
        });
    };
    var executionSubject = new ReplaySubject();
    var returnedObservable = Observable.create(function(sink) {
        return executionSubject.subscribe(sink);
    });
    var unsubscribeFromNetworkRequest;
    var networkError = null;
    var didMakeNetworkRequest = false;
    var makeNetworkRequest = function makeNetworkRequest(params) {
        didMakeNetworkRequest = true;
        var observable;
        var subject = new ReplaySubject();
        if (RelayFeatureFlags.ENABLE_LOAD_QUERY_REQUEST_DEDUPING === true) {
            var identifier = 'raw-network-request-' + getRequestIdentifier(params, variables);
            observable = fetchQueryDeduped(environment, identifier, function() {
                var network = environment.getNetwork();
                return network.execute(params, variables, networkCacheConfig);
            });
        } else {
            var network = environment.getNetwork();
            observable = network.execute(params, variables, networkCacheConfig);
        }
        var _observable$subscribe = observable.subscribe({
            error: function error(err) {
                networkError = err;
                subject.error(err);
            },
            next: function next(data) {
                subject.next(data);
            },
            complete: function complete() {
                subject.complete();
            }
        }), unsubscribe = _observable$subscribe.unsubscribe;
        unsubscribeFromNetworkRequest = unsubscribe;
        return Observable.create(function(sink) {
            var subjectSubscription = subject.subscribe(sink);
            return function() {
                subjectSubscription.unsubscribe();
                unsubscribeFromNetworkRequest();
            };
        });
    };
    var unsubscribeFromExecution;
    var executeDeduped = function executeDeduped(operation, fetchFn) {
        if (RelayFeatureFlags.ENABLE_LOAD_QUERY_REQUEST_DEDUPING === true) {
            didMakeNetworkRequest = true;
        }
        var _fetchQueryDeduped$su = fetchQueryDeduped(environment, operation.request.identifier, fetchFn).subscribe({
            error: function error(err) {
                executionSubject.error(err);
            },
            next: function next(data) {
                executionSubject.next(data);
            },
            complete: function complete() {
                executionSubject.complete();
            }
        });
        unsubscribeFromExecution = _fetchQueryDeduped$su.unsubscribe;
    };
    var checkAvailabilityAndExecute = function checkAvailabilityAndExecute(concreteRequest) {
        var operation = createOperationDescriptor(concreteRequest, variables, networkCacheConfig);
        retainReference = environment.retain(operation);
        if (fetchPolicy === 'store-only') {
            return;
        }
        var shouldFetch = fetchPolicy !== 'store-or-network' || environment.check(operation).status !== 'available';
        if (shouldFetch) {
            executeDeduped(operation, function() {
                var networkObservable = makeNetworkRequest(concreteRequest.params);
                var executeObservable = executeWithNetworkSource(operation, networkObservable);
                return executeObservable;
            });
        }
    };
    var params;
    var cancelOnLoadCallback;
    var queryId;
    if (preloadableRequest.kind === 'PreloadableConcreteRequest') {
        var preloadableConcreteRequest = preloadableRequest;
        params = preloadableConcreteRequest.params;
        var _params = params;
        queryId = _params.id;
        !(queryId !== null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: `loadQuery` requires that preloadable query `%s` has a persisted query id', params.name) : ("TURBOPACK unreachable", undefined) : void 0;
        var _module = PreloadableQueryRegistry.get(queryId);
        if (_module != null) {
            checkAvailabilityAndExecute(_module);
        } else {
            var networkObservable = fetchPolicy === 'store-only' ? null : makeNetworkRequest(params);
            var _PreloadableQueryRegi = PreloadableQueryRegistry.onLoad(queryId, function(preloadedModule) {
                cancelOnLoadCallback();
                var operation = createOperationDescriptor(preloadedModule, variables, networkCacheConfig);
                retainReference = environment.retain(operation);
                if (networkObservable != null) {
                    executeDeduped(operation, function() {
                        return executeWithNetworkSource(operation, networkObservable);
                    });
                }
            });
            cancelOnLoadCallback = _PreloadableQueryRegi.dispose;
        }
    } else {
        var graphQlTaggedNode = preloadableRequest;
        var request = getRequest(graphQlTaggedNode);
        params = request.params;
        queryId = params.cacheID != null ? params.cacheID : params.id;
        checkAvailabilityAndExecute(request);
    }
    var isDisposed = false;
    var isReleased = false;
    var isNetworkRequestCancelled = false;
    var releaseQuery = function releaseQuery() {
        if (isReleased) {
            return;
        }
        retainReference && retainReference.dispose();
        isReleased = true;
    };
    var cancelNetworkRequest = function cancelNetworkRequest() {
        if (isNetworkRequestCancelled) {
            return;
        }
        if (didExecuteNetworkSource) {
            unsubscribeFromExecution && unsubscribeFromExecution();
        } else {
            unsubscribeFromNetworkRequest && unsubscribeFromNetworkRequest();
        }
        cancelOnLoadCallback && cancelOnLoadCallback();
        isNetworkRequestCancelled = true;
    };
    return {
        kind: 'PreloadedQuery',
        environment: environment,
        environmentProviderOptions: environmentProviderOptions,
        dispose: function dispose() {
            if (isDisposed) {
                return;
            }
            releaseQuery();
            cancelNetworkRequest();
            isDisposed = true;
        },
        releaseQuery: releaseQuery,
        cancelNetworkRequest: cancelNetworkRequest,
        fetchKey: fetchKey,
        id: queryId,
        get isDisposed () {
            return isDisposed || isReleased;
        },
        get networkError () {
            return networkError;
        },
        name: params.name,
        networkCacheConfig: networkCacheConfig,
        fetchPolicy: fetchPolicy,
        source: didMakeNetworkRequest ? returnedObservable : undefined,
        variables: variables
    };
}
module.exports = {
    loadQuery: loadQuery,
    useTrackLoadQueryInRender: useTrackLoadQueryInRender
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadEntryPoint.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadQuery.js [app-ssr] (ecmascript)"), loadQuery = _require.loadQuery;
function loadEntryPoint(environmentProvider, entryPoint, entryPointParams) {
    var loadingPromise = null;
    if (entryPoint.root.getModuleIfRequired() == null) {
        loadingPromise = entryPoint.root.load();
    }
    var preloadProps = entryPoint.getPreloadProps(entryPointParams);
    var queries = preloadProps.queries, entryPoints = preloadProps.entryPoints, extraProps = preloadProps.extraProps;
    var preloadedQueries = {};
    var preloadedEntryPoints = {};
    if (queries != null) {
        var queriesPropNames = Object.keys(queries);
        queriesPropNames.forEach(function(queryPropName) {
            var _queries$queryPropNam = queries[queryPropName], environmentProviderOptions = _queries$queryPropNam.environmentProviderOptions, options = _queries$queryPropNam.options, parameters = _queries$queryPropNam.parameters, variables = _queries$queryPropNam.variables;
            var environment = environmentProvider.getEnvironment(environmentProviderOptions);
            preloadedQueries[queryPropName] = loadQuery(environment, parameters, variables, {
                fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
                networkCacheConfig: options === null || options === void 0 ? void 0 : options.networkCacheConfig,
                __nameForWarning: 'loadEntryPoint'
            }, environmentProviderOptions);
        });
    }
    if (entryPoints != null) {
        var entryPointPropNames = Object.keys(entryPoints);
        entryPointPropNames.forEach(function(entryPointPropName) {
            var entryPointDescription = entryPoints[entryPointPropName];
            if (entryPointDescription == null) {
                return;
            }
            var nestedEntryPoint = entryPointDescription.entryPoint, nestedParams = entryPointDescription.entryPointParams;
            preloadedEntryPoints[entryPointPropName] = loadEntryPoint(environmentProvider, nestedEntryPoint, nestedParams);
        });
    }
    var isDisposed = false;
    return {
        dispose: function dispose() {
            if (isDisposed) {
                return;
            }
            if (preloadedQueries != null) {
                Object.values(preloadedQueries).forEach(function(_ref) {
                    var innerDispose = _ref.dispose;
                    innerDispose();
                });
            }
            if (preloadedEntryPoints != null) {
                Object.values(preloadedEntryPoints).forEach(function(_ref2) {
                    var innerDispose = _ref2.dispose;
                    innerDispose();
                });
            }
            isDisposed = true;
        },
        entryPoints: preloadedEntryPoints,
        extraProps: extraProps !== null && extraProps !== void 0 ? extraProps : null,
        getComponent: function getComponent() {
            var componentModule = entryPoint.root.getModuleIfRequired();
            if (componentModule == null) {
                var _loadingPromise;
                loadingPromise = (_loadingPromise = loadingPromise) !== null && _loadingPromise !== void 0 ? _loadingPromise : entryPoint.root.load();
                throw loadingPromise;
            }
            var component = componentModule["default"] != null ? componentModule["default"] : componentModule;
            return component;
        },
        get isDisposed () {
            return isDisposed;
        },
        queries: preloadedQueries,
        rootModuleID: entryPoint.root.getModuleId()
    };
}
module.exports = loadEntryPoint;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/RelayEnvironmentProvider.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var ReactRelayContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContext.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var useMemo = React.useMemo;
function RelayEnvironmentProvider(props) {
    var children = props.children, environment = props.environment, getEnvironmentForActor = props.getEnvironmentForActor;
    var context = useMemo(function() {
        return {
            environment: environment,
            getEnvironmentForActor: getEnvironmentForActor
        };
    }, [
        environment,
        getEnvironmentForActor
    ]);
    return /*#__PURE__*/ React.createElement(ReactRelayContext.Provider, {
        value: context
    }, children);
}
module.exports = RelayEnvironmentProvider;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/HooksImplementation.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var implementation = null;
function inject(impl) {
    ("TURBOPACK compile-time truthy", 1) ? warning(implementation === null, 'Relay HooksImplementation was injected twice.') : ("TURBOPACK unreachable", undefined);
    implementation = impl;
}
function get() {
    return implementation;
}
module.exports = {
    inject: inject,
    get: get
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useUnsafeRef_DEPRECATED.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useMemo = _require.useMemo;
function useUnsafeRef_DEPRECATED(init) {
    return useMemo(function() {
        return {
            current: init
        };
    }, []);
}
module.exports = useUnsafeRef_DEPRECATED;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/LRUCache.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var LRUCache = /*#__PURE__*/ function() {
    function LRUCache(capacity) {
        this._capacity = capacity;
        !(this._capacity > 0) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'LRUCache: Unable to create instance of cache with zero or negative capacity.') : ("TURBOPACK unreachable", undefined) : void 0;
        this._map = new Map();
    }
    var _proto = LRUCache.prototype;
    _proto.set = function set(key, value) {
        this._map["delete"](key);
        this._map.set(key, value);
        if (this._map.size > this._capacity) {
            var firstKey = this._map.keys().next();
            if (!firstKey.done) {
                this._map["delete"](firstKey.value);
            }
        }
    };
    _proto.get = function get(key) {
        var value = this._map.get(key);
        if (value != null) {
            this._map["delete"](key);
            this._map.set(key, value);
        }
        return value;
    };
    _proto.has = function has(key) {
        return this._map.has(key);
    };
    _proto["delete"] = function _delete(key) {
        this._map["delete"](key);
    };
    _proto.size = function size() {
        return this._map.size;
    };
    _proto.capacity = function capacity() {
        return this._capacity - this._map.size;
    };
    _proto.clear = function clear() {
        this._map.clear();
    };
    return LRUCache;
}();
function create(capacity) {
    return new LRUCache(capacity);
}
module.exports = {
    create: create
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/SuspenseResource.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var TEMPORARY_RETAIN_DURATION_MS = 5 * 60 * 1000;
var SuspenseResource = /*#__PURE__*/ function() {
    function SuspenseResource(retain) {
        var _this = this;
        (0, _defineProperty2["default"])(this, "_retainCount", 0);
        (0, _defineProperty2["default"])(this, "_retainDisposable", null);
        (0, _defineProperty2["default"])(this, "_releaseTemporaryRetain", null);
        this._retain = function(environment) {
            _this._retainCount++;
            if (_this._retainCount === 1) {
                _this._retainDisposable = retain(environment);
            }
            return {
                dispose: function dispose() {
                    _this._retainCount = Math.max(0, _this._retainCount - 1);
                    if (_this._retainCount === 0) {
                        if (_this._retainDisposable != null) {
                            _this._retainDisposable.dispose();
                            _this._retainDisposable = null;
                        } else {
                            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Expected disposable to release query to be defined.' + "If you're seeing this, this is likely a bug in Relay.") : ("TURBOPACK unreachable", undefined);
                        }
                    }
                }
            };
        };
    }
    var _proto = SuspenseResource.prototype;
    _proto.temporaryRetain = function temporaryRetain(environment) {
        var _this2 = this;
        var _this$_releaseTempora;
        if (environment.isServer()) {
            return {
                dispose: function dispose() {}
            };
        }
        var retention = this._retain(environment);
        var releaseQueryTimeout = null;
        var releaseTemporaryRetain = function releaseTemporaryRetain() {
            clearTimeout(releaseQueryTimeout);
            releaseQueryTimeout = null;
            _this2._releaseTemporaryRetain = null;
            retention.dispose();
        };
        releaseQueryTimeout = setTimeout(releaseTemporaryRetain, TEMPORARY_RETAIN_DURATION_MS);
        (_this$_releaseTempora = this._releaseTemporaryRetain) === null || _this$_releaseTempora === void 0 ? void 0 : _this$_releaseTempora.call(this);
        this._releaseTemporaryRetain = releaseTemporaryRetain;
        return {
            dispose: function dispose() {
                var _this$_releaseTempora2;
                (_this$_releaseTempora2 = _this2._releaseTemporaryRetain) === null || _this$_releaseTempora2 === void 0 ? void 0 : _this$_releaseTempora2.call(_this2);
            }
        };
    };
    _proto.permanentRetain = function permanentRetain(environment) {
        var disposable = this._retain(environment);
        this.releaseTemporaryRetain();
        return disposable;
    };
    _proto.releaseTemporaryRetain = function releaseTemporaryRetain() {
        var _this$_releaseTempora3;
        (_this$_releaseTempora3 = this._releaseTemporaryRetain) === null || _this$_releaseTempora3 === void 0 ? void 0 : _this$_releaseTempora3.call(this);
        this._releaseTemporaryRetain = null;
    };
    _proto.getRetainCount = function getRetainCount() {
        return this._retainCount;
    };
    return SuspenseResource;
}();
module.exports = SuspenseResource;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/QueryResource.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var LRUCache = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/LRUCache.js [app-ssr] (ecmascript)");
var SuspenseResource = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/SuspenseResource.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), isPromise = _require.isPromise;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
var CACHE_CAPACITY = 1000;
var DEFAULT_FETCH_POLICY = 'store-or-network';
var DEFAULT_LIVE_FETCH_POLICY = 'store-and-network';
var WEAKMAP_SUPPORTED = typeof WeakMap === 'function';
function operationIsLiveQuery(operation) {
    return operation.request.node.params.metadata.live !== undefined;
}
function getQueryCacheIdentifier(environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker) {
    var fetchPolicy = maybeFetchPolicy !== null && maybeFetchPolicy !== void 0 ? maybeFetchPolicy : operationIsLiveQuery(operation) ? DEFAULT_LIVE_FETCH_POLICY : DEFAULT_FETCH_POLICY;
    var renderPolicy = maybeRenderPolicy !== null && maybeRenderPolicy !== void 0 ? maybeRenderPolicy : environment.UNSTABLE_getDefaultRenderPolicy();
    var cacheIdentifier = "".concat(fetchPolicy, "-").concat(renderPolicy, "-").concat(operation.request.identifier);
    if (cacheBreaker != null) {
        return "".concat(cacheIdentifier, "-").concat(cacheBreaker);
    }
    return cacheIdentifier;
}
function getQueryResult(operation, cacheIdentifier) {
    var rootFragmentRef = {
        __id: operation.fragment.dataID,
        __fragments: (0, _defineProperty2["default"])({}, operation.fragment.node.name, operation.request.variables),
        __fragmentOwner: operation.request
    };
    return {
        cacheIdentifier: cacheIdentifier,
        fragmentNode: operation.request.node.fragment,
        fragmentRef: rootFragmentRef,
        operation: operation
    };
}
var nextID = 200000;
function createCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription, onDispose) {
    var isLiveQuery = operationIsLiveQuery(operation);
    var currentValue = value;
    var currentNetworkSubscription = networkSubscription;
    var suspenseResource = new SuspenseResource(function(environment) {
        var retention = environment.retain(operation);
        return {
            dispose: function dispose() {
                if (isLiveQuery && currentNetworkSubscription != null) {
                    currentNetworkSubscription.unsubscribe();
                }
                retention.dispose();
                onDispose(cacheEntry);
            }
        };
    });
    var cacheEntry = {
        cacheIdentifier: cacheIdentifier,
        id: nextID++,
        processedPayloadsCount: 0,
        operationAvailability: operationAvailability,
        getValue: function getValue() {
            return currentValue;
        },
        setValue: function setValue(val) {
            currentValue = val;
        },
        setNetworkSubscription: function setNetworkSubscription(subscription) {
            if (isLiveQuery && currentNetworkSubscription != null) {
                currentNetworkSubscription.unsubscribe();
            }
            currentNetworkSubscription = subscription;
        },
        temporaryRetain: function temporaryRetain(environment) {
            return suspenseResource.temporaryRetain(environment);
        },
        permanentRetain: function permanentRetain(environment) {
            return suspenseResource.permanentRetain(environment);
        },
        releaseTemporaryRetain: function releaseTemporaryRetain() {
            suspenseResource.releaseTemporaryRetain();
        }
    };
    return cacheEntry;
}
var QueryResourceImpl = /*#__PURE__*/ function() {
    function QueryResourceImpl(environment) {
        var _this = this;
        (0, _defineProperty2["default"])(this, "_clearCacheEntry", function(cacheEntry) {
            _this._cache["delete"](cacheEntry.cacheIdentifier);
        });
        this._environment = environment;
        this._cache = LRUCache.create(CACHE_CAPACITY);
    }
    var _proto = QueryResourceImpl.prototype;
    _proto.prepare = function prepare(operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, cacheBreaker, profilerContext) {
        var cacheIdentifier = getQueryCacheIdentifier(this._environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker);
        return this.prepareWithIdentifier(cacheIdentifier, operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, profilerContext);
    };
    _proto.prepareWithIdentifier = function prepareWithIdentifier(cacheIdentifier, operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, profilerContext) {
        var environment = this._environment;
        var fetchPolicy = maybeFetchPolicy !== null && maybeFetchPolicy !== void 0 ? maybeFetchPolicy : operationIsLiveQuery(operation) ? DEFAULT_LIVE_FETCH_POLICY : DEFAULT_FETCH_POLICY;
        var renderPolicy = maybeRenderPolicy !== null && maybeRenderPolicy !== void 0 ? maybeRenderPolicy : environment.UNSTABLE_getDefaultRenderPolicy();
        var cacheEntry = this._cache.get(cacheIdentifier);
        var temporaryRetainDisposable = null;
        var entryWasCached = cacheEntry != null;
        if (cacheEntry == null) {
            cacheEntry = this._fetchAndSaveQuery(cacheIdentifier, operation, fetchObservable, fetchPolicy, renderPolicy, profilerContext, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, observer), {}, {
                unsubscribe: function unsubscribe(subscription) {
                    if (temporaryRetainDisposable != null) {
                        temporaryRetainDisposable.dispose();
                    }
                    var observerUnsubscribe = observer === null || observer === void 0 ? void 0 : observer.unsubscribe;
                    observerUnsubscribe && observerUnsubscribe(subscription);
                }
            }));
        }
        temporaryRetainDisposable = cacheEntry.temporaryRetain(environment);
        var cachedValue = cacheEntry.getValue();
        if (isPromise(cachedValue)) {
            environment.__log({
                name: 'suspense.query',
                fetchPolicy: fetchPolicy,
                isPromiseCached: entryWasCached,
                operation: operation,
                queryAvailability: cacheEntry.operationAvailability,
                renderPolicy: renderPolicy
            });
            throw cachedValue;
        }
        if (cachedValue instanceof Error) {
            throw cachedValue;
        }
        return cachedValue;
    };
    _proto.retain = function retain(queryResult, profilerContext) {
        var environment = this._environment;
        var cacheIdentifier = queryResult.cacheIdentifier, operation = queryResult.operation;
        var cacheEntry = this._getOrCreateCacheEntry(cacheIdentifier, operation, null, queryResult, null);
        var disposable = cacheEntry.permanentRetain(environment);
        environment.__log({
            name: 'queryresource.retain',
            profilerContext: profilerContext,
            resourceID: cacheEntry.id
        });
        return {
            dispose: function dispose() {
                disposable.dispose();
            }
        };
    };
    _proto.releaseTemporaryRetain = function releaseTemporaryRetain(queryResult) {
        var cacheEntry = this._cache.get(queryResult.cacheIdentifier);
        if (cacheEntry != null) {
            cacheEntry.releaseTemporaryRetain();
        }
    };
    _proto.TESTS_ONLY__getCacheEntry = function TESTS_ONLY__getCacheEntry(operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker) {
        var environment = this._environment;
        var cacheIdentifier = getQueryCacheIdentifier(environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker);
        return this._cache.get(cacheIdentifier);
    };
    _proto._getOrCreateCacheEntry = function _getOrCreateCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription) {
        var cacheEntry = this._cache.get(cacheIdentifier);
        if (cacheEntry == null) {
            cacheEntry = createCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription, this._clearCacheEntry);
            this._cache.set(cacheIdentifier, cacheEntry);
        }
        return cacheEntry;
    };
    _proto._fetchAndSaveQuery = function _fetchAndSaveQuery(cacheIdentifier, operation, fetchObservable, fetchPolicy, renderPolicy, profilerContext, observer) {
        var _this2 = this;
        var environment = this._environment;
        var queryAvailability = environment.check(operation);
        var queryStatus = queryAvailability.status;
        var hasFullQuery = queryStatus === 'available';
        var canPartialRender = hasFullQuery || renderPolicy === 'partial' && queryStatus !== 'stale';
        var shouldFetch;
        var shouldAllowRender;
        var resolveNetworkPromise = function resolveNetworkPromise() {};
        switch(fetchPolicy){
            case 'store-only':
                {
                    shouldFetch = false;
                    shouldAllowRender = true;
                    break;
                }
            case 'store-or-network':
                {
                    shouldFetch = !hasFullQuery;
                    shouldAllowRender = canPartialRender;
                    break;
                }
            case 'store-and-network':
                {
                    shouldFetch = true;
                    shouldAllowRender = canPartialRender;
                    break;
                }
            case 'network-only':
            default:
                {
                    shouldFetch = true;
                    shouldAllowRender = false;
                    break;
                }
        }
        if (shouldAllowRender) {
            var queryResult = getQueryResult(operation, cacheIdentifier);
            var _cacheEntry = createCacheEntry(cacheIdentifier, operation, queryAvailability, queryResult, null, this._clearCacheEntry);
            this._cache.set(cacheIdentifier, _cacheEntry);
        }
        if (shouldFetch) {
            var _queryResult = getQueryResult(operation, cacheIdentifier);
            var networkSubscription;
            fetchObservable.subscribe({
                start: function start(subscription) {
                    networkSubscription = subscription;
                    var cacheEntry = _this2._cache.get(cacheIdentifier);
                    if (cacheEntry) {
                        cacheEntry.setNetworkSubscription(networkSubscription);
                    }
                    var observerStart = observer === null || observer === void 0 ? void 0 : observer.start;
                    if (observerStart) {
                        var subscriptionWithConditionalCancelation = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, subscription), {}, {
                            unsubscribe: function unsubscribe() {
                                if (operationIsLiveQuery(operation)) {
                                    subscription.unsubscribe();
                                }
                            }
                        });
                        observerStart(subscriptionWithConditionalCancelation);
                    }
                },
                next: function next() {
                    var cacheEntry = _this2._getOrCreateCacheEntry(cacheIdentifier, operation, queryAvailability, _queryResult, networkSubscription);
                    cacheEntry.processedPayloadsCount += 1;
                    cacheEntry.setValue(_queryResult);
                    resolveNetworkPromise();
                    var observerNext = observer === null || observer === void 0 ? void 0 : observer.next;
                    if (observerNext != null) {
                        var snapshot = environment.lookup(operation.fragment);
                        observerNext(snapshot);
                    }
                },
                error: function error(_error) {
                    var cacheEntry = _this2._getOrCreateCacheEntry(cacheIdentifier, operation, queryAvailability, _error, networkSubscription);
                    if (cacheEntry.processedPayloadsCount === 0) {
                        cacheEntry.setValue(_error);
                    } else {
                        ("TURBOPACK compile-time truthy", 1) ? warning(false, 'QueryResource: An incremental payload for query `%s` returned an error: `%s`.', operation.fragment.node.name, String(_error.message)) : ("TURBOPACK unreachable", undefined);
                    }
                    resolveNetworkPromise();
                    networkSubscription = null;
                    cacheEntry.setNetworkSubscription(null);
                    var observerError = observer === null || observer === void 0 ? void 0 : observer.error;
                    observerError && observerError(_error);
                },
                complete: function complete() {
                    resolveNetworkPromise();
                    networkSubscription = null;
                    var cacheEntry = _this2._cache.get(cacheIdentifier);
                    if (cacheEntry) {
                        cacheEntry.setNetworkSubscription(null);
                    }
                    var observerComplete = observer === null || observer === void 0 ? void 0 : observer.complete;
                    observerComplete && observerComplete();
                },
                unsubscribe: observer === null || observer === void 0 ? void 0 : observer.unsubscribe
            });
            var _cacheEntry2 = this._cache.get(cacheIdentifier);
            if (!_cacheEntry2) {
                var networkPromise = new Promise(function(resolve) {
                    resolveNetworkPromise = resolve;
                });
                networkPromise.displayName = 'Relay(' + operation.fragment.node.name + ')';
                _cacheEntry2 = createCacheEntry(cacheIdentifier, operation, queryAvailability, networkPromise, networkSubscription, this._clearCacheEntry);
                this._cache.set(cacheIdentifier, _cacheEntry2);
            }
        } else {
            var observerComplete = observer === null || observer === void 0 ? void 0 : observer.complete;
            observerComplete && observerComplete();
        }
        var cacheEntry = this._cache.get(cacheIdentifier);
        !(cacheEntry != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected to have cached a result when attempting to fetch query.' + "If you're seeing this, this is likely a bug in Relay.") : ("TURBOPACK unreachable", undefined) : void 0;
        environment.__log({
            name: 'queryresource.fetch',
            resourceID: cacheEntry.id,
            operation: operation,
            profilerContext: profilerContext,
            fetchPolicy: fetchPolicy,
            renderPolicy: renderPolicy,
            queryAvailability: queryAvailability,
            shouldFetch: shouldFetch
        });
        return cacheEntry;
    };
    return QueryResourceImpl;
}();
function createQueryResource(environment) {
    return new QueryResourceImpl(environment);
}
var dataResources = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();
function getQueryResourceForEnvironment(environment) {
    var cached = dataResources.get(environment);
    if (cached) {
        return cached;
    }
    var newDataResource = createQueryResource(environment);
    dataResources.set(environment, newDataResource);
    return newDataResource;
}
module.exports = {
    createQueryResource: createQueryResource,
    getQueryResourceForEnvironment: getQueryResourceForEnvironment,
    getQueryCacheIdentifier: getQueryCacheIdentifier
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/legacy/FragmentResource.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var _defineProperty2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/defineProperty.js [app-ssr] (ecmascript)"));
var _toConsumableArray2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/toConsumableArray.js [app-ssr] (ecmascript)"));
var LRUCache = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/LRUCache.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/QueryResource.js [app-ssr] (ecmascript)"), getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;
var SuspenseResource = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/SuspenseResource.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), _require2$__internal = _require2.__internal, fetchQuery = _require2$__internal.fetchQuery, getPromiseForActiveRequest = _require2$__internal.getPromiseForActiveRequest, RelayFeatureFlags = _require2.RelayFeatureFlags, createOperationDescriptor = _require2.createOperationDescriptor, getFragmentIdentifier = _require2.getFragmentIdentifier, getPendingOperationsForFragment = _require2.getPendingOperationsForFragment, getSelector = _require2.getSelector, getVariablesFromFragment = _require2.getVariablesFromFragment, handlePotentialSnapshotErrors = _require2.handlePotentialSnapshotErrors, isPromise = _require2.isPromise, recycleNodesInto = _require2.recycleNodesInto;
var WEAKMAP_SUPPORTED = typeof WeakMap === 'function';
var CACHE_CAPACITY = 1000000;
var CONSTANT_READONLY_EMPTY_ARRAY = Object.freeze([]);
function isMissingData(snapshot) {
    if (Array.isArray(snapshot)) {
        return snapshot.some(function(s) {
            return s.isMissingData;
        });
    }
    return snapshot.isMissingData;
}
function hasMissingClientEdges(snapshot) {
    var _snapshot$missingClie, _snapshot$missingClie2;
    if (Array.isArray(snapshot)) {
        return snapshot.some(function(s) {
            var _s$missingClientEdges, _s$missingClientEdges2;
            return ((_s$missingClientEdges = (_s$missingClientEdges2 = s.missingClientEdges) === null || _s$missingClientEdges2 === void 0 ? void 0 : _s$missingClientEdges2.length) !== null && _s$missingClientEdges !== void 0 ? _s$missingClientEdges : 0) > 0;
        });
    }
    return ((_snapshot$missingClie = (_snapshot$missingClie2 = snapshot.missingClientEdges) === null || _snapshot$missingClie2 === void 0 ? void 0 : _snapshot$missingClie2.length) !== null && _snapshot$missingClie !== void 0 ? _snapshot$missingClie : 0) > 0;
}
function missingLiveResolverFields(snapshot) {
    if (Array.isArray(snapshot)) {
        return snapshot.map(function(s) {
            return s.missingLiveResolverFields;
        }).filter(Boolean).flat();
    }
    return snapshot.missingLiveResolverFields;
}
function singularOrPluralForEach(snapshot, f) {
    if (Array.isArray(snapshot)) {
        snapshot.forEach(f);
    } else {
        f(snapshot);
    }
}
function getFragmentResult(cacheKey, snapshot, storeEpoch) {
    if (Array.isArray(snapshot)) {
        return {
            cacheKey: cacheKey,
            snapshot: snapshot,
            data: snapshot.map(function(s) {
                return s.data;
            }),
            isMissingData: isMissingData(snapshot),
            storeEpoch: storeEpoch
        };
    }
    return {
        cacheKey: cacheKey,
        snapshot: snapshot,
        data: snapshot.data,
        isMissingData: isMissingData(snapshot),
        storeEpoch: storeEpoch
    };
}
var ClientEdgeQueryResultsCache = /*#__PURE__*/ function() {
    function ClientEdgeQueryResultsCache(environment) {
        (0, _defineProperty2["default"])(this, "_cache", new Map());
        (0, _defineProperty2["default"])(this, "_retainCounts", new Map());
        this._environment = environment;
    }
    var _proto = ClientEdgeQueryResultsCache.prototype;
    _proto.get = function get(fragmentIdentifier) {
        var _this$_cache$get$, _this$_cache$get;
        return (_this$_cache$get$ = (_this$_cache$get = this._cache.get(fragmentIdentifier)) === null || _this$_cache$get === void 0 ? void 0 : _this$_cache$get[0]) !== null && _this$_cache$get$ !== void 0 ? _this$_cache$get$ : undefined;
    };
    _proto.recordQueryResults = function recordQueryResults(fragmentIdentifier, value) {
        var _this = this;
        var existing = this._cache.get(fragmentIdentifier);
        if (!existing) {
            var suspenseResource = new SuspenseResource(function() {
                return _this._retain(fragmentIdentifier);
            });
            this._cache.set(fragmentIdentifier, [
                value,
                suspenseResource
            ]);
            suspenseResource.temporaryRetain(this._environment);
        } else {
            var existingResults = existing[0], _suspenseResource = existing[1];
            value.forEach(function(queryResult) {
                existingResults.push(queryResult);
            });
            _suspenseResource.temporaryRetain(this._environment);
        }
    };
    _proto._retain = function _retain(id) {
        var _this2 = this;
        var _this$_retainCounts$g;
        var retainCount = ((_this$_retainCounts$g = this._retainCounts.get(id)) !== null && _this$_retainCounts$g !== void 0 ? _this$_retainCounts$g : 0) + 1;
        this._retainCounts.set(id, retainCount);
        return {
            dispose: function dispose() {
                var _this$_retainCounts$g2;
                var newRetainCount = ((_this$_retainCounts$g2 = _this2._retainCounts.get(id)) !== null && _this$_retainCounts$g2 !== void 0 ? _this$_retainCounts$g2 : 0) - 1;
                if (newRetainCount > 0) {
                    _this2._retainCounts.set(id, newRetainCount);
                } else {
                    _this2._retainCounts["delete"](id);
                    _this2._cache["delete"](id);
                }
            }
        };
    };
    return ClientEdgeQueryResultsCache;
}();
var FragmentResourceImpl = /*#__PURE__*/ function() {
    function FragmentResourceImpl(environment) {
        this._environment = environment;
        this._cache = LRUCache.create(CACHE_CAPACITY);
        if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
            this._clientEdgeQueryResultsCache = new ClientEdgeQueryResultsCache(environment);
        }
    }
    var _proto2 = FragmentResourceImpl.prototype;
    _proto2.read = function read(fragmentNode, fragmentRef, componentDisplayName, fragmentKey) {
        return this.readWithIdentifier(fragmentNode, fragmentRef, getFragmentIdentifier(fragmentNode, fragmentRef), componentDisplayName, fragmentKey);
    };
    _proto2.readWithIdentifier = function readWithIdentifier(fragmentNode, fragmentRef, fragmentIdentifier, componentDisplayName, fragmentKey) {
        var _this3 = this;
        var _fragmentNode$metadat, _fragmentNode$metadat2, _missingLiveResolverF2, _missingLiveResolverF3;
        var environment = this._environment;
        if (fragmentRef == null) {
            return {
                cacheKey: fragmentIdentifier,
                data: null,
                isMissingData: false,
                snapshot: null,
                storeEpoch: 0
            };
        }
        var storeEpoch = environment.getStore().getEpoch();
        if ((fragmentNode === null || fragmentNode === void 0 ? void 0 : (_fragmentNode$metadat = fragmentNode.metadata) === null || _fragmentNode$metadat === void 0 ? void 0 : _fragmentNode$metadat.plural) === true) {
            !Array.isArray(fragmentRef) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected fragment pointer%s for fragment `%s` to be ' + 'an array, instead got `%s`. Remove `@relay(plural: true)` ' + 'from fragment `%s` to allow the prop to be an object.', fragmentKey != null ? " for key `".concat(fragmentKey, "`") : '', fragmentNode.name, typeof fragmentRef, fragmentNode.name) : ("TURBOPACK unreachable", undefined) : void 0;
            if (fragmentRef.length === 0) {
                return {
                    cacheKey: fragmentIdentifier,
                    data: CONSTANT_READONLY_EMPTY_ARRAY,
                    isMissingData: false,
                    snapshot: CONSTANT_READONLY_EMPTY_ARRAY,
                    storeEpoch: storeEpoch
                };
            }
        }
        var cachedValue = this._cache.get(fragmentIdentifier);
        if (cachedValue != null) {
            var _missingLiveResolverF;
            if (cachedValue.kind === 'pending' && isPromise(cachedValue.promise)) {
                environment.__log({
                    name: 'suspense.fragment',
                    data: cachedValue.result.data,
                    fragment: fragmentNode,
                    isRelayHooks: true,
                    isMissingData: cachedValue.result.isMissingData,
                    isPromiseCached: true,
                    pendingOperations: cachedValue.pendingOperations
                });
                throw cachedValue.promise;
            }
            if (cachedValue.kind === 'done' && cachedValue.result.snapshot && !((_missingLiveResolverF = missingLiveResolverFields(cachedValue.result.snapshot)) !== null && _missingLiveResolverF !== void 0 && _missingLiveResolverF.length)) {
                this._throwOrLogErrorsInSnapshot(cachedValue.result.snapshot);
                if (cachedValue.result.isMissingData) {
                    environment.__log({
                        name: 'fragmentresource.missing_data',
                        data: cachedValue.result.data,
                        fragment: fragmentNode,
                        isRelayHooks: true,
                        cached: true
                    });
                }
                return cachedValue.result;
            }
        }
        var fragmentSelector = getSelector(fragmentNode, fragmentRef);
        !(fragmentSelector != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected to receive an object where `...%s` was spread, ' + 'but the fragment reference was not found`. This is most ' + 'likely the result of:\n' + "- Forgetting to spread `%s` in `%s`'s parent's fragment.\n" + '- Conditionally fetching `%s` but unconditionally passing %s prop ' + 'to `%s`. If the parent fragment only fetches the fragment conditionally ' + '- with e.g. `@include`, `@skip`, or inside a `... on SomeType { }` ' + 'spread  - then the fragment reference will not exist. ' + 'In this case, pass `null` if the conditions for evaluating the ' + 'fragment are not met (e.g. if the `@include(if)` value is false.)', fragmentNode.name, fragmentNode.name, componentDisplayName, fragmentNode.name, fragmentKey == null ? 'a fragment reference' : "the `".concat(fragmentKey, "`"), componentDisplayName) : ("TURBOPACK unreachable", undefined) : void 0;
        var fragmentResult = null;
        var snapshot = null;
        if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && cachedValue != null && cachedValue.kind === 'missing') {
            fragmentResult = cachedValue.result;
            snapshot = cachedValue.snapshot;
        } else {
            snapshot = fragmentSelector.kind === 'PluralReaderSelector' ? fragmentSelector.selectors.map(function(s) {
                return environment.lookup(s);
            }) : environment.lookup(fragmentSelector);
            fragmentResult = getFragmentResult(fragmentIdentifier, snapshot, storeEpoch);
        }
        if (!fragmentResult.isMissingData) {
            this._throwOrLogErrorsInSnapshot(snapshot);
            this._cache.set(fragmentIdentifier, {
                kind: 'done',
                result: fragmentResult
            });
            return fragmentResult;
        }
        var clientEdgeRequests = null;
        if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && ((_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === void 0 ? void 0 : _fragmentNode$metadat2.hasClientEdges) === true && hasMissingClientEdges(snapshot)) {
            clientEdgeRequests = [];
            var queryResource = getQueryResourceForEnvironment(this._environment);
            var queryResults = [];
            singularOrPluralForEach(snapshot, function(snap) {
                var _snap$missingClientEd;
                (_snap$missingClientEd = snap.missingClientEdges) === null || _snap$missingClientEd === void 0 ? void 0 : _snap$missingClientEd.forEach(function(_ref) {
                    var _clientEdgeRequests;
                    var request = _ref.request, clientEdgeDestinationID = _ref.clientEdgeDestinationID;
                    var _this3$_performClient = _this3._performClientEdgeQuery(queryResource, fragmentNode, fragmentRef, request, clientEdgeDestinationID), queryResult = _this3$_performClient.queryResult, requestDescriptor = _this3$_performClient.requestDescriptor;
                    queryResults.push(queryResult);
                    (_clientEdgeRequests = clientEdgeRequests) === null || _clientEdgeRequests === void 0 ? void 0 : _clientEdgeRequests.push(requestDescriptor);
                });
            });
            !(this._clientEdgeQueryResultsCache != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Client edge query result cache should exist when ENABLE_CLIENT_EDGES is on.') : ("TURBOPACK unreachable", undefined) : void 0;
            this._clientEdgeQueryResultsCache.recordQueryResults(fragmentIdentifier, queryResults);
        }
        var clientEdgePromises = [];
        if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && clientEdgeRequests) {
            clientEdgePromises = clientEdgeRequests.map(function(request) {
                return getPromiseForActiveRequest(_this3._environment, request);
            }).filter(Boolean);
        }
        var fragmentOwner = fragmentSelector.kind === 'PluralReaderSelector' ? fragmentSelector.selectors[0].owner : fragmentSelector.owner;
        var parentQueryPromiseResult = this._getAndSavePromiseForFragmentRequestInFlight(fragmentIdentifier, fragmentNode, fragmentOwner, fragmentResult);
        var parentQueryPromiseResultPromise = parentQueryPromiseResult === null || parentQueryPromiseResult === void 0 ? void 0 : parentQueryPromiseResult.promise;
        var missingResolverFieldPromises = (_missingLiveResolverF2 = (_missingLiveResolverF3 = missingLiveResolverFields(snapshot)) === null || _missingLiveResolverF3 === void 0 ? void 0 : _missingLiveResolverF3.map(function(_ref2) {
            var liveStateID = _ref2.liveStateID;
            var store = environment.getStore();
            return store.getLiveResolverPromise(liveStateID);
        })) !== null && _missingLiveResolverF2 !== void 0 ? _missingLiveResolverF2 : [];
        if (clientEdgePromises.length || missingResolverFieldPromises.length || isPromise(parentQueryPromiseResultPromise)) {
            var _parentQueryPromiseRe, _clientEdgeRequests2;
            environment.__log({
                name: 'suspense.fragment',
                data: fragmentResult.data,
                fragment: fragmentNode,
                isRelayHooks: true,
                isPromiseCached: false,
                isMissingData: fragmentResult.isMissingData,
                pendingOperations: [].concat((0, _toConsumableArray2["default"])((_parentQueryPromiseRe = parentQueryPromiseResult === null || parentQueryPromiseResult === void 0 ? void 0 : parentQueryPromiseResult.pendingOperations) !== null && _parentQueryPromiseRe !== void 0 ? _parentQueryPromiseRe : []), (0, _toConsumableArray2["default"])((_clientEdgeRequests2 = clientEdgeRequests) !== null && _clientEdgeRequests2 !== void 0 ? _clientEdgeRequests2 : []))
            });
            var promises = [];
            if (clientEdgePromises.length > 0) {
                promises = promises.concat(clientEdgePromises);
            }
            if (missingResolverFieldPromises.length > 0) {
                promises = promises.concat(missingResolverFieldPromises);
            }
            if (promises.length > 0) {
                if (parentQueryPromiseResultPromise) {
                    promises.push(parentQueryPromiseResultPromise);
                }
                throw Promise.all(promises);
            }
            if (parentQueryPromiseResultPromise) {
                throw parentQueryPromiseResultPromise;
            }
        }
        if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && fragmentResult.isMissingData) {
            this._cache.set(fragmentIdentifier, {
                kind: 'done',
                result: fragmentResult
            });
        }
        this._throwOrLogErrorsInSnapshot(snapshot);
        environment.__log({
            name: 'fragmentresource.missing_data',
            data: fragmentResult.data,
            fragment: fragmentNode,
            isRelayHooks: true,
            cached: false
        });
        return getFragmentResult(fragmentIdentifier, snapshot, storeEpoch);
    };
    _proto2._performClientEdgeQuery = function _performClientEdgeQuery(queryResource, fragmentNode, fragmentRef, request, clientEdgeDestinationID) {
        var originalVariables = getVariablesFromFragment(fragmentNode, fragmentRef);
        var variables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, originalVariables), {}, {
            id: clientEdgeDestinationID
        });
        var operation = createOperationDescriptor(request, variables, {});
        var fetchObservable = fetchQuery(this._environment, operation);
        var queryResult = queryResource.prepare(operation, fetchObservable);
        return {
            requestDescriptor: operation.request,
            queryResult: queryResult
        };
    };
    _proto2._throwOrLogErrorsInSnapshot = function _throwOrLogErrorsInSnapshot(snapshot) {
        var _this4 = this;
        if (Array.isArray(snapshot)) {
            snapshot.forEach(function(s) {
                handlePotentialSnapshotErrors(_this4._environment, s.missingRequiredFields, s.relayResolverErrors, s.errorResponseFields);
            });
        } else {
            handlePotentialSnapshotErrors(this._environment, snapshot.missingRequiredFields, snapshot.relayResolverErrors, snapshot.errorResponseFields);
        }
    };
    _proto2.readSpec = function readSpec(fragmentNodes, fragmentRefs, componentDisplayName) {
        var result = {};
        for(var key in fragmentNodes){
            result[key] = this.read(fragmentNodes[key], fragmentRefs[key], componentDisplayName, key);
        }
        return result;
    };
    _proto2.subscribe = function subscribe(fragmentResult, callback) {
        var _this5 = this;
        var environment = this._environment;
        var cacheKey = fragmentResult.cacheKey;
        var renderedSnapshot = fragmentResult.snapshot;
        if (!renderedSnapshot) {
            return {
                dispose: function dispose() {}
            };
        }
        var _this$checkMissedUpda = this.checkMissedUpdates(fragmentResult), didMissUpdates = _this$checkMissedUpda[0], currentSnapshot = _this$checkMissedUpda[1];
        if (didMissUpdates) {
            callback();
        }
        var disposables = [];
        if (Array.isArray(renderedSnapshot)) {
            !Array.isArray(currentSnapshot) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected snapshots to be plural. ' + "If you're seeing this, this is likely a bug in Relay.") : ("TURBOPACK unreachable", undefined) : void 0;
            currentSnapshot.forEach(function(snapshot, idx) {
                disposables.push(environment.subscribe(snapshot, function(latestSnapshot) {
                    var storeEpoch = environment.getStore().getEpoch();
                    _this5._updatePluralSnapshot(cacheKey, currentSnapshot, latestSnapshot, idx, storeEpoch);
                    callback();
                }));
            });
        } else {
            !(currentSnapshot != null && !Array.isArray(currentSnapshot)) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected snapshot to be singular. ' + "If you're seeing this, this is likely a bug in Relay.") : ("TURBOPACK unreachable", undefined) : void 0;
            disposables.push(environment.subscribe(currentSnapshot, function(latestSnapshot) {
                var storeEpoch = environment.getStore().getEpoch();
                var result = getFragmentResult(cacheKey, latestSnapshot, storeEpoch);
                if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && result.isMissingData) {
                    _this5._cache.set(cacheKey, {
                        kind: 'missing',
                        result: result,
                        snapshot: latestSnapshot
                    });
                } else {
                    _this5._cache.set(cacheKey, {
                        kind: 'done',
                        result: getFragmentResult(cacheKey, latestSnapshot, storeEpoch)
                    });
                }
                callback();
            }));
        }
        if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
            var _this$_clientEdgeQuer, _this$_clientEdgeQuer2;
            var clientEdgeQueryResults = (_this$_clientEdgeQuer = (_this$_clientEdgeQuer2 = this._clientEdgeQueryResultsCache) === null || _this$_clientEdgeQuer2 === void 0 ? void 0 : _this$_clientEdgeQuer2.get(cacheKey)) !== null && _this$_clientEdgeQuer !== void 0 ? _this$_clientEdgeQuer : undefined;
            if (clientEdgeQueryResults !== null && clientEdgeQueryResults !== void 0 && clientEdgeQueryResults.length) {
                var queryResource = getQueryResourceForEnvironment(this._environment);
                clientEdgeQueryResults.forEach(function(queryResult) {
                    disposables.push(queryResource.retain(queryResult));
                });
            }
        }
        return {
            dispose: function dispose() {
                disposables.forEach(function(s) {
                    return s.dispose();
                });
                _this5._cache["delete"](cacheKey);
            }
        };
    };
    _proto2.subscribeSpec = function subscribeSpec(fragmentResults, callback) {
        var _this6 = this;
        var disposables = Object.keys(fragmentResults).map(function(key) {
            return _this6.subscribe(fragmentResults[key], callback);
        });
        return {
            dispose: function dispose() {
                disposables.forEach(function(disposable) {
                    disposable.dispose();
                });
            }
        };
    };
    _proto2.checkMissedUpdates = function checkMissedUpdates(fragmentResult) {
        var environment = this._environment;
        var renderedSnapshot = fragmentResult.snapshot;
        if (!renderedSnapshot) {
            return [
                false,
                null
            ];
        }
        var storeEpoch = null;
        storeEpoch = environment.getStore().getEpoch();
        if (fragmentResult.storeEpoch === storeEpoch) {
            return [
                false,
                fragmentResult.snapshot
            ];
        }
        var cacheKey = fragmentResult.cacheKey;
        if (Array.isArray(renderedSnapshot)) {
            var didMissUpdates = false;
            var currentSnapshots = [];
            renderedSnapshot.forEach(function(snapshot, idx) {
                var currentSnapshot = environment.lookup(snapshot.selector);
                var renderData = snapshot.data;
                var currentData = currentSnapshot.data;
                var updatedData = recycleNodesInto(renderData, currentData);
                if (updatedData !== renderData) {
                    currentSnapshot = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, currentSnapshot), {}, {
                        data: updatedData
                    });
                    didMissUpdates = true;
                }
                currentSnapshots[idx] = currentSnapshot;
            });
            if (didMissUpdates) {
                var result = getFragmentResult(cacheKey, currentSnapshots, storeEpoch);
                if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && result.isMissingData) {
                    this._cache.set(cacheKey, {
                        kind: 'missing',
                        result: result,
                        snapshot: currentSnapshots
                    });
                } else {
                    this._cache.set(cacheKey, {
                        kind: 'done',
                        result: result
                    });
                }
            }
            return [
                didMissUpdates,
                currentSnapshots
            ];
        }
        var currentSnapshot = environment.lookup(renderedSnapshot.selector);
        var renderData = renderedSnapshot.data;
        var currentData = currentSnapshot.data;
        var updatedData = recycleNodesInto(renderData, currentData);
        var updatedCurrentSnapshot = {
            data: updatedData,
            isMissingData: currentSnapshot.isMissingData,
            missingClientEdges: currentSnapshot.missingClientEdges,
            missingLiveResolverFields: currentSnapshot.missingLiveResolverFields,
            seenRecords: currentSnapshot.seenRecords,
            selector: currentSnapshot.selector,
            missingRequiredFields: currentSnapshot.missingRequiredFields,
            relayResolverErrors: currentSnapshot.relayResolverErrors,
            errorResponseFields: currentSnapshot.errorResponseFields
        };
        if (updatedData !== renderData) {
            var _result = getFragmentResult(cacheKey, updatedCurrentSnapshot, storeEpoch);
            if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && _result.isMissingData) {
                this._cache.set(cacheKey, {
                    kind: 'missing',
                    result: _result,
                    snapshot: updatedCurrentSnapshot
                });
            } else {
                this._cache.set(cacheKey, {
                    kind: 'done',
                    result: _result
                });
            }
        }
        return [
            updatedData !== renderData,
            updatedCurrentSnapshot
        ];
    };
    _proto2.checkMissedUpdatesSpec = function checkMissedUpdatesSpec(fragmentResults) {
        var _this7 = this;
        return Object.keys(fragmentResults).some(function(key) {
            return _this7.checkMissedUpdates(fragmentResults[key])[0];
        });
    };
    _proto2._getAndSavePromiseForFragmentRequestInFlight = function _getAndSavePromiseForFragmentRequestInFlight(cacheKey, fragmentNode, fragmentOwner, fragmentResult) {
        var _this8 = this;
        var pendingOperationsResult = getPendingOperationsForFragment(this._environment, fragmentNode, fragmentOwner);
        if (pendingOperationsResult == null) {
            return null;
        }
        var networkPromise = pendingOperationsResult.promise;
        var pendingOperations = pendingOperationsResult.pendingOperations;
        var promise = networkPromise.then(function() {
            _this8._cache["delete"](cacheKey);
        })["catch"](function(error) {
            _this8._cache["delete"](cacheKey);
        });
        promise.displayName = networkPromise.displayName;
        this._cache.set(cacheKey, {
            kind: 'pending',
            pendingOperations: pendingOperations,
            promise: promise,
            result: fragmentResult
        });
        return {
            promise: promise,
            pendingOperations: pendingOperations
        };
    };
    _proto2._updatePluralSnapshot = function _updatePluralSnapshot(cacheKey, baseSnapshots, latestSnapshot, idx, storeEpoch) {
        var _currentFragmentResul;
        var currentFragmentResult = this._cache.get(cacheKey);
        if (isPromise(currentFragmentResult)) {
            reportInvalidCachedData(latestSnapshot.selector.node.name);
            return;
        }
        var currentSnapshot = currentFragmentResult === null || currentFragmentResult === void 0 ? void 0 : (_currentFragmentResul = currentFragmentResult.result) === null || _currentFragmentResul === void 0 ? void 0 : _currentFragmentResul.snapshot;
        if (currentSnapshot && !Array.isArray(currentSnapshot)) {
            reportInvalidCachedData(latestSnapshot.selector.node.name);
            return;
        }
        var nextSnapshots = currentSnapshot ? (0, _toConsumableArray2["default"])(currentSnapshot) : (0, _toConsumableArray2["default"])(baseSnapshots);
        nextSnapshots[idx] = latestSnapshot;
        var result = getFragmentResult(cacheKey, nextSnapshots, storeEpoch);
        if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && result.isMissingData) {
            this._cache.set(cacheKey, {
                kind: 'missing',
                result: result,
                snapshot: nextSnapshots
            });
        } else {
            this._cache.set(cacheKey, {
                kind: 'done',
                result: result
            });
        }
    };
    return FragmentResourceImpl;
}();
function reportInvalidCachedData(nodeName) {
    ("TURBOPACK compile-time truthy", 1) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected to find cached data for plural fragment `%s` when ' + 'receiving a subscription. ' + "If you're seeing this, this is likely a bug in Relay.", nodeName) : ("TURBOPACK unreachable", undefined) : ("TURBOPACK unreachable", undefined);
}
function createFragmentResource(environment) {
    return new FragmentResourceImpl(environment);
}
var dataResources = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();
function getFragmentResourceForEnvironment(environment) {
    var cached = dataResources.get(environment);
    if (cached) {
        return cached;
    }
    var newDataResource = createFragmentResource(environment);
    dataResources.set(environment, newDataResource);
    return newDataResource;
}
module.exports = {
    createFragmentResource: createFragmentResource,
    getFragmentResourceForEnvironment: getFragmentResourceForEnvironment
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/legacy/useFragmentNode.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var useUnsafeRef_DEPRECATED = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useUnsafeRef_DEPRECATED.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/legacy/FragmentResource.js [app-ssr] (ecmascript)"), getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useEffect = _require2.useEffect, useState = _require2.useState;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), RelayFeatureFlags = _require3.RelayFeatureFlags, getFragmentIdentifier = _require3.getFragmentIdentifier;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function useFragmentNode(fragmentNode, fragmentRef, componentDisplayName) {
    var environment = useRelayEnvironment();
    var FragmentResource = getFragmentResourceForEnvironment(environment);
    var isMountedRef = useUnsafeRef_DEPRECATED(false);
    var _useState = useState(0), forceUpdate = _useState[1];
    var fragmentIdentifier = getFragmentIdentifier(fragmentNode, fragmentRef);
    var fragmentResult = FragmentResource.readWithIdentifier(fragmentNode, fragmentRef, fragmentIdentifier, componentDisplayName);
    var isListeningForUpdatesRef = useUnsafeRef_DEPRECATED(true);
    function enableStoreUpdates() {
        isListeningForUpdatesRef.current = true;
        var didMissUpdates = FragmentResource.checkMissedUpdates(fragmentResult)[0];
        if (didMissUpdates) {
            handleDataUpdate();
        }
    }
    function disableStoreUpdates() {
        isListeningForUpdatesRef.current = false;
    }
    function handleDataUpdate() {
        if (isMountedRef.current === false || isListeningForUpdatesRef.current === false) {
            return;
        }
        forceUpdate(function(count) {
            return count + 1;
        });
    }
    useEffect(function() {
        isMountedRef.current = true;
        var disposable = FragmentResource.subscribe(fragmentResult, handleDataUpdate);
        return function() {
            isMountedRef.current = false;
            disposable.dispose();
        };
    }, [
        environment,
        fragmentIdentifier
    ]);
    if (RelayFeatureFlags.LOG_MISSING_RECORDS_IN_PROD || ("TURBOPACK compile-time value", "development") !== "production") {
        if (fragmentRef != null && (fragmentResult.data === undefined || Array.isArray(fragmentResult.data) && fragmentResult.data.length > 0 && fragmentResult.data.every(function(data) {
            return data === undefined;
        }))) {
            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Expected to have been able to read non-null data for ' + 'fragment `%s` declared in ' + '`%s`, since fragment reference was non-null. ' + "Make sure that that `%s`'s parent isn't " + 'holding on to and/or passing a fragment reference for data that ' + 'has been deleted.', fragmentNode.name, componentDisplayName, componentDisplayName) : ("TURBOPACK unreachable", undefined);
        }
    }
    return {
        data: fragmentResult.data,
        disableStoreUpdates: disableStoreUpdates,
        enableStoreUpdates: enableStoreUpdates
    };
}
module.exports = useFragmentNode;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useFetchTrackingRef.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var useUnsafeRef_DEPRECATED = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useUnsafeRef_DEPRECATED.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useCallback = _require.useCallback, useEffect = _require.useEffect;
function useFetchTrackingRef() {
    var subscriptionRef = useUnsafeRef_DEPRECATED(null);
    var isFetchingRef = useUnsafeRef_DEPRECATED(false);
    var disposeFetch = useCallback(function() {
        if (subscriptionRef.current != null) {
            subscriptionRef.current.unsubscribe();
            subscriptionRef.current = null;
        }
        isFetchingRef.current = false;
    }, []);
    var startFetch = useCallback(function(subscription) {
        subscriptionRef.current = subscription;
        isFetchingRef.current = true;
    }, []);
    var completeFetch = useCallback(function() {
        subscriptionRef.current = null;
        isFetchingRef.current = false;
    }, []);
    useEffect(function() {
        return disposeFetch;
    }, [
        disposeFetch
    ]);
    return {
        isFetchingRef: isFetchingRef,
        startFetch: startFetch,
        disposeFetch: disposeFetch,
        completeFetch: completeFetch
    };
}
module.exports = useFetchTrackingRef;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useLazyLoadQueryNode.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var HooksImplementation = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/HooksImplementation.js [app-ssr] (ecmascript)");
var useFragmentNode = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/legacy/useFragmentNode.js [app-ssr] (ecmascript)");
var ProfilerContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/ProfilerContext.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/QueryResource.js [app-ssr] (ecmascript)"), getQueryCacheIdentifier = _require.getQueryCacheIdentifier, getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;
var useFetchTrackingRef = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useFetchTrackingRef.js [app-ssr] (ecmascript)");
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var useContext = React.useContext, useEffect = React.useEffect, useState = React.useState, useRef = React.useRef;
function useLazyLoadQueryNode(_ref) {
    var query = _ref.query, componentDisplayName = _ref.componentDisplayName, fetchObservable = _ref.fetchObservable, fetchPolicy = _ref.fetchPolicy, fetchKey = _ref.fetchKey, renderPolicy = _ref.renderPolicy;
    var environment = useRelayEnvironment();
    var profilerContext = useContext(ProfilerContext);
    var QueryResource = getQueryResourceForEnvironment(environment);
    var _useState = useState(0), forceUpdateKey = _useState[0], forceUpdate = _useState[1];
    var _useFetchTrackingRef = useFetchTrackingRef(), startFetch = _useFetchTrackingRef.startFetch, completeFetch = _useFetchTrackingRef.completeFetch;
    var cacheBreaker = "".concat(forceUpdateKey, "-").concat(fetchKey !== null && fetchKey !== void 0 ? fetchKey : '');
    var cacheIdentifier = getQueryCacheIdentifier(environment, query, fetchPolicy, renderPolicy, cacheBreaker);
    var preparedQueryResult = profilerContext.wrapPrepareQueryResource(function() {
        return QueryResource.prepareWithIdentifier(cacheIdentifier, query, fetchObservable, fetchPolicy, renderPolicy, {
            start: startFetch,
            complete: completeFetch,
            error: completeFetch
        }, profilerContext);
    });
    var maybeHiddenOrFastRefresh = useRef(false);
    useEffect(function() {
        return function() {
            maybeHiddenOrFastRefresh.current = true;
        };
    }, []);
    useEffect(function() {
        if (maybeHiddenOrFastRefresh.current === true) {
            maybeHiddenOrFastRefresh.current = false;
            forceUpdate(function(n) {
                return n + 1;
            });
            return;
        }
        var disposable = QueryResource.retain(preparedQueryResult, profilerContext);
        return function() {
            disposable.dispose();
        };
    }, [
        environment,
        cacheIdentifier
    ]);
    useEffect(function() {
        QueryResource.releaseTemporaryRetain(preparedQueryResult);
    });
    var fragmentNode = preparedQueryResult.fragmentNode, fragmentRef = preparedQueryResult.fragmentRef;
    var data = useFragmentNodeImpl(fragmentNode, fragmentRef, componentDisplayName);
    return data;
}
function useFragmentNodeImpl(fragment, key, componentDisplayName) {
    var impl = HooksImplementation.get();
    if (impl && impl.useFragment__internal) {
        return impl.useFragment__internal(fragment, key, componentDisplayName);
    } else {
        var _useFragmentNode = useFragmentNode(fragment, key, componentDisplayName), data = _useFragmentNode.data;
        return data;
    }
}
module.exports = useLazyLoadQueryNode;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useMemoVariables.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var areEqual = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/areEqual.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useState = _require.useState;
function useMemoVariables(variables) {
    var _useState = useState(variables), mirroredVariables = _useState[0], setMirroredVariables = _useState[1];
    if (areEqual(variables, mirroredVariables)) {
        return mirroredVariables;
    } else {
        setMirroredVariables(variables);
        return variables;
    }
}
module.exports = useMemoVariables;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useMemoOperationDescriptor.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var useMemoVariables = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useMemoVariables.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), createOperationDescriptor = _require.createOperationDescriptor, getRequest = _require.getRequest;
var useMemo = React.useMemo;
function useMemoOperationDescriptor(gqlQuery, variables, cacheConfig) {
    var memoVariables = useMemoVariables(variables);
    var memoCacheConfig = useMemoVariables(cacheConfig || {});
    return useMemo(function() {
        return createOperationDescriptor(getRequest(gqlQuery), memoVariables, memoCacheConfig);
    }, [
        gqlQuery,
        memoVariables,
        memoCacheConfig
    ]);
}
module.exports = useMemoOperationDescriptor;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useLazyLoadQuery.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadQuery.js [app-ssr] (ecmascript)"), useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
var useLazyLoadQueryNode = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useLazyLoadQueryNode.js [app-ssr] (ecmascript)");
var useMemoOperationDescriptor = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useMemoOperationDescriptor.js [app-ssr] (ecmascript)");
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), fetchQuery = _require2.__internal.fetchQuery;
function useLazyLoadQuery(gqlQuery, variables, options) {
    useTrackLoadQueryInRender();
    var environment = useRelayEnvironment();
    var query = useMemoOperationDescriptor(gqlQuery, variables, options && options.networkCacheConfig ? options.networkCacheConfig : {
        force: true
    });
    var data = useLazyLoadQueryNode({
        componentDisplayName: 'useLazyLoadQuery()',
        fetchKey: options === null || options === void 0 ? void 0 : options.fetchKey,
        fetchObservable: fetchQuery(environment, query),
        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
        query: query,
        renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy
    });
    return data;
}
module.exports = useLazyLoadQuery;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useClientQuery.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var useLazyLoadQuery = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useLazyLoadQuery.js [app-ssr] (ecmascript)");
function useClientQuery(gqlQuery, variables, options) {
    var query = gqlQuery;
    return useLazyLoadQuery(query, variables, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, options), {}, {
        fetchPolicy: 'store-only'
    }));
}
module.exports = useClientQuery;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useIsMountedRef.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useEffect = _require.useEffect, useRef = _require.useRef;
function useIsMountedRef() {
    var isMountedRef = useRef(true);
    useEffect(function() {
        isMountedRef.current = true;
        return function() {
            isMountedRef.current = false;
        };
    }, []);
    return isMountedRef;
}
module.exports = useIsMountedRef;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useEntryPointLoader.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var loadEntryPoint = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadEntryPoint.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadQuery.js [app-ssr] (ecmascript)"), useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
var useIsMountedRef = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useIsMountedRef.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useCallback = _require2.useCallback, useEffect = _require2.useEffect, useRef = _require2.useRef, useState = _require2.useState;
var initialNullEntryPointReferenceState = {
    kind: 'NullEntryPointReference'
};
function useLoadEntryPoint(environmentProvider, entryPoint, options) {
    var _options$TEST_ONLY__i, _options$TEST_ONLY__i2, _options$TEST_ONLY__i3, _options$TEST_ONLY__i4;
    useTrackLoadQueryInRender();
    var initialEntryPointReferenceInternal = (_options$TEST_ONLY__i = options === null || options === void 0 ? void 0 : (_options$TEST_ONLY__i2 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i2 === void 0 ? void 0 : _options$TEST_ONLY__i2.entryPointReference) !== null && _options$TEST_ONLY__i !== void 0 ? _options$TEST_ONLY__i : initialNullEntryPointReferenceState;
    var initialEntryPointParamsInternal = (_options$TEST_ONLY__i3 = options === null || options === void 0 ? void 0 : (_options$TEST_ONLY__i4 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i4 === void 0 ? void 0 : _options$TEST_ONLY__i4.entryPointParams) !== null && _options$TEST_ONLY__i3 !== void 0 ? _options$TEST_ONLY__i3 : null;
    var isMountedRef = useIsMountedRef();
    var undisposedEntryPointReferencesRef = useRef(new Set([
        initialEntryPointReferenceInternal
    ]));
    var _useState = useState(initialEntryPointReferenceInternal), entryPointReference = _useState[0], setEntryPointReference = _useState[1];
    var _useState2 = useState(initialEntryPointParamsInternal), entryPointParams = _useState2[0], setEntryPointParams = _useState2[1];
    var disposeEntryPoint = useCallback(function() {
        if (isMountedRef.current) {
            var nullEntryPointReference = {
                kind: 'NullEntryPointReference'
            };
            undisposedEntryPointReferencesRef.current.add(nullEntryPointReference);
            setEntryPointReference(nullEntryPointReference);
        }
    }, [
        setEntryPointReference,
        isMountedRef
    ]);
    var entryPointLoaderCallback = useCallback(function(params) {
        if (isMountedRef.current) {
            var updatedEntryPointReference = loadEntryPoint(environmentProvider, entryPoint, params);
            undisposedEntryPointReferencesRef.current.add(updatedEntryPointReference);
            setEntryPointReference(updatedEntryPointReference);
            setEntryPointParams(params);
        }
    }, [
        environmentProvider,
        entryPoint,
        setEntryPointReference,
        isMountedRef
    ]);
    var maybeHiddenOrFastRefresh = useRef(false);
    useEffect(function() {
        return function() {
            maybeHiddenOrFastRefresh.current = true;
        };
    }, []);
    useEffect(function() {
        if (maybeHiddenOrFastRefresh.current === true) {
            maybeHiddenOrFastRefresh.current = false;
            if (entryPointReference.kind !== 'NullEntryPointReference' && entryPointParams != null) {
                entryPointLoaderCallback(entryPointParams);
            }
            return;
        }
        var undisposedEntryPointReferences = undisposedEntryPointReferencesRef.current;
        if (isMountedRef.current) {
            var _iterator = (0, _createForOfIteratorHelper2["default"])(undisposedEntryPointReferences), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var undisposedEntryPointReference = _step.value;
                    if (undisposedEntryPointReference === entryPointReference) {
                        break;
                    }
                    undisposedEntryPointReferences["delete"](undisposedEntryPointReference);
                    if (undisposedEntryPointReference.kind !== 'NullEntryPointReference') {
                        undisposedEntryPointReference.dispose();
                    }
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
        }
    }, [
        entryPointReference,
        entryPointParams,
        entryPointLoaderCallback,
        isMountedRef
    ]);
    useEffect(function() {
        return function disposeAllRemainingEntryPointReferences() {
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(undisposedEntryPointReferencesRef.current), _step2;
            try {
                for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                    var unhandledStateChange = _step2.value;
                    if (unhandledStateChange.kind !== 'NullEntryPointReference') {
                        unhandledStateChange.dispose();
                    }
                }
            } catch (err) {
                _iterator2.e(err);
            } finally{
                _iterator2.f();
            }
        };
    }, []);
    return [
        entryPointReference.kind === 'NullEntryPointReference' ? null : entryPointReference,
        entryPointLoaderCallback,
        disposeEntryPoint
    ];
}
module.exports = useLoadEntryPoint;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useStaticFragmentNodeWarning.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var useUnsafeRef_DEPRECATED = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useUnsafeRef_DEPRECATED.js [app-ssr] (ecmascript)");
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function useStaticFragmentNodeWarning(fragmentNode, warningContext) {
    if ("TURBOPACK compile-time truthy", 1) {
        var initialPropRef = useUnsafeRef_DEPRECATED(fragmentNode.name);
        ("TURBOPACK compile-time truthy", 1) ? warning(initialPropRef.current === fragmentNode.name, 'Relay: The %s has to remain the same over the lifetime of a component. ' + 'Changing it is not supported and will result in unexpected behavior.', warningContext) : ("TURBOPACK unreachable", undefined);
    }
}
module.exports = useStaticFragmentNodeWarning;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useFragment.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var HooksImplementation = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/HooksImplementation.js [app-ssr] (ecmascript)");
var useFragmentNode = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/legacy/useFragmentNode.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadQuery.js [app-ssr] (ecmascript)"), useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
var useStaticFragmentNodeWarning = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useStaticFragmentNodeWarning.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useDebugValue = _require2.useDebugValue;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), getFragment = _require3.getFragment;
function useFragment_LEGACY(fragment, key) {
    useTrackLoadQueryInRender();
    var fragmentNode = getFragment(fragment);
    useStaticFragmentNodeWarning(fragmentNode, 'first argument of useFragment()');
    var _useFragmentNode = useFragmentNode(fragmentNode, key, 'useFragment()'), data = _useFragmentNode.data;
    if ("TURBOPACK compile-time truthy", 1) {
        useDebugValue({
            fragment: fragmentNode.name,
            data: data
        });
    }
    return data;
}
function useFragment(fragment, key) {
    var impl = HooksImplementation.get();
    if (impl) {
        return impl.useFragment(fragment, key);
    } else {
        return useFragment_LEGACY(fragment, key);
    }
}
module.exports = useFragment;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useMutation.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var useIsMountedRef = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useIsMountedRef.js [app-ssr] (ecmascript)");
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), defaultCommitMutation = _require.commitMutation;
var useState = React.useState, useEffect = React.useEffect, useRef = React.useRef, useCallback = React.useCallback;
function useMutation(mutation) {
    var commitMutationFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCommitMutation;
    var environment = useRelayEnvironment();
    var isMountedRef = useIsMountedRef();
    var environmentRef = useRef(environment);
    var mutationRef = useRef(mutation);
    var inFlightMutationsRef = useRef(new Set());
    var _useState = useState(false), isMutationInFlight = _useState[0], setMutationInFlight = _useState[1];
    var cleanup = useCallback(function(disposable) {
        if (environmentRef.current === environment && mutationRef.current === mutation) {
            inFlightMutationsRef.current["delete"](disposable);
            if (isMountedRef.current) {
                setMutationInFlight(inFlightMutationsRef.current.size > 0);
            }
        }
    }, [
        environment,
        isMountedRef,
        mutation
    ]);
    useEffect(function() {
        if (environmentRef.current !== environment || mutationRef.current !== mutation) {
            inFlightMutationsRef.current = new Set();
            if (isMountedRef.current) {
                setMutationInFlight(false);
            }
            environmentRef.current = environment;
            mutationRef.current = mutation;
        }
    }, [
        environment,
        isMountedRef,
        mutation
    ]);
    var commit = useCallback(function(config) {
        if (isMountedRef.current) {
            setMutationInFlight(true);
        }
        var disposable = commitMutationFn(environment, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, config), {}, {
            mutation: mutation,
            onCompleted: function onCompleted(response, errors) {
                var _config$onCompleted;
                cleanup(disposable);
                (_config$onCompleted = config.onCompleted) === null || _config$onCompleted === void 0 ? void 0 : _config$onCompleted.call(config, response, errors);
            },
            onError: function onError(error) {
                var _config$onError;
                cleanup(disposable);
                (_config$onError = config.onError) === null || _config$onError === void 0 ? void 0 : _config$onError.call(config, error);
            },
            onUnsubscribe: function onUnsubscribe() {
                var _config$onUnsubscribe;
                cleanup(disposable);
                (_config$onUnsubscribe = config.onUnsubscribe) === null || _config$onUnsubscribe === void 0 ? void 0 : _config$onUnsubscribe.call(config);
            },
            onNext: function onNext() {
                var _config$onNext;
                (_config$onNext = config.onNext) === null || _config$onNext === void 0 ? void 0 : _config$onNext.call(config);
            }
        }));
        inFlightMutationsRef.current.add(disposable);
        return disposable;
    }, [
        cleanup,
        commitMutationFn,
        environment,
        isMountedRef,
        mutation
    ]);
    return [
        commit,
        isMutationInFlight
    ];
}
module.exports = useMutation;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useQueryLoader.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _createForOfIteratorHelper2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js [app-ssr] (ecmascript)"));
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadQuery.js [app-ssr] (ecmascript)"), loadQuery = _require.loadQuery, useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
var useIsMountedRef = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useIsMountedRef.js [app-ssr] (ecmascript)");
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useCallback = _require2.useCallback, useEffect = _require2.useEffect, useRef = _require2.useRef, useState = _require2.useState;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), getRequest = _require3.getRequest;
var initialNullQueryReferenceState = {
    kind: 'NullQueryReference'
};
function requestIsLiveQuery(preloadableRequest) {
    if (preloadableRequest.kind === 'PreloadableConcreteRequest') {
        return preloadableRequest.params.metadata.live !== undefined;
    }
    var request = getRequest(preloadableRequest);
    return request.params.metadata.live !== undefined;
}
function useQueryLoader(preloadableRequest, initialQueryReference) {
    var initialQueryReferenceInternal = initialQueryReference !== null && initialQueryReference !== void 0 ? initialQueryReference : initialNullQueryReferenceState;
    var environment = useRelayEnvironment();
    useTrackLoadQueryInRender();
    var isMountedRef = useIsMountedRef();
    var undisposedQueryReferencesRef = useRef(new Set([
        initialQueryReferenceInternal
    ]));
    var _useState = useState(function() {
        return initialQueryReferenceInternal;
    }), queryReference = _useState[0], setQueryReference = _useState[1];
    var _useState2 = useState(function() {
        return initialQueryReferenceInternal;
    }), previousInitialQueryReference = _useState2[0], setPreviousInitialQueryReference = _useState2[1];
    if (initialQueryReferenceInternal !== previousInitialQueryReference) {
        undisposedQueryReferencesRef.current.add(initialQueryReferenceInternal);
        setPreviousInitialQueryReference(initialQueryReferenceInternal);
        setQueryReference(initialQueryReferenceInternal);
    }
    var disposeQuery = useCallback(function() {
        if (isMountedRef.current) {
            undisposedQueryReferencesRef.current.add(initialNullQueryReferenceState);
            setQueryReference(initialNullQueryReferenceState);
        }
    }, [
        isMountedRef
    ]);
    var queryLoaderCallback = useCallback(function(variables, options) {
        var mergedOptions = options != null && options.hasOwnProperty('__environment') ? {
            fetchPolicy: options.fetchPolicy,
            networkCacheConfig: options.networkCacheConfig,
            __nameForWarning: options.__nameForWarning
        } : options;
        if (isMountedRef.current) {
            var _options$__environmen;
            var updatedQueryReference = loadQuery((_options$__environmen = options === null || options === void 0 ? void 0 : options.__environment) !== null && _options$__environmen !== void 0 ? _options$__environmen : environment, preloadableRequest, variables, mergedOptions);
            undisposedQueryReferencesRef.current.add(updatedQueryReference);
            setQueryReference(updatedQueryReference);
        }
    }, [
        environment,
        preloadableRequest,
        setQueryReference,
        isMountedRef
    ]);
    var maybeHiddenOrFastRefresh = useRef(false);
    useEffect(function() {
        return function() {
            maybeHiddenOrFastRefresh.current = true;
        };
    }, []);
    useEffect(function() {
        if (maybeHiddenOrFastRefresh.current === true) {
            maybeHiddenOrFastRefresh.current = false;
            if (queryReference.kind !== 'NullQueryReference') {
                queryLoaderCallback(queryReference.variables, {
                    fetchPolicy: queryReference.fetchPolicy,
                    networkCacheConfig: queryReference.networkCacheConfig
                });
            }
            return;
        }
        var undisposedQueryReferences = undisposedQueryReferencesRef.current;
        if (isMountedRef.current) {
            var _iterator = (0, _createForOfIteratorHelper2["default"])(undisposedQueryReferences), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var undisposedQueryReference = _step.value;
                    if (undisposedQueryReference === queryReference) {
                        break;
                    }
                    undisposedQueryReferences["delete"](undisposedQueryReference);
                    if (undisposedQueryReference.kind !== 'NullQueryReference') {
                        if (requestIsLiveQuery(preloadableRequest)) {
                            undisposedQueryReference.dispose && undisposedQueryReference.dispose();
                        } else {
                            undisposedQueryReference.releaseQuery && undisposedQueryReference.releaseQuery();
                        }
                    }
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
        }
    }, [
        queryReference,
        isMountedRef,
        queryLoaderCallback,
        preloadableRequest
    ]);
    useEffect(function() {
        return function disposeAllRemainingQueryReferences() {
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(undisposedQueryReferencesRef.current), _step2;
            try {
                for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                    var undisposedQueryReference = _step2.value;
                    if (undisposedQueryReference.kind !== 'NullQueryReference') {
                        if (requestIsLiveQuery(preloadableRequest)) {
                            undisposedQueryReference.dispose && undisposedQueryReference.dispose();
                        } else {
                            undisposedQueryReference.releaseQuery && undisposedQueryReference.releaseQuery();
                        }
                    }
                }
            } catch (err) {
                _iterator2.e(err);
            } finally{
                _iterator2.f();
            }
        };
    }, [
        preloadableRequest
    ]);
    return [
        queryReference.kind === 'NullQueryReference' ? null : queryReference,
        queryLoaderCallback,
        disposeQuery
    ];
}
module.exports = useQueryLoader;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/legacy/useRefetchableFragmentNode.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var ProfilerContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/ProfilerContext.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/QueryResource.js [app-ssr] (ecmascript)"), getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;
var useIsMountedRef = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useIsMountedRef.js [app-ssr] (ecmascript)");
var useQueryLoader = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useQueryLoader.js [app-ssr] (ecmascript)");
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/legacy/FragmentResource.js [app-ssr] (ecmascript)"), getFragmentResourceForEnvironment = _require2.getFragmentResourceForEnvironment;
var useFragmentNode = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/legacy/useFragmentNode.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useCallback = _require3.useCallback, useContext = _require3.useContext, useReducer = _require3.useReducer;
var _require4 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), fetchQuery = _require4.__internal.fetchQuery, createOperationDescriptor = _require4.createOperationDescriptor, getFragmentIdentifier = _require4.getFragmentIdentifier, getRefetchMetadata = _require4.getRefetchMetadata, getSelector = _require4.getSelector, getValueAtPath = _require4.getValueAtPath;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function reducer(state, action) {
    switch(action.type){
        case 'refetch':
            {
                var _action$refetchEnviro;
                return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, state), {}, {
                    fetchPolicy: action.fetchPolicy,
                    mirroredEnvironment: (_action$refetchEnviro = action.refetchEnvironment) !== null && _action$refetchEnviro !== void 0 ? _action$refetchEnviro : state.mirroredEnvironment,
                    onComplete: action.onComplete,
                    refetchEnvironment: action.refetchEnvironment,
                    refetchQuery: action.refetchQuery,
                    renderPolicy: action.renderPolicy
                });
            }
        case 'reset':
            {
                return {
                    fetchPolicy: undefined,
                    mirroredEnvironment: action.environment,
                    mirroredFragmentIdentifier: action.fragmentIdentifier,
                    onComplete: undefined,
                    refetchQuery: null,
                    renderPolicy: undefined
                };
            }
        default:
            {
                action.type;
                throw new Error('useRefetchableFragmentNode: Unexpected action type');
            }
    }
}
function useRefetchableFragmentNode(fragmentNode, parentFragmentRef, componentDisplayName) {
    var parentEnvironment = useRelayEnvironment();
    var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName), refetchableRequest = _getRefetchMetadata.refetchableRequest, fragmentRefPathInResponse = _getRefetchMetadata.fragmentRefPathInResponse;
    var fragmentIdentifier = getFragmentIdentifier(fragmentNode, parentFragmentRef);
    var _useReducer = useReducer(reducer, {
        fetchPolicy: undefined,
        mirroredEnvironment: parentEnvironment,
        mirroredFragmentIdentifier: fragmentIdentifier,
        onComplete: undefined,
        refetchEnvironment: null,
        refetchQuery: null,
        renderPolicy: undefined
    }), refetchState = _useReducer[0], dispatch = _useReducer[1];
    var fetchPolicy = refetchState.fetchPolicy, mirroredEnvironment = refetchState.mirroredEnvironment, mirroredFragmentIdentifier = refetchState.mirroredFragmentIdentifier, onComplete = refetchState.onComplete, refetchEnvironment = refetchState.refetchEnvironment, refetchQuery = refetchState.refetchQuery, renderPolicy = refetchState.renderPolicy;
    var environment = refetchEnvironment !== null && refetchEnvironment !== void 0 ? refetchEnvironment : parentEnvironment;
    var QueryResource = getQueryResourceForEnvironment(environment);
    var FragmentResource = getFragmentResourceForEnvironment(environment);
    var profilerContext = useContext(ProfilerContext);
    var shouldReset = environment !== mirroredEnvironment || fragmentIdentifier !== mirroredFragmentIdentifier;
    var _useQueryLoader = useQueryLoader(refetchableRequest), queryRef = _useQueryLoader[0], loadQuery = _useQueryLoader[1], disposeQuery = _useQueryLoader[2];
    var fragmentRef = parentFragmentRef;
    var _getRefetchMetadata2 = getRefetchMetadata(fragmentNode, componentDisplayName), identifierInfo = _getRefetchMetadata2.identifierInfo;
    if (shouldReset) {
        dispatch({
            type: 'reset',
            environment: environment,
            fragmentIdentifier: fragmentIdentifier
        });
        disposeQuery();
    } else if (refetchQuery != null && queryRef != null) {
        var debugPreviousIDAndTypename;
        if ("TURBOPACK compile-time truthy", 1) {
            debugPreviousIDAndTypename = debugFunctions.getInitialIDAndType(refetchQuery.request.variables, fragmentRefPathInResponse, identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierQueryVariableName, environment);
        }
        var handleQueryCompleted = function handleQueryCompleted(maybeError) {
            onComplete && onComplete(maybeError !== null && maybeError !== void 0 ? maybeError : null);
        };
        var fetchObservable = queryRef.source != null ? queryRef.source : fetchQuery(environment, refetchQuery);
        var queryResult = profilerContext.wrapPrepareQueryResource(function() {
            return QueryResource.prepare(refetchQuery, fetchObservable, fetchPolicy, renderPolicy, {
                error: handleQueryCompleted,
                complete: function complete() {
                    if ("TURBOPACK compile-time truthy", 1) {
                        debugFunctions.checkSameTypeAfterRefetch(debugPreviousIDAndTypename, environment, fragmentNode, componentDisplayName);
                    }
                    handleQueryCompleted();
                }
            }, queryRef.fetchKey, profilerContext);
        });
        var queryData = FragmentResource.read(queryResult.fragmentNode, queryResult.fragmentRef, componentDisplayName).data;
        !(queryData != null) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected to be able to read refetch query response. ' + "If you're seeing this, this is likely a bug in Relay.") : ("TURBOPACK unreachable", undefined) : void 0;
        var refetchedFragmentRef = getValueAtPath(queryData, fragmentRefPathInResponse);
        fragmentRef = refetchedFragmentRef;
        if ("TURBOPACK compile-time truthy", 1) {
            debugFunctions.checkSameIDAfterRefetch(debugPreviousIDAndTypename, fragmentRef, fragmentNode, componentDisplayName);
        }
    }
    var _useFragmentNode = useFragmentNode(fragmentNode, fragmentRef, componentDisplayName), fragmentData = _useFragmentNode.data, disableStoreUpdates = _useFragmentNode.disableStoreUpdates, enableStoreUpdates = _useFragmentNode.enableStoreUpdates;
    var refetch = useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierInfo, loadQuery, parentFragmentRef, refetchableRequest);
    return {
        fragmentData: fragmentData,
        fragmentRef: fragmentRef,
        refetch: refetch,
        disableStoreUpdates: disableStoreUpdates,
        enableStoreUpdates: enableStoreUpdates
    };
}
function useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierInfo, loadQuery, parentFragmentRef, refetchableRequest) {
    var isMountedRef = useIsMountedRef();
    var identifierValue = (identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierField) != null && fragmentData != null && typeof fragmentData === 'object' ? fragmentData[identifierInfo.identifierField] : null;
    return useCallback(function(providedRefetchVariables, options) {
        if (isMountedRef.current !== true) {
            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Unexpected call to `refetch` on unmounted component for fragment ' + '`%s` in `%s`. It looks like some instances of your component are ' + 'still trying to fetch data but they already unmounted. ' + 'Please make sure you clear all timers, intervals, ' + 'async calls, etc that may trigger a fetch.', fragmentNode.name, componentDisplayName) : ("TURBOPACK unreachable", undefined);
            return {
                dispose: function dispose() {}
            };
        }
        if (parentFragmentRef == null) {
            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Unexpected call to `refetch` while using a null fragment ref ' + 'for fragment `%s` in `%s`. When calling `refetch`, we expect ' + "initial fragment data to be non-null. Please make sure you're " + 'passing a valid fragment ref to `%s` before calling ' + '`refetch`, or make sure you pass all required variables to `refetch`.', fragmentNode.name, componentDisplayName, componentDisplayName) : ("TURBOPACK unreachable", undefined);
        }
        var refetchEnvironment = options === null || options === void 0 ? void 0 : options.__environment;
        var fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy;
        var renderPolicy = options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy;
        var onComplete = options === null || options === void 0 ? void 0 : options.onComplete;
        var fragmentSelector = getSelector(fragmentNode, parentFragmentRef);
        var parentVariables;
        var fragmentVariables;
        if (fragmentSelector == null) {
            parentVariables = {};
            fragmentVariables = {};
        } else if (fragmentSelector.kind === 'PluralReaderSelector') {
            var _fragmentSelector$sel, _fragmentSelector$sel2, _fragmentSelector$sel3, _fragmentSelector$sel4;
            parentVariables = (_fragmentSelector$sel = (_fragmentSelector$sel2 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel2 === void 0 ? void 0 : _fragmentSelector$sel2.owner.variables) !== null && _fragmentSelector$sel !== void 0 ? _fragmentSelector$sel : {};
            fragmentVariables = (_fragmentSelector$sel3 = (_fragmentSelector$sel4 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel4 === void 0 ? void 0 : _fragmentSelector$sel4.variables) !== null && _fragmentSelector$sel3 !== void 0 ? _fragmentSelector$sel3 : {};
        } else {
            parentVariables = fragmentSelector.owner.variables;
            fragmentVariables = fragmentSelector.variables;
        }
        var refetchVariables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, parentVariables), fragmentVariables), providedRefetchVariables);
        if (identifierInfo != null && !providedRefetchVariables.hasOwnProperty(identifierInfo.identifierQueryVariableName)) {
            if (typeof identifierValue !== 'string') {
                ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Expected result to have a string  ' + '`%s` in order to refetch, got `%s`.', identifierInfo.identifierField, identifierValue) : ("TURBOPACK unreachable", undefined);
            }
            refetchVariables[identifierInfo.identifierQueryVariableName] = identifierValue;
        }
        var refetchQuery = createOperationDescriptor(refetchableRequest, refetchVariables, {
            force: true
        });
        loadQuery(refetchQuery.request.variables, {
            fetchPolicy: fetchPolicy,
            __environment: refetchEnvironment,
            __nameForWarning: 'refetch'
        });
        dispatch({
            type: 'refetch',
            fetchPolicy: fetchPolicy,
            onComplete: onComplete,
            refetchEnvironment: refetchEnvironment,
            refetchQuery: refetchQuery,
            renderPolicy: renderPolicy
        });
        return {
            dispose: disposeQuery
        };
    }, [
        fragmentIdentifier,
        dispatch,
        disposeQuery,
        identifierValue,
        loadQuery
    ]);
}
var debugFunctions;
if ("TURBOPACK compile-time truthy", 1) {
    debugFunctions = {
        getInitialIDAndType: function getInitialIDAndType(memoRefetchVariables, fragmentRefPathInResponse, identifierQueryVariableName, environment) {
            var _require5 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), Record = _require5.Record;
            var id = memoRefetchVariables === null || memoRefetchVariables === void 0 ? void 0 : memoRefetchVariables[identifierQueryVariableName !== null && identifierQueryVariableName !== void 0 ? identifierQueryVariableName : 'id'];
            if (fragmentRefPathInResponse.length !== 1 || fragmentRefPathInResponse[0] !== 'node' || id == null) {
                return null;
            }
            var recordSource = environment.getStore().getSource();
            var record = recordSource.get(id);
            var typename = record == null ? null : Record.getType(record);
            if (typename == null) {
                return null;
            }
            return {
                id: id,
                typename: typename
            };
        },
        checkSameTypeAfterRefetch: function checkSameTypeAfterRefetch(previousIDAndType, environment, fragmentNode, componentDisplayName) {
            var _require6 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), Record = _require6.Record;
            if (!previousIDAndType) {
                return;
            }
            var recordSource = environment.getStore().getSource();
            var record = recordSource.get(previousIDAndType.id);
            var typename = record && Record.getType(record);
            if (typename !== previousIDAndType.typename) {
                ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Call to `refetch` returned data with a different ' + '__typename: was `%s`, now `%s`, on `%s` in `%s`. ' + 'Please make sure the server correctly implements' + 'unique id requirement.', previousIDAndType.typename, typename, fragmentNode.name, componentDisplayName) : ("TURBOPACK unreachable", undefined);
            }
        },
        checkSameIDAfterRefetch: function checkSameIDAfterRefetch(previousIDAndTypename, refetchedFragmentRef, fragmentNode, componentDisplayName) {
            if (previousIDAndTypename == null) {
                return;
            }
            var _require7 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), ID_KEY = _require7.ID_KEY;
            var resultID = refetchedFragmentRef[ID_KEY];
            if (resultID != null && resultID !== previousIDAndTypename.id) {
                ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Call to `refetch` returned a different id, expected ' + '`%s`, got `%s`, on `%s` in `%s`. ' + 'Please make sure the server correctly implements ' + 'unique id requirement.', resultID, previousIDAndTypename.id, fragmentNode.name, componentDisplayName) : ("TURBOPACK unreachable", undefined);
            }
        }
    };
}
module.exports = useRefetchableFragmentNode;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useIsOperationNodeActive.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var React = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), getObservableForActiveRequest = _require.__internal.getObservableForActiveRequest, getSelector = _require.getSelector;
var useEffect = React.useEffect, useState = React.useState, useMemo = React.useMemo;
function useIsOperationNodeActive(fragmentNode, fragmentRef) {
    var environment = useRelayEnvironment();
    var observable = useMemo(function() {
        var selector = getSelector(fragmentNode, fragmentRef);
        if (selector == null) {
            return null;
        }
        !(selector.kind === 'SingularReaderSelector') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'useIsOperationNodeActive: Plural fragments are not supported.') : ("TURBOPACK unreachable", undefined) : void 0;
        return getObservableForActiveRequest(environment, selector.owner);
    }, [
        environment,
        fragmentNode,
        fragmentRef
    ]);
    var _useState = useState(observable != null), isActive = _useState[0], setIsActive = _useState[1];
    useEffect(function() {
        var subscription;
        setIsActive(observable != null);
        if (observable != null) {
            var onCompleteOrError = function onCompleteOrError() {
                setIsActive(false);
            };
            subscription = observable.subscribe({
                complete: onCompleteOrError,
                error: onCompleteOrError
            });
        }
        return function() {
            if (subscription) {
                subscription.unsubscribe();
            }
        };
    }, [
        observable
    ]);
    return isActive;
}
module.exports = useIsOperationNodeActive;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useLoadMoreFunction.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var useFetchTrackingRef = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useFetchTrackingRef.js [app-ssr] (ecmascript)");
var useIsMountedRef = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useIsMountedRef.js [app-ssr] (ecmascript)");
var useIsOperationNodeActive = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useIsOperationNodeActive.js [app-ssr] (ecmascript)");
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useCallback = _require.useCallback, useEffect = _require.useEffect, useState = _require.useState;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), fetchQuery = _require2.__internal.fetchQuery, ConnectionInterface = _require2.ConnectionInterface, createOperationDescriptor = _require2.createOperationDescriptor, getPaginationVariables = _require2.getPaginationVariables, getRefetchMetadata = _require2.getRefetchMetadata, getSelector = _require2.getSelector, getValueAtPath = _require2.getValueAtPath;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function useLoadMoreFunction(args) {
    var direction = args.direction, fragmentNode = args.fragmentNode, fragmentRef = args.fragmentRef, fragmentIdentifier = args.fragmentIdentifier, fragmentData = args.fragmentData, connectionPathInFragmentData = args.connectionPathInFragmentData, paginationRequest = args.paginationRequest, paginationMetadata = args.paginationMetadata, componentDisplayName = args.componentDisplayName, observer = args.observer, onReset = args.onReset;
    var environment = useRelayEnvironment();
    var _useFetchTrackingRef = useFetchTrackingRef(), isFetchingRef = _useFetchTrackingRef.isFetchingRef, startFetch = _useFetchTrackingRef.startFetch, disposeFetch = _useFetchTrackingRef.disposeFetch, completeFetch = _useFetchTrackingRef.completeFetch;
    var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName), identifierInfo = _getRefetchMetadata.identifierInfo;
    var identifierValue = (identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierField) != null && fragmentData != null && typeof fragmentData === 'object' ? fragmentData[identifierInfo.identifierField] : null;
    var isMountedRef = useIsMountedRef();
    var _useState = useState(environment), mirroredEnvironment = _useState[0], setMirroredEnvironment = _useState[1];
    var _useState2 = useState(fragmentIdentifier), mirroredFragmentIdentifier = _useState2[0], setMirroredFragmentIdentifier = _useState2[1];
    var isParentQueryActive = useIsOperationNodeActive(fragmentNode, fragmentRef);
    var shouldReset = environment !== mirroredEnvironment || fragmentIdentifier !== mirroredFragmentIdentifier;
    if (shouldReset) {
        disposeFetch();
        onReset();
        setMirroredEnvironment(environment);
        setMirroredFragmentIdentifier(fragmentIdentifier);
    }
    var _getConnectionState = getConnectionState(direction, fragmentNode, fragmentData, connectionPathInFragmentData), cursor = _getConnectionState.cursor, hasMore = _getConnectionState.hasMore;
    useEffect(function() {
        return function() {
            disposeFetch();
        };
    }, [
        disposeFetch
    ]);
    var loadMore = useCallback(function(count, options) {
        var onComplete = options === null || options === void 0 ? void 0 : options.onComplete;
        if (isMountedRef.current !== true) {
            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Unexpected fetch on unmounted component for fragment ' + '`%s` in `%s`. It looks like some instances of your component are ' + 'still trying to fetch data but they already unmounted. ' + 'Please make sure you clear all timers, intervals, ' + 'async calls, etc that may trigger a fetch.', fragmentNode.name, componentDisplayName) : ("TURBOPACK unreachable", undefined);
            return {
                dispose: function dispose() {}
            };
        }
        var fragmentSelector = getSelector(fragmentNode, fragmentRef);
        if (isFetchingRef.current === true || fragmentData == null || isParentQueryActive) {
            if (fragmentSelector == null) {
                ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Unexpected fetch while using a null fragment ref ' + 'for fragment `%s` in `%s`. When fetching more items, we expect ' + "initial fragment data to be non-null. Please make sure you're " + 'passing a valid fragment ref to `%s` before paginating.', fragmentNode.name, componentDisplayName, componentDisplayName) : ("TURBOPACK unreachable", undefined);
            }
            if (onComplete) {
                onComplete(null);
            }
            return {
                dispose: function dispose() {}
            };
        }
        !(fragmentSelector != null && fragmentSelector.kind !== 'PluralReaderSelector') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected to be able to find a non-plural fragment owner for ' + "fragment `%s` when using `%s`. If you're seeing this, " + 'this is likely a bug in Relay.', fragmentNode.name, componentDisplayName) : ("TURBOPACK unreachable", undefined) : void 0;
        var parentVariables = fragmentSelector.owner.variables;
        var fragmentVariables = fragmentSelector.variables;
        var extraVariables = options === null || options === void 0 ? void 0 : options.UNSTABLE_extraVariables;
        var baseVariables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, parentVariables), fragmentVariables);
        var paginationVariables = getPaginationVariables(direction, count, cursor, baseVariables, (0, _objectSpread2["default"])({}, extraVariables), paginationMetadata);
        if (identifierInfo != null) {
            if (typeof identifierValue !== 'string') {
                ("TURBOPACK compile-time truthy", 1) ? warning(false, 'Relay: Expected result to have a string  ' + '`%s` in order to refetch, got `%s`.', identifierInfo.identifierField, identifierValue) : ("TURBOPACK unreachable", undefined);
            }
            paginationVariables[identifierInfo.identifierQueryVariableName] = identifierValue;
        }
        var paginationQuery = createOperationDescriptor(paginationRequest, paginationVariables, {
            force: true
        });
        fetchQuery(environment, paginationQuery).subscribe((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, observer), {}, {
            start: function start(subscription) {
                startFetch(subscription);
                observer.start && observer.start(subscription);
            },
            complete: function complete() {
                completeFetch();
                observer.complete && observer.complete();
                onComplete && onComplete(null);
            },
            error: function error(_error) {
                completeFetch();
                observer.error && observer.error(_error);
                onComplete && onComplete(_error);
            }
        }));
        return {
            dispose: disposeFetch
        };
    }, [
        environment,
        identifierValue,
        direction,
        cursor,
        startFetch,
        disposeFetch,
        completeFetch,
        isFetchingRef,
        isParentQueryActive,
        fragmentData,
        fragmentNode.name,
        fragmentRef,
        componentDisplayName
    ]);
    return [
        loadMore,
        hasMore,
        disposeFetch
    ];
}
function getConnectionState(direction, fragmentNode, fragmentData, connectionPathInFragmentData) {
    var _pageInfo$END_CURSOR, _pageInfo$START_CURSO;
    var _ConnectionInterface$ = ConnectionInterface.get(), EDGES = _ConnectionInterface$.EDGES, PAGE_INFO = _ConnectionInterface$.PAGE_INFO, HAS_NEXT_PAGE = _ConnectionInterface$.HAS_NEXT_PAGE, HAS_PREV_PAGE = _ConnectionInterface$.HAS_PREV_PAGE, END_CURSOR = _ConnectionInterface$.END_CURSOR, START_CURSOR = _ConnectionInterface$.START_CURSOR;
    var connection = getValueAtPath(fragmentData, connectionPathInFragmentData);
    if (connection == null) {
        return {
            cursor: null,
            hasMore: false
        };
    }
    !(typeof connection === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected connection in fragment `%s` to have been `null`, or ' + 'a plain object with %s and %s properties. Instead got `%s`.', fragmentNode.name, EDGES, PAGE_INFO, connection) : ("TURBOPACK unreachable", undefined) : void 0;
    var edges = connection[EDGES];
    var pageInfo = connection[PAGE_INFO];
    if (edges == null || pageInfo == null) {
        return {
            cursor: null,
            hasMore: false
        };
    }
    !Array.isArray(edges) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected connection in fragment `%s` to have a plural `%s` field. ' + 'Instead got `%s`.', fragmentNode.name, EDGES, edges) : ("TURBOPACK unreachable", undefined) : void 0;
    !(typeof pageInfo === 'object') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected connection in fragment `%s` to have a `%s` field. ' + 'Instead got `%s`.', fragmentNode.name, PAGE_INFO, pageInfo) : ("TURBOPACK unreachable", undefined) : void 0;
    var cursor = direction === 'forward' ? (_pageInfo$END_CURSOR = pageInfo[END_CURSOR]) !== null && _pageInfo$END_CURSOR !== void 0 ? _pageInfo$END_CURSOR : null : (_pageInfo$START_CURSO = pageInfo[START_CURSOR]) !== null && _pageInfo$START_CURSO !== void 0 ? _pageInfo$START_CURSO : null;
    !(cursor === null || typeof cursor === 'string') ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'Relay: Expected page info for connection in fragment `%s` to have a ' + 'valid `%s`. Instead got `%s`.', fragmentNode.name, START_CURSOR, cursor) : ("TURBOPACK unreachable", undefined) : void 0;
    var hasMore;
    if (direction === 'forward') {
        hasMore = cursor != null && pageInfo[HAS_NEXT_PAGE] === true;
    } else {
        hasMore = cursor != null && pageInfo[HAS_PREV_PAGE] === true;
    }
    return {
        cursor: cursor,
        hasMore: hasMore
    };
}
module.exports = useLoadMoreFunction;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/usePaginationFragment.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/interopRequireDefault.js [app-ssr] (ecmascript)")["default"];
var _objectSpread2 = _interopRequireDefault(__turbopack_require__("[project]/node_modules/.pnpm/@babel+runtime@7.24.0/node_modules/@babel/runtime/helpers/objectSpread2.js [app-ssr] (ecmascript)"));
var HooksImplementation = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/HooksImplementation.js [app-ssr] (ecmascript)");
var useRefetchableFragmentNode = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/legacy/useRefetchableFragmentNode.js [app-ssr] (ecmascript)");
var useLoadMoreFunction = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useLoadMoreFunction.js [app-ssr] (ecmascript)");
var useStaticFragmentNodeWarning = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useStaticFragmentNodeWarning.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useCallback = _require.useCallback, useDebugValue = _require.useDebugValue, useState = _require.useState;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), getFragment = _require2.getFragment, getFragmentIdentifier = _require2.getFragmentIdentifier, getPaginationMetadata = _require2.getPaginationMetadata;
function usePaginationFragment_LEGACY(fragmentInput, parentFragmentRef) {
    var fragmentNode = getFragment(fragmentInput);
    useStaticFragmentNodeWarning(fragmentNode, 'first argument of usePaginationFragment()');
    var componentDisplayName = 'usePaginationFragment()';
    var _getPaginationMetadat = getPaginationMetadata(fragmentNode, componentDisplayName), connectionPathInFragmentData = _getPaginationMetadat.connectionPathInFragmentData, paginationRequest = _getPaginationMetadat.paginationRequest, paginationMetadata = _getPaginationMetadat.paginationMetadata;
    var _useRefetchableFragme = useRefetchableFragmentNode(fragmentNode, parentFragmentRef, componentDisplayName), fragmentData = _useRefetchableFragme.fragmentData, fragmentRef = _useRefetchableFragme.fragmentRef, refetch = _useRefetchableFragme.refetch;
    var fragmentIdentifier = getFragmentIdentifier(fragmentNode, fragmentRef);
    var _useLoadMore = useLoadMore({
        componentDisplayName: componentDisplayName,
        connectionPathInFragmentData: connectionPathInFragmentData,
        direction: 'backward',
        fragmentData: fragmentData,
        fragmentIdentifier: fragmentIdentifier,
        fragmentNode: fragmentNode,
        fragmentRef: fragmentRef,
        paginationMetadata: paginationMetadata,
        paginationRequest: paginationRequest
    }), loadPrevious = _useLoadMore[0], hasPrevious = _useLoadMore[1], isLoadingPrevious = _useLoadMore[2], disposeFetchPrevious = _useLoadMore[3];
    var _useLoadMore2 = useLoadMore({
        componentDisplayName: componentDisplayName,
        connectionPathInFragmentData: connectionPathInFragmentData,
        direction: 'forward',
        fragmentData: fragmentData,
        fragmentIdentifier: fragmentIdentifier,
        fragmentNode: fragmentNode,
        fragmentRef: fragmentRef,
        paginationMetadata: paginationMetadata,
        paginationRequest: paginationRequest
    }), loadNext = _useLoadMore2[0], hasNext = _useLoadMore2[1], isLoadingNext = _useLoadMore2[2], disposeFetchNext = _useLoadMore2[3];
    var refetchPagination = useCallback(function(variables, options) {
        disposeFetchNext();
        disposeFetchPrevious();
        return refetch(variables, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, options), {}, {
            __environment: undefined
        }));
    }, [
        disposeFetchNext,
        disposeFetchPrevious,
        refetch
    ]);
    if ("TURBOPACK compile-time truthy", 1) {
        useDebugValue({
            fragment: fragmentNode.name,
            data: fragmentData,
            hasNext: hasNext,
            isLoadingNext: isLoadingNext,
            hasPrevious: hasPrevious,
            isLoadingPrevious: isLoadingPrevious
        });
    }
    return {
        data: fragmentData,
        loadNext: loadNext,
        loadPrevious: loadPrevious,
        hasNext: hasNext,
        hasPrevious: hasPrevious,
        isLoadingNext: isLoadingNext,
        isLoadingPrevious: isLoadingPrevious,
        refetch: refetchPagination
    };
}
function useLoadMore(args) {
    var _useState = useState(false), isLoadingMore = _useState[0], setIsLoadingMore = _useState[1];
    var observer = {
        start: function start() {
            return setIsLoadingMore(true);
        },
        complete: function complete() {
            return setIsLoadingMore(false);
        },
        error: function error() {
            return setIsLoadingMore(false);
        }
    };
    var handleReset = function handleReset() {
        return setIsLoadingMore(false);
    };
    var _useLoadMoreFunction = useLoadMoreFunction((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, args), {}, {
        observer: observer,
        onReset: handleReset
    })), loadMore = _useLoadMoreFunction[0], hasMore = _useLoadMoreFunction[1], disposeFetch = _useLoadMoreFunction[2];
    return [
        loadMore,
        hasMore,
        isLoadingMore,
        disposeFetch
    ];
}
function usePaginationFragment(fragmentInput, parentFragmentRef) {
    var impl = HooksImplementation.get();
    if (impl) {
        return impl.usePaginationFragment(fragmentInput, parentFragmentRef);
    } else {
        return usePaginationFragment_LEGACY(fragmentInput, parentFragmentRef);
    }
}
module.exports = usePaginationFragment;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/usePreloadedQuery.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadQuery.js [app-ssr] (ecmascript)"), useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
var useLazyLoadQueryNode = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useLazyLoadQueryNode.js [app-ssr] (ecmascript)");
var useMemoOperationDescriptor = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useMemoOperationDescriptor.js [app-ssr] (ecmascript)");
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var invariant = __turbopack_require__("[project]/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js [app-ssr] (ecmascript)");
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useDebugValue = _require2.useDebugValue;
var _require3 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), _require3$__internal = _require3.__internal, fetchQueryDeduped = _require3$__internal.fetchQueryDeduped, fetchQuery = _require3$__internal.fetchQuery;
var warning = __turbopack_require__("[project]/node_modules/.pnpm/fbjs@3.0.5/node_modules/fbjs/lib/warning.js [app-ssr] (ecmascript)");
function usePreloadedQuery(gqlQuery, preloadedQuery, options) {
    useTrackLoadQueryInRender();
    var environment = useRelayEnvironment();
    var fetchKey = preloadedQuery.fetchKey, fetchPolicy = preloadedQuery.fetchPolicy, source = preloadedQuery.source, variables = preloadedQuery.variables, networkCacheConfig = preloadedQuery.networkCacheConfig;
    var operation = useMemoOperationDescriptor(gqlQuery, variables, networkCacheConfig);
    var useLazyLoadQueryNodeParams;
    if (preloadedQuery.kind === 'PreloadedQuery_DEPRECATED') {
        !(operation.request.node.params.name === preloadedQuery.name) ? ("TURBOPACK compile-time truthy", 1) ? invariant(false, 'usePreloadedQuery(): Expected data to be prefetched for query `%s`, ' + 'got prefetch results for query `%s`.', operation.request.node.params.name, preloadedQuery.name) : ("TURBOPACK unreachable", undefined) : void 0;
        useLazyLoadQueryNodeParams = {
            componentDisplayName: 'usePreloadedQuery()',
            fetchKey: fetchKey,
            fetchObservable: fetchQueryDeduped(environment, operation.request.identifier, function() {
                if (environment === preloadedQuery.environment && source != null) {
                    return environment.executeWithSource({
                        operation: operation,
                        source: source
                    });
                } else {
                    return environment.execute({
                        operation: operation
                    });
                }
            }),
            fetchPolicy: fetchPolicy,
            query: operation,
            renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy
        };
    } else {
        ("TURBOPACK compile-time truthy", 1) ? warning(preloadedQuery.isDisposed === false, 'usePreloadedQuery(): Expected preloadedQuery to not be disposed yet. ' + 'This is because disposing the query marks it for future garbage ' + 'collection, and as such query results may no longer be present in the Relay ' + 'store. In the future, this will become a hard error.') : ("TURBOPACK unreachable", undefined);
        var fallbackFetchObservable = fetchQuery(environment, operation);
        var fetchObservable;
        if (source != null && environment === preloadedQuery.environment) {
            fetchObservable = source.ifEmpty(fallbackFetchObservable);
        } else if (environment !== preloadedQuery.environment) {
            ("TURBOPACK compile-time truthy", 1) ? warning(false, 'usePreloadedQuery(): usePreloadedQuery was passed a preloaded query ' + 'that was created with a different environment than the one that is currently ' + 'in context. In the future, this will become a hard error.') : ("TURBOPACK unreachable", undefined);
            fetchObservable = fallbackFetchObservable;
        } else {
            fetchObservable = fallbackFetchObservable;
        }
        useLazyLoadQueryNodeParams = {
            componentDisplayName: 'usePreloadedQuery()',
            fetchObservable: fetchObservable,
            fetchKey: fetchKey,
            fetchPolicy: fetchPolicy,
            query: operation,
            renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy
        };
    }
    var data = useLazyLoadQueryNode(useLazyLoadQueryNodeParams);
    if ("TURBOPACK compile-time truthy", 1) {
        useDebugValue({
            query: preloadedQuery.name,
            variables: preloadedQuery.variables,
            data: data,
            fetchKey: fetchKey,
            fetchPolicy: fetchPolicy,
            renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy
        });
    }
    return data;
}
module.exports = usePreloadedQuery;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRefetchableFragment.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var HooksImplementation = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/HooksImplementation.js [app-ssr] (ecmascript)");
var useRefetchableFragmentNode = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/legacy/useRefetchableFragmentNode.js [app-ssr] (ecmascript)");
var useStaticFragmentNodeWarning = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useStaticFragmentNodeWarning.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useDebugValue = _require.useDebugValue;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), getFragment = _require2.getFragment;
function useRefetchableFragment_LEGACY(fragmentInput, fragmentRef) {
    var fragmentNode = getFragment(fragmentInput);
    useStaticFragmentNodeWarning(fragmentNode, 'first argument of useRefetchableFragment()');
    var _useRefetchableFragme = useRefetchableFragmentNode(fragmentNode, fragmentRef, 'useRefetchableFragment()'), fragmentData = _useRefetchableFragme.fragmentData, refetch = _useRefetchableFragme.refetch;
    if ("TURBOPACK compile-time truthy", 1) {
        useDebugValue({
            fragment: fragmentNode.name,
            data: fragmentData
        });
    }
    return [
        fragmentData,
        refetch
    ];
}
function useRefetchableFragment(fragmentInput, parentFragmentRef) {
    var impl = HooksImplementation.get();
    if (impl) {
        return impl.useRefetchableFragment(fragmentInput, parentFragmentRef);
    } else {
        return useRefetchableFragment_LEGACY(fragmentInput, parentFragmentRef);
    }
}
module.exports = useRefetchableFragment;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useSubscribeToInvalidationState.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useEffect = _require.useEffect, useRef = _require.useRef;
function useSubscribeToInvalidationState(dataIDs, callback) {
    var environment = useRelayEnvironment();
    var disposableRef = useRef(null);
    var stableDataIDs = Array.from(dataIDs).sort().join('');
    useEffect(function() {
        var store = environment.getStore();
        var invalidationState = store.lookupInvalidationState(dataIDs);
        var disposable = store.subscribeToInvalidationState(invalidationState, callback);
        disposableRef.current = disposable;
        return function() {
            return disposable.dispose();
        };
    }, [
        stableDataIDs,
        callback,
        environment
    ]);
    return {
        dispose: function dispose() {
            if (disposableRef.current != null) {
                disposableRef.current.dispose();
            }
        }
    };
}
module.exports = useSubscribeToInvalidationState;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useSubscription.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/next@14.2.0-canary.9_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)"), useEffect = _require.useEffect;
var _require2 = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)"), requestSubscription = _require2.requestSubscription;
function useSubscription(config, requestSubscriptionFn) {
    var actualRequestSubscription = requestSubscriptionFn !== null && requestSubscriptionFn !== void 0 ? requestSubscriptionFn : requestSubscription;
    var environment = useRelayEnvironment();
    useEffect(function() {
        var _actualRequestSubscri = actualRequestSubscription(environment, config), dispose = _actualRequestSubscri.dispose;
        return dispose;
    }, [
        environment,
        config,
        actualRequestSubscription
    ]);
}
module.exports = useSubscription;

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/index.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

'use strict';
var ReactRelayContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayContext.js [app-ssr] (ecmascript)");
var ReactRelayFragmentContainer = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayFragmentContainer.js [app-ssr] (ecmascript)");
var ReactRelayLocalQueryRenderer = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayLocalQueryRenderer.js [app-ssr] (ecmascript)");
var ReactRelayPaginationContainer = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayPaginationContainer.js [app-ssr] (ecmascript)");
var ReactRelayQueryRenderer = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayQueryRenderer.js [app-ssr] (ecmascript)");
var ReactRelayRefetchContainer = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/ReactRelayRefetchContainer.js [app-ssr] (ecmascript)");
var EntryPointContainer = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/EntryPointContainer.react.js [app-ssr] (ecmascript)");
var loadEntryPoint = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadEntryPoint.js [app-ssr] (ecmascript)");
var _require = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/loadQuery.js [app-ssr] (ecmascript)"), loadQuery = _require.loadQuery;
var ProfilerContext = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/ProfilerContext.js [app-ssr] (ecmascript)");
var RelayEnvironmentProvider = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/RelayEnvironmentProvider.js [app-ssr] (ecmascript)");
var useClientQuery = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useClientQuery.js [app-ssr] (ecmascript)");
var useEntryPointLoader = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useEntryPointLoader.js [app-ssr] (ecmascript)");
var useFragment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useFragment.js [app-ssr] (ecmascript)");
var useLazyLoadQuery = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useLazyLoadQuery.js [app-ssr] (ecmascript)");
var useMutation = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useMutation.js [app-ssr] (ecmascript)");
var usePaginationFragment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/usePaginationFragment.js [app-ssr] (ecmascript)");
var usePreloadedQuery = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/usePreloadedQuery.js [app-ssr] (ecmascript)");
var useQueryLoader = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useQueryLoader.js [app-ssr] (ecmascript)");
var useRefetchableFragment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRefetchableFragment.js [app-ssr] (ecmascript)");
var useRelayEnvironment = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js [app-ssr] (ecmascript)");
var useSubscribeToInvalidationState = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useSubscribeToInvalidationState.js [app-ssr] (ecmascript)");
var useSubscription = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/relay-hooks/useSubscription.js [app-ssr] (ecmascript)");
var RelayRuntime = __turbopack_require__("[project]/node_modules/.pnpm/relay-runtime@16.2.0/node_modules/relay-runtime/index.js [app-ssr] (ecmascript)");
module.exports = {
    ConnectionHandler: RelayRuntime.ConnectionHandler,
    QueryRenderer: ReactRelayQueryRenderer,
    LocalQueryRenderer: ReactRelayLocalQueryRenderer,
    MutationTypes: RelayRuntime.MutationTypes,
    RangeOperations: RelayRuntime.RangeOperations,
    ReactRelayContext: ReactRelayContext,
    applyOptimisticMutation: RelayRuntime.applyOptimisticMutation,
    commitLocalUpdate: RelayRuntime.commitLocalUpdate,
    commitMutation: RelayRuntime.commitMutation,
    createFragmentContainer: ReactRelayFragmentContainer.createContainer,
    createPaginationContainer: ReactRelayPaginationContainer.createContainer,
    createRefetchContainer: ReactRelayRefetchContainer.createContainer,
    fetchQuery_DEPRECATED: RelayRuntime.fetchQuery_DEPRECATED,
    graphql: RelayRuntime.graphql,
    readInlineData: RelayRuntime.readInlineData,
    requestSubscription: RelayRuntime.requestSubscription,
    EntryPointContainer: EntryPointContainer,
    RelayEnvironmentProvider: RelayEnvironmentProvider,
    ProfilerContext: ProfilerContext,
    fetchQuery: RelayRuntime.fetchQuery,
    loadQuery: loadQuery,
    loadEntryPoint: loadEntryPoint,
    useClientQuery: useClientQuery,
    useFragment: useFragment,
    useLazyLoadQuery: useLazyLoadQuery,
    useEntryPointLoader: useEntryPointLoader,
    useQueryLoader: useQueryLoader,
    useMutation: useMutation,
    usePaginationFragment: usePaginationFragment,
    usePreloadedQuery: usePreloadedQuery,
    useRefetchableFragment: useRefetchableFragment,
    useRelayEnvironment: useRelayEnvironment,
    useSubscribeToInvalidationState: useSubscribeToInvalidationState,
    useSubscription: useSubscription
};

}.call(this) }),
"[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/index.js [app-ssr] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

/**
 * Relay v16.2.0
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ module.exports = __turbopack_require__("[project]/node_modules/.pnpm/react-relay@16.2.0_react@18.2.0/node_modules/react-relay/lib/index.js [app-ssr] (ecmascript)");

}.call(this) }),

};

//# sourceMappingURL=node_modules__pnpm_aff312._.js.map
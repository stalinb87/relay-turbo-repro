{
  "version": 3,
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/__generated__/QueryRootQuery.graphql.ts"],"sourcesContent":["/**\n * @generated SignedSource<<d934d252751f4acac7d7e60db246675f>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type QueryRootQuery$variables = Record<PropertyKey, never>;\nexport type QueryRootQuery$data = {\n  readonly name: string | null | undefined;\n};\nexport type QueryRootQuery = {\n  response: QueryRootQuery$data;\n  variables: QueryRootQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"kind\": \"ScalarField\",\n    \"name\": \"name\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"QueryRootQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"QueryRootQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd73ecb0fe6ceb19f201032924086d18\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"QueryRootQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query QueryRootQuery {\\n  name\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"7a874bbb09ad37fd5fe176c868c06242\";\n\nexport default node;\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,kBAAkB,GAClB,kBAAkB,GAClB,cAAc;;;;AAYd,MAAM,OAAwB,AAAC;IAC/B,IAAI,KAAK;QACP;YACE,SAAS;YACT,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,cAAc;QAChB;KACD;IACD,OAAO;QACL,YAAY;YACV,uBAAuB,EAAE;YACzB,QAAQ;YACR,YAAY;YACZ,QAAQ;YACR,cAAe,GAAE,OAAO;YACxB,QAAQ;YACR,eAAe;QACjB;QACA,QAAQ;QACR,aAAa;YACX,uBAAuB,EAAE;YACzB,QAAQ;YACR,QAAQ;YACR,cAAe,GAAE,OAAO;QAC1B;QACA,UAAU;YACR,WAAW;YACX,MAAM;YACN,YAAY,CAAC;YACb,QAAQ;YACR,iBAAiB;YACjB,QAAQ;QACV;IACF;AACA;AAEC,KAAa,IAAI,GAAG;uCAEN"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/QueryRoot.tsx"],"sourcesContent":["\"use client\";\nimport { useLazyLoadQuery, graphql } from \"react-relay\";\nimport type { QueryRootQuery } from \"@relay/QueryRootQuery.graphql\";\n// import gqlFile from \"@relay/QueryRootQuery.graphql\";\nconst query = graphql`\n  query QueryRootQuery {\n    name\n  }\n`;\nexport default function QueryRoot() {\n  //   return <div>{data.name}</div>;\n  if (!query) {\n    return <QueryRootV2 />;\n  }\n  return \"test\";\n}\n\nfunction QueryRootV2() {\n  const data = useLazyLoadQuery<QueryRootQuery>(\n    graphql`\n      query QueryRootQuery {\n        name\n      }\n    `,\n    {},\n  );\n  return <div>{data.name}</div>;\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAGA,uDAAuD;AACvD,MAAM;AAKS,SAAS;IACtB,mCAAmC;IACnC,IAAI,CAAC,OAAO;QACV,qBAAO,iTAAC;;;;;IACV;IACA,OAAO;AACT;KANwB;AAQxB,SAAS;;IACP,MAAM,OAAO,CAAA,GAAA,4NAAA,CAAA,mBAAgB,AAAD,mHAM1B,CAAC;IAEH,qBAAO,iTAAC;kBAAK,KAAK,IAAI;;;;;;AACxB;GAVS;;QACM,4NAAA,CAAA,mBAAgB;;;MADtB"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/page.tsx"],"sourcesContent":["\"use client\";\nimport QueryRoot from \"../components/QueryRoot\";\nimport { RelayEnvironmentProvider } from \"react-relay\";\n/** Add your relevant code here for the issue to reproduce */\nexport default function Home() {\n  return (\n    <RelayEnvironmentProvider environment={{}}>\n      <QueryRoot />\n    </RelayEnvironmentProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;;;AAAA;;;;AAIe,SAAS;IACtB,qBACE,iTAAC,4NAAA,CAAA,2BAAwB;QAAC,aAAa,CAAC;kBACtC,cAAA,iTAAC,2HAAA,CAAA,UAAS;;;;;;;;;;AAGhB;KANwB"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}